var searchIndex = JSON.parse('{\
"arrow2":{"doc":"Welcome to arrow2’s documentation. Thanks for checking …","t":[4,13,13,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,0,11,0,11,11,11,11,0,11,11,0,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,11,11,0,11,11,11,0,11,11,0,11,11,11,12,12,8,6,3,3,3,6,6,3,8,3,3,6,6,6,6,8,6,6,6,6,6,6,6,6,6,6,8,18,18,3,3,6,6,8,3,3,3,3,3,3,3,3,3,8,3,3,8,8,6,6,6,6,6,6,6,6,3,3,3,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,5,5,5,5,3,3,11,11,5,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,5,0,11,8,8,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,10,5,5,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,5,5,5,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,18,18,18,8,8,5,5,5,10,5,5,10,5,5,5,10,5,5,10,5,5,10,10,10,5,5,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,5,10,5,0,5,5,5,5,5,5,10,10,10,10,10,0,5,10,5,5,10,5,5,10,10,10,5,10,10,10,10,5,10,5,0,10,10,10,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,5,11,11,5,5,11,11,5,5,5,5,5,11,5,5,5,5,11,11,5,11,5,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,5,5,5,5,5,5,5,5,12,5,5,16,8,8,8,8,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,10,5,5,5,10,10,5,10,5,10,5,5,5,10,5,10,5,5,5,10,5,5,5,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,3,11,11,5,11,11,11,5,5,11,11,5,5,11,11,11,11,5,5,5,5,5,5,5,5,3,3,11,11,11,11,5,11,11,11,11,11,12,11,11,11,11,11,11,5,5,12,12,5,5,11,11,11,11,11,11,11,11,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,13,13,13,4,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,4,13,13,13,13,13,13,13,13,13,13,6,13,13,13,13,13,13,4,13,3,6,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,4,13,13,13,13,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,3,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,0,11,11,11,11,11,11,11,11,11,11,11,11,0,0,3,3,3,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,5,6,5,5,5,5,5,5,5,5,5,0,0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,12,11,11,5,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,12,11,11,0,11,11,11,11,11,11,11,11,0,6,3,3,13,3,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,5,5,5,5,11,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,5,11,11,11,11,4,3,13,3,3,13,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,0,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,3,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,5,5,3,8,3,16,8,3,3,16,3,3,3,3,3,3,3,3,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,3,3,3,3,3,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,12,12,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,5,5,5,5,5,0,0,16,8,3,16,10,11,11,11,11,11,11,11,5,11,11,11,11,11,10,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,3,16,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,6,13,3,13,13,13,8,3,3,3,13,13,3,4,8,13,13,3,13,13,13,16,16,13,8,13,3,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,16,16,13,13,13,4,13,13,13,8,13,13,6,3,4,4,4,4,4,13,3,3,3,3,13,13,4,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,5,5,5,5,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,12,11,11,11,11,11,12,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,5,11,11,11,5,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,5,5,11,11,12,0,11,11,12,11,11,11,11,11,11,0,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,13,6,4,13,3,12,12,5,12,12,5,12,12,12,12,12,12,12,12,12,12,12,3,3,3,3,8,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,12,12,5,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,10,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,3,3,4,4,3,13,13,13,13,13,13,13,3,3,4,4,16,8,3,3,13,13,16,6,13,13,4,13,13,13,13,13,6,3,3,13,13,13,13,4,3,13,10,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,5,3,3,3,3,3,3,3,3,8,3,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,8,3,3,16,13,13,13,8,3,13,13,13,13,13,13,8,8,18,18,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,10,11,11,10,11,11,10,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,16,8,18,16,16,8,8,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,5,5,5],"n":["Either","Left","Right","all","array","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_uncased","bitmap","borrow","borrow_mut","buffer","cause","chunk","clone","clone_into","cmp","collect","compute","consume","count","datatypes","deref","deref_mut","description","either","either_with","encode_hex","encode_hex_upper","eq","equivalent","error","expect_left","expect_right","extend","factor_first","factor_second","ffi","fill_buf","flip","flush","fmt","fmt","fold","from","from","get_hash","hash","into","into","into_inner","into_iter","into_iter","io","is_left","is_right","last","left","left_and_then","left_or","left_or_default","left_or_else","map","map_left","map_right","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","ne","next","next_back","nth","partial_cmp","read","read_fixedint","read_to_end","read_varint","right","right_and_then","right_or","right_or_default","right_or_else","scalar","size_hint","temporal_conversions","to_owned","to_string","trusted_len","try_from","try_into","type_id","types","unwrap_left","unwrap_right","util","write","write_fixedint","write_varint","0","0","Array","ArrayRef","BinaryArray","BinaryValueIter","BooleanArray","DaysMsArray","DaysMsVec","DictionaryArray","DictionaryKey","FixedSizeBinaryArray","FixedSizeListArray","Float32Array","Float32Vec","Float64Array","Float64Vec","GenericBinaryArray","Int128Array","Int128Vec","Int16Array","Int16Vec","Int32Array","Int32Vec","Int64Array","Int64Vec","Int8Array","Int8Vec","IterableListArray","KEY_TYPE","KEY_TYPE","ListArray","MapArray","MonthsDaysNsArray","MonthsDaysNsVec","MutableArray","MutableBinaryArray","MutableBooleanArray","MutableDictionaryArray","MutableFixedSizeBinaryArray","MutableFixedSizeListArray","MutableListArray","MutablePrimitiveArray","MutableUtf8Array","NullArray","Offset","PrimitiveArray","StructArray","TryExtend","TryPush","UInt16Array","UInt16Vec","UInt32Array","UInt32Vec","UInt64Array","UInt64Vec","UInt8Array","UInt8Vec","UnionArray","Utf8Array","Utf8ValuesIter","add","add","add","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_mul","checked_mul","checked_mul","checked_rem","checked_rem","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","default","default","default","default","default","default","default_data_type","default_data_type","default_datatype","default_datatype","div","div","div","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equal","extend","extend","extend","extend","extend_constant","extend_from_slice","extend_trusted_len","extend_trusted_len","extend_trusted_len","extend_trusted_len","extend_trusted_len_unchecked","extend_trusted_len_unchecked","extend_trusted_len_unchecked","extend_trusted_len_unchecked","extend_trusted_len_values","extend_trusted_len_values","extend_trusted_len_values","extend_trusted_len_values","extend_trusted_len_values_unchecked","extend_trusted_len_values_unchecked","extend_trusted_len_values_unchecked","extend_trusted_len_values_unchecked","extend_values","field","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data","from_data_unchecked","from_data_unchecked","from_data_unchecked","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter_values","from_iter_values","from_iter_values","from_iter_values","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter","from_trusted_len_values_iter_unchecked","from_trusted_len_values_iter_unchecked","from_trusted_len_values_iter_unchecked","from_trusted_len_values_iter_unchecked","from_trusted_len_values_iter_unchecked","from_trusted_len_values_iter_unchecked","from_values","from_vec","get_child_field","get_child_type","get_display","get_fields","get_fields","get_value_display","growable","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_arc","into_arc","into_arc","into_arc","into_arc","into_arc","into_box","into_box","into_data","into_data","into_iter","into_iter","into_mut","into_mut","into_mut","is_empty","is_empty","is_large","is_null","is_sparse","is_valid","is_valid","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter","iter_values","iter_values","keys","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","mul","mul","mul","mut_values","mut_values","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty","new_empty_array","new_from","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null_array","new_unchecked","new_unchecked","new_unchecked","new_with_capacity","new_with_field","next","next","next_back","null_count","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","offsets","ord","overflowing_add","overflowing_add","overflowing_mul","overflowing_mul","overflowing_sub","overflowing_sub","push","push","push","push","push","push_null","push_null","push_null","push_null","push_null","push_null","push_null","push_null","push_null","push_null","rem","rem","reserve","reserve","reserve","reserve","saturating_add","saturating_add","saturating_add","saturating_mul","saturating_mul","saturating_mul","saturating_sub","saturating_sub","saturating_sub","set","set","set_unchecked","set_validity","set_values","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","shrink_to_fit","size","size","size_hint","size_hint","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","slice_unchecked","sub","sub","sub","to","to","to","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_extend","try_extend","try_extend","try_extend","try_extend","try_extend","try_extend","try_extend","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_iter","try_from_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new_unchecked","try_new_unchecked","try_new_unchecked","try_push","try_push","try_push","try_push","try_push","try_push","try_push","try_push","try_push_valid","try_push_valid","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","types","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","validity","value","value","value","value","value","value","value","value","value","value","value","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_iter","values_mut_slice","values_mut_slice","with_capacities","with_capacities","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity_from","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","with_validity","wrapping_add","wrapping_mul","wrapping_sub","Growable","GrowableBinary","GrowableBoolean","GrowableDictionary","GrowableFixedSizeBinary","GrowableFixedSizeList","GrowableList","GrowableNull","GrowablePrimitive","GrowableStruct","GrowableUtf8","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_arc","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","as_box","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","extend_validity","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","make_growable","new","new","new","new","new","new","new","new","new","new","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","DynComparator","build_compare","total_cmp","total_cmp_f32","total_cmp_f64","Bitmap","MutableBitmap","as_slice","as_slice","binary","borrow","borrow","borrow_mut","borrow_mut","capacity","chunk_iter_to_vec","chunks","clear","clone","clone_into","default","default","eq","eq","extend_constant","extend_from_bitmap","extend_from_slice","extend_from_trusted_len_iter","extend_from_trusted_len_iter_unchecked","fmt","fmt","from","from","from","from","from","from_chunk_iter_unchecked","from_iter","from_iter","from_len_zeroed","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter_unchecked","from_trusted_len_iter_unchecked","from_u8_slice","from_u8_vec","from_vec","get","get","get_bit","get_bit_unchecked","into","into","into_mut","is_empty","is_empty","iter","iter","len","len","new","new","new_zeroed","null_count","null_count","null_count_range","push","push_unchecked","quaternary","reserve","set","set_unchecked","shrink_to_fit","slice","slice_unchecked","ternary","to_owned","try_from","try_from","try_from_trusted_len_iter","try_from_trusted_len_iter","try_from_trusted_len_iter_unchecked","try_from_trusted_len_iter_unchecked","try_into","try_into","type_id","type_id","unary","utils","with_capacity","BitChunk","BitChunkIterExact","BitChunks","BitChunksExact","BitmapIter","SlicesIterator","ZipValidity","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_for","clone","clone","clone","clone_into","clone_into","clone_into","count_zeros","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_ne_bytes","get_bit","get_bit_unchecked","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_set","len","len","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","new","new","new","new","new","next","next","next","next","next","next_back","next_back","remainder","remainder","remainder","remainder","remainder","remainder_iter","remainder_iter","remainder_len","remainder_len","remainder_len","remainder_len","set","set_bit","set_bit_unchecked","size_hint","size_hint","size_hint","size_hint","slots","to_ne_bytes","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","zip_validity","Buffer","as_slice","borrow","borrow_mut","clone","clone_into","default","deref","eq","fmt","from","from","from_iter","from_slice","from_trusted_len_iter","from_trusted_len_iter_unchecked","into","into_mut","is_empty","len","ne","new","new_zeroed","offset","slice","slice_unchecked","to_owned","try_from","try_from_trusted_len_iter","try_from_trusted_len_iter_unchecked","try_into","type_id","Chunk","arrays","borrow","borrow_mut","clone","clone_into","columns","deref","eq","fmt","from","into","into_arrays","is_empty","len","ne","new","to_owned","try_from","try_into","try_new","type_id","aggregate","arithmetics","arity","bitwise","boolean","boolean_kleene","cast","comparison","concatenate","contains","filter","hash","if_then_else","length","like","limit","merge_sort","nullif","partition","regex_match","sort","substring","take","temporal","utf8","window","MAX","MAX","MIN","MIN","SimdOrd","Sum","can_sum","estimated_bytes_size","max","max","max_binary","max_boolean","max_element","max_primitive","max_string","min","min","min_binary","min_boolean","min_element","min_primitive","min_string","new_max","new_min","simd_sum","sum","sum_primitive","ArrayAdd","ArrayCheckedAdd","ArrayCheckedDiv","ArrayCheckedMul","ArrayCheckedRem","ArrayCheckedSub","ArrayDiv","ArrayMul","ArrayOverflowingAdd","ArrayOverflowingMul","ArrayOverflowingSub","ArrayRem","ArraySaturatingAdd","ArraySaturatingMul","ArraySaturatingSub","ArraySub","ArrayWrappingAdd","ArrayWrappingMul","ArrayWrappingSub","add","add","add_scalar","basic","can_add","can_div","can_mul","can_neg","can_rem","can_sub","checked_add","checked_div","checked_mul","checked_rem","checked_sub","decimal","div","div","div_scalar","mul","mul","mul_scalar","neg","overflowing_add","overflowing_mul","overflowing_sub","rem","rem","saturating_add","saturating_mul","saturating_sub","sub","sub","sub_scalar","time","wrapping_add","wrapping_mul","wrapping_sub","NativeArithmetics","add","add_scalar","checked_add","checked_add_scalar","checked_div","checked_div_scalar","checked_mul","checked_mul_scalar","checked_negate","checked_powf_scalar","checked_rem","checked_rem_scalar","checked_sub","checked_sub_scalar","div","div_scalar","mul","mul_scalar","negate","overflowing_add","overflowing_add_scalar","overflowing_mul","overflowing_mul_scalar","overflowing_sub","overflowing_sub_scalar","powf_scalar","rem","rem_scalar","saturating_add","saturating_add_scalar","saturating_mul","saturating_mul_scalar","saturating_sub","saturating_sub_scalar","sub","sub_scalar","wrapping_add","wrapping_add_scalar","wrapping_mul","wrapping_mul_scalar","wrapping_negate","wrapping_sub","wrapping_sub_scalar","adaptive_add","adaptive_div","adaptive_mul","adaptive_sub","add","checked_add","checked_div","checked_mul","checked_sub","div","div_scalar","mul","mul_scalar","saturating_add","saturating_div","saturating_mul","saturating_sub","sub","add_duration","add_duration_scalar","add_interval","add_interval_scalar","sub_duration_scalar","sub_timestamps_scalar","subtract_duration","subtract_timestamps","binary","binary_checked","binary_with_bitmap","try_binary","try_unary","unary","unary_checked","unary_with_bitmap","and","and_scalar","not","or","or_scalar","xor","xor_scalar","all","and","and_scalar","any","is_not_null","is_null","not","or","or_scalar","and","and_scalar","or","or_scalar","CastOptions","binary_large_to_binary","binary_to_dictionary","binary_to_large_binary","binary_to_primitive","boolean_to_binary","boolean_to_primitive","boolean_to_utf8","borrow","borrow_mut","can_cast_types","cast","clone","clone_into","date32_to_date64","date64_to_date32","decimal_to_decimal","decimal_to_float","decimal_to_integer","default","dictionary_to_dictionary_keys","dictionary_to_dictionary_values","dictionary_to_values","float_to_decimal","fmt","from","integer_to_decimal","into","naive_timestamp_to_utf8","partial","partial_binary_to_primitive","partial_utf8_to_primitive","primitive_as_primitive","primitive_to_binary","primitive_to_boolean","primitive_to_dictionary","primitive_to_primitive","primitive_to_same_primitive","primitive_to_utf8","time32_to_time64","time32ms_to_time32s","time32s_to_time32ms","time64_to_time32","time64ns_to_time64us","time64us_to_time64ns","timestamp_to_date32","timestamp_to_date64","timestamp_to_timestamp","timestamp_to_utf8","to_owned","try_from","try_into","type_id","utf8_large_to_utf8","utf8_to_date32","utf8_to_date64","utf8_to_dictionary","utf8_to_large_utf8","utf8_to_naive_timestamp_ns","utf8_to_primitive","utf8_to_timestamp_ns","wrapped","wrapping_dictionary_to_dictionary_keys","wrapping_dictionary_to_dictionary_values","Simd","Simd8","Simd8Lanes","Simd8PartialEq","Simd8PartialOrd","binary","boolean","can_eq","can_eq_scalar","can_gt","can_gt_eq","can_gt_eq_scalar","can_gt_scalar","can_lt","can_lt_eq","can_lt_eq_scalar","can_lt_scalar","can_neq","can_neq_scalar","eq","eq","eq_and_validity","eq_scalar","eq_scalar_and_validity","from_chunk","from_incomplete_chunk","gt","gt","gt_eq","gt_eq","gt_eq_scalar","gt_scalar","lt","lt","lt_eq","lt_eq","lt_eq_scalar","lt_scalar","neq","neq","neq_and_validity","neq_scalar","neq_scalar_and_validity","primitive","utf8","eq","eq_and_validity","eq_scalar","eq_scalar_and_validity","gt","gt_eq","gt_eq_scalar","gt_scalar","lt","lt_eq","lt_eq_scalar","lt_scalar","neq","neq_and_validity","neq_scalar","neq_scalar_and_validity","compare_op_scalar","eq","eq_and_validity","eq_scalar","eq_scalar_and_validity","gt","gt_eq","gt_eq_scalar","gt_scalar","lt","lt_eq","lt_eq_scalar","lt_scalar","neq","neq_and_validity","neq_scalar","neq_scalar_and_validity","compare_op_scalar","eq","eq_and_validity","eq_scalar","eq_scalar_and_validity","gt","gt_eq","gt_eq_scalar","gt_scalar","lt","lt_eq","lt_eq_scalar","lt_scalar","neq","neq_and_validity","neq_scalar","neq_scalar_and_validity","eq","eq_and_validity","eq_scalar","eq_scalar_and_validity","gt","gt_eq","gt_eq_scalar","gt_scalar","lt","lt_eq","lt_eq_scalar","lt_scalar","neq","neq_and_validity","neq_scalar","neq_scalar_and_validity","concatenate","contains","Filter","build_filter","filter","filter_chunk","can_hash","hash","hash_binary","hash_boolean","hash_primitive","hash_utf8","if_then_else","can_length","length","like_binary","like_binary_scalar","like_utf8","like_utf8_scalar","nlike_binary","nlike_binary_scalar","nlike_utf8","nlike_utf8_scalar","limit","MergeSlice","MergeSortSlices","borrow","borrow_mut","build_comparator","from","into","into_iter","merge_sort","merge_sort_slices","multiunzip","next","slices","take_arrays","to_vec","try_from","try_into","type_id","can_nullif","nullif","nullif_scalar","primitive_nullif","primitive_nullif_scalar","lexicographical_partition_ranges","regex_match","regex_match_scalar","SortColumn","SortOptions","borrow","borrow","borrow_mut","borrow_mut","can_sort","clone","clone","clone_into","clone_into","default","descending","fmt","fmt","from","from","into","into","lexsort","lexsort_to_indices","nulls_first","options","sort","sort_to_indices","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","values","can_substring","substring","can_take","take","can_day","can_hour","can_iso_week","can_minute","can_month","can_nanosecond","can_second","can_weekday","can_year","day","hour","iso_week","minute","month","nanosecond","second","weekday","year","can_lower","can_upper","lower","upper","utf8_apply","shift","Binary","Binary","Boolean","Boolean","DataType","Date32","Date64","DayTime","Decimal","Dense","Dictionary","Dictionary","Duration","Extension","Field","FixedSizeBinary","FixedSizeBinary","FixedSizeList","FixedSizeList","Float16","Float32","Float64","Int16","Int16","Int32","Int32","Int64","Int64","Int8","Int8","IntegerType","Interval","IntervalUnit","LargeBinary","LargeBinary","LargeList","LargeList","LargeUtf8","LargeUtf8","List","List","Map","Map","Metadata","Microsecond","Millisecond","MonthDayNano","Nanosecond","Null","Null","PhysicalType","Primitive","Schema","SchemaRef","Second","Sparse","Struct","Struct","Time32","Time64","TimeUnit","Timestamp","UInt16","UInt16","UInt32","UInt32","UInt64","UInt64","UInt8","UInt8","Union","Union","UnionMode","Utf8","Utf8","YearMonth","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data_type","data_type","default","eq","eq","eq","eq","eq","eq","eq","eq","eq_primitive","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","get_extension","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","is_dense","is_nullable","is_sparse","metadata","metadata","name","ne","ne","ne","ne","new","sparse","to_logical_type","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_physical_type","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_metadata","with_metadata","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","2","2","2","0","0","ArrowError","External","ExternalFormat","InvalidArgumentError","Io","NotYetImplemented","OutOfSpec","Overflow","Result","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_external_error","into","to_string","try_from","try_into","type_id","0","0","0","0","0","0","1","ArrowArray","ArrowArrayStream","ArrowArrayStreamReader","ArrowSchema","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","drop","drop","drop","empty","empty","empty","export_array_to_c","export_field_to_c","export_iterator","field","fmt","fmt","fmt","from","from","from","from","import_array_from_c","import_field_from_c","into","into","into","into","next","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","avro","csv","flight","ipc","json","json_integration","ndjson","parquet","print","Block","CompressedBlock","Compression","Deflate","Snappy","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","data","data","default","default","eq","eq","eq","equivalent","fmt","fmt","fmt","from","from","from","get_hash","hash","into","into","into","ne","ne","new","new","number_of_rows","number_of_rows","read","read_async","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write_async","BlockStreamIterator","Decompressor","Reader","advance","advance","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer","decompress_block","deserialize","from","from","from","get","get","into","into","into","into_inner","into_inner","into_inner","into_iter","new","new","new","next","read_metadata","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","block_stream","read_metadata","BoxSerializer","can_serialize","compress","new_serializer","serialize","to_avro_schema","write_block","write_metadata","write_block","write_metadata","read","read_async","write","ByteRecord","Reader","ReaderBuilder","ascii","borrow","borrow","borrow_mut","borrow_mut","buffer_capacity","byte_headers","byte_records","comment","default","delimiter","deserialize","deserialize_batch","deserialize_column","double_quote","escape","flexible","fmt","fmt","from","from","from_path","from_path","from_reader","from_reader","get_mut","get_ref","has_headers","has_headers","headers","infer","infer_schema","into","into","into_byte_records","into_deserialize","into_inner","into_records","is_done","new","position","quote","quoting","read_byte_record","read_record","read_rows","records","seek","seek_raw","set_byte_headers","set_headers","terminator","trim","try_from","try_from","try_into","try_into","type_id","type_id","AsyncReader","AsyncReaderBuilder","ByteRecord","CSVError","as_slice","ascii","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer_capacity","byte_headers","byte_records","clear","clone","clone_into","comment","create_deserializer","create_reader","custom","default","default","delimiter","deserialize","deserialize_batch","deserialize_column","double_quote","end_on_io_error","eq","eq","eq","equivalent","escape","extend","flexible","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_iter","from_reader","get","get_mut","get_ref","has_headers","has_headers","headers","index","infer","infer_schema","into","into","into","into","into_byte_records","into_inner","into_kind","into_records","is_done","is_empty","is_io_error","iter","kind","len","new","new","position","position","position","push_field","quote","quoting","range","read_byte_record","read_record","read_rows","records","rewind","seek","seek_raw","set_byte_headers","set_headers","set_position","source","terminator","to_owned","to_string","trim","trim","truncate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_capacity","ByteRecord","SerializeOptions","WriterBuilder","as_slice","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer_capacity","clear","clone","clone","clone_into","clone_into","date32_format","date64_format","default","default","default","delimiter","delimiter","deserialize","double_quote","eq","eq","eq","eq","equivalent","equivalent","escape","extend","flexible","fmt","fmt","fmt","from","from","from","from","from","from","from_iter","from_path","from_writer","get","get_hash","has_headers","hash","index","into","into","into","is_empty","iter","len","ne","new","new","new_serializer","position","push_field","quote","quote","quote_style","range","serialize","set_position","terminator","time32_format","time64_format","timestamp_format","to_owned","to_owned","trim","truncate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_capacity","write_chunk","write_header","deserialize_batch","deserialize_schemas","serialize_batch","serialize_schema","serialize_schema_to_info","serialize_schema_to_result","IpcField","IpcSchema","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","dictionary_id","eq","eq","fields","fields","fmt","fmt","from","from","into","into","is_little_endian","ne","ne","read","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write","Dictionaries","FileMetadata","FileReader","Some","StreamMetadata","StreamReader","StreamState","Waiting","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize_schema","fmt","fmt","from","from","from","from","from","into","into","into","into","into","into_inner","into_iter","into_iter","ipc_schema","ipc_schema","is_finished","metadata","metadata","new","new","next","next","read_dictionary","read_file_metadata","read_record_batch","read_stream_metadata","schema","schema","schema","stream_async","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrap","version","0","AsyncStreamReader","borrow","borrow_mut","from","into","metadata","new","poll_next","read_stream_metadata_async","try_from","try_into","try_poll_next","type_id","Compression","FileWriter","LZ4","StreamWriter","WriteOptions","ZSTD","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compression","default_ipc_fields","eq","equivalent","finish","finish","fmt","from","from","from","get_hash","hash","into","into","into","into_inner","into_inner","new","schema_to_bytes","start","stream_async","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_new","type_id","type_id","type_id","write","write","write","write_dictionary","StreamWriter","WriteOptions","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","compression","default","eq","equivalent","finish","fmt","from","from","get_hash","hash","into","into","into_inner","ne","new","start","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write","read","write","deserialize","infer","Convert","DoubleEndedFallibleStreamingIterator","Empty","Error","FallibleStreamingIterator","Filter","Fuse","Item","Map","MapErr","MapRef","Serializer","Skip","SkipWhile","Take","TakeWhile","advance","advance","advance","advance","advance","advance","advance","advance","advance","advance","advance","advance","advance","advance_back","advance_back","advance_back","advance_back","advance_back","advance_back","all","any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_ref","clone","clone_into","convert","count","empty","filter","find","fmt","for_each","from","from","from","from","from","from","from","from","from","from","from","from","fuse","get","get","get","get","get","get","get","get","get","get","get","get","get","into","into","into","into","into","into","into","into","into","into","into","into","map","map_err","map_ref","new","next","next","next","next_back","next_back","nth","position","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","skip","skip_while","take","take_while","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","ArrowJson","ArrowJsonBatch","ArrowJsonColumn","ArrowJsonDictionaryBatch","ArrowJsonField","ArrowJsonFieldDictionary","ArrowJsonSchema","IntegerType","batches","bit_width","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","children","children","clone","clone_into","columns","count","data","data","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dictionaries","dictionary","field_type","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","id","id","index_type","into","into","into","into","into","into","into","into","is_ordered","is_signed","metadata","metadata","name","name","nullable","offset","read","schema","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validity","write","deserialize_chunk","deserialize_schema","to_array","serialize_chunk","serialize_schema","read","write","Error","FallibleStreamingIterator","FileReader","Item","advance","advance","all","any","borrow","borrow_mut","by_ref","count","deserialize","filter","find","for_each","from","fuse","get","get","infer","into","into_inner","map","map_err","map_ref","new","next","nth","position","size_hint","skip","skip_while","take","take_while","try_from","try_into","type_id","Error","FallibleStreamingIterator","FileWriter","Item","Serializer","advance","advance","all","any","borrow","borrow","borrow_mut","borrow_mut","by_ref","clone","clone_into","count","filter","find","fmt","for_each","from","from","fuse","get","get","into","into","into_inner","into_iter","map","map_err","map_ref","new","new","next","next","nth","position","size_hint","skip","skip_while","take","take_while","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","read","write","ArrayIter","BSON","BasicDecompressor","Boolean","Bson","ByteArray","ColumnChunkIter","ColumnChunkMetaData","ColumnDescriptor","CompressedDataPage","DATE","DECIMAL","DataPage","DataPageHeader","DataPages","Date","Decimal","Decompressor","Double","ENUM","Enum","Error","Error","External","FallibleStreamingIterator","FeatureNotActive","FileMetaData","FileReader","Finished","FixedLenByteArray","Float","General","GroupType","INTEGER","Int16","Int32","Int32","Int64","Int64","Int8","Int96","Interval","Item","Item","JSON","Json","LIST","LogicalType","MAP","MICROS","MILLIS","MutStreamingIterator","NANOS","OutOfSpec","PageFilter","PageIterator","ParquetError","ParquetTimeUnit","ParquetType","PhysicalType","PrimitiveConvertedType","PrimitiveType","ReadColumnIterator","RowGroupDeserializer","RowGroupMetaData","RowGroupReader","STRING","Some","State","TIME","TIMESTAMP","TimeMicros","TimeMillis","TimestampMicros","TimestampMillis","TimestampType","UNKNOWN","UUID","Uint16","Uint32","Uint64","Uint8","Utf8","V1","V2","_get_page_iterator","_get_page_stream","_read_metadata","_read_metadata_async","advance","advance","advance","advance","advance","all","any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer_mut","buffer_mut","by_ref","byte_range","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","column","column_encoding","column_iter_to_arrays","column_order","column_orders","columns","compressed_size","compressed_size","compression","count","created_by","data_page_offset","decompress","definition_level_encoding","descriptor","descriptor","dictionary_page","dictionary_page_offset","encoding","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","field","field","file_offset","file_path","filter","find","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fuse","get","get","get","get","get","get_column_iterator","get_hash","get_hash","get_hash","get_page_iterator","has_index_page","hash","hash","hash","header","index_page_offset","int96_to_i64_ns","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_buffer","into_buffers","into_inner","into_inner","into_iter","into_iter","into_iter","into_iter","into_thrift","into_thrift","into_thrift","is_adjusted_to_u_t_c","key_value_metadata","key_value_metadata","map","map_err","map_ref","metadata","ne","ne","ne","ne","ne","new","new","new","new","new","new","new","new","new","new","new","next","next","next","next","next","nth","num_columns","num_rows","num_rows","num_rows","num_values","num_values","num_values","partial_cmp","partial_cmp","partial_cmp","physical_type","position","read_columns","read_columns_async","read_columns_many","read_columns_many_async","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_metadata","read_metadata_async","repetition_level_encoding","reuse_buffer","row_groups","schema","schema","schema","schema_descr","set_groups_filter","set_groups_filter","size_hint","size_hint","skip","skip_while","statistics","statistics","statistics","stream_from_in_protocol","stream_from_in_protocol","stream_from_in_protocol","take","take_while","to_deserializer","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","total_byte_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_thrift","try_from_thrift","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncompressed_size","unit","version","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_stream_protocol","write_to_out_stream_protocol","write_to_out_stream_protocol","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","0","0","0","basic_info","basic_info","converted_type","converted_type","fields","logical_type","logical_type","physical_type","0","0","1","0","0","FileMetaData","GroupType","KeyValue","ParquetType","PrimitiveType","SchemaDescriptor","column_orders","created_by","infer_schema","key_value_metadata","num_rows","read_schema_from_metadata","row_groups","schema_descr","version","basic_info","basic_info","converted_type","converted_type","fields","logical_type","logical_type","physical_type","BinaryStatistics","BooleanStatistics","FixedLenStatistics","PrimitiveStatistics","Statistics","Utf8Statistics","as_any","as_any","as_any","as_any","as_any","as_any","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","deserialize_statistics","distinct_count","distinct_count","distinct_count","distinct_count","distinct_count","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","max_value","max_value","max_value","max_value","max_value","min_value","min_value","min_value","min_value","min_value","ne","ne","ne","ne","ne","null_count","null_count","null_count","null_count","null_count","null_count","null_count","null_count","null_count","null_count","null_count","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","BitPacked","Brotli","ByteStreamSplit","ColumnDescriptor","CompressedDataPage","CompressedPage","Compression","Compressor","Data","Data","DeltaBinaryPacked","DeltaByteArray","DeltaLengthByteArray","Dict","Dict","DynIter","DynStreamingIterator","EncodedPage","Encoding","Error","FallibleStreamingIterator","FileSink","FileWriter","GroupType","Gzip","Item","KeyValue","Lz4","Lzo","ParquetType","Plain","PlainDictionary","PrimitiveType","Rle","RleDictionary","RowGroupIter","RowGroupIterator","SchemaDescriptor","Snappy","Uncompressed","V1","V2","Version","WriteOptions","Zstd","advance","advance","advance","all","any","array_to_page","array_to_pages","base_type","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_ref","can_encode","check_contains","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","column","columns","compress","compressed_size","compression","compression","count","descriptor","end","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fields","filter","find","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_converted","from_physical","fuse","get","get","get","get_basic_info","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","header","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_compressed","is_root","map","map_err","map_ref","max_def_level","max_rep_level","metadata","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","name","name","name","ne","ne","ne","new","new","new","new","new","new","new_from_vec","new_root","next","next","next","nth","num_columns","num_values","options","options","parquet_schema","parquet_schema","parquet_schema","path_in_schema","physical_type","poll_close","poll_flush","poll_ready","position","row_group_iter","schema","schema","size_hint","size_hint","size_hint","skip","skip_while","start","start_send","statistics","take","take_while","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_parquet_schema","to_parquet_type","to_thrift","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_group","try_from_message","try_from_primitive","try_from_thrift","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new","try_new","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncompressed_size","version","write","write_statistics","0","0","0","0","basic_info","basic_info","converted_type","converted_type","fields","logical_type","logical_type","physical_type","write","BinaryScalar","BooleanScalar","DictionaryScalar","FixedSizeBinaryScalar","FixedSizeListScalar","ListScalar","NullScalar","PrimitiveScalar","Scalar","StructScalar","Utf8Scalar","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","ne","ne","ne","ne","ne","new","new","new","new","new","new","new","new","new","new","new_scalar","to","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","value","value","value","values","values","values","EPOCH_DAYS_FROM_CE","MICROSECONDS","MILLISECONDS","MILLISECONDS_IN_DAY","NANOSECONDS","SECONDS_IN_DAY","add_interval","add_naive_interval","date32_to_date","date32_to_datetime","date64_to_date","date64_to_datetime","parse_offset","parse_offset_tz","time32ms_to_time","time32s_to_time","time64ns_to_time","time64us_to_time","timestamp_ms_to_datetime","timestamp_ns_to_datetime","timestamp_s_to_datetime","timestamp_to_datetime","timestamp_to_naive_datetime","timestamp_us_to_datetime","timeunit_scale","utf8_to_naive_timestamp_ns","utf8_to_naive_timestamp_ns_scalar","utf8_to_timestamp_ns","utf8_to_timestamp_ns_scalar","TrustedLen","BitChunk","BitChunkIter","BitChunkOnes","Bytes","DaysMs","Float32","Float64","Index","IndexRange","Int128","Int16","Int32","Int64","Int8","MonthDayNano","NativeType","Offset","PRIMITIVE","PRIMITIVE","PrimitiveType","UInt16","UInt32","UInt64","UInt8","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","days","days","days_ms","default","default","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_be_bytes","from_be_bytes","from_be_bytes","from_ne_bytes","from_usize","get_hash","get_hash","get_hash","hash","hash","hash","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_large","milliseconds","months","months_days_ns","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","ne","ne","neg","neg","new","new","new","new","new","next","next","next","ns","range","range","simd","size_hint","size_hint","size_hint","to_be_bytes","to_be_bytes","to_be_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_ne_bytes","to_owned","to_owned","to_owned","to_string","to_string","to_usize","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","Chunk","FromMaskChunk","LANES","Mask","Native","NativeSimd","Simd","Simd","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","align","align","align","align","align","align","align","align","align","align","align","align","align","align","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","days_msx8","default","default","default","default","default","default","default","default","default","default","default","default","default","f32x16","f64x8","from","from","from","from","from","from","from","from","from","from","from","from","from","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","from_incomplete_chunk","i128x8","i16x32","i32x16","i64x8","i8x64","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","max","max","max","max","max","max","max","max","max","max","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","max_element","min","min","min","min","min","min","min","min","min","min","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","min_element","months_days_nsx8","new_max","new_max","new_max","new_max","new_max","new_max","new_max","new_max","new_max","new_max","new_min","new_min","new_min","new_min","new_min","new_min","new_min","new_min","new_min","new_min","select","select","select","select","select","select","select","select","select","select","select","select","select","select","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","simd_sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u16x32","u32x16","u64x8","u8x64","lexical_to_bytes","lexical_to_bytes_mut","lexical_to_string"],"q":["arrow2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::Either","","arrow2::arrayarrow2::array::growable","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::array::ord","","","","","arrow2::bitmap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::bitmap::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::chunk","","","","","","","","","","","","","","","","","","","","","","arrow2::compute","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute::aggregate","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute::arithmetics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute::arithmetics::basic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute::arithmetics::decimal","","","","","","","","","","","","","","","","","","arrow2::compute::arithmetics::time","","","","","","","","arrow2::compute::arity","","","","","","","","arrow2::compute::bitwise","","","","","","","arrow2::compute::boolean","","","","","","","","","arrow2::compute::boolean_kleene","","","","arrow2::compute::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute::comparison","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute::comparison::binary","","","","","","","","","","","","","","","","arrow2::compute::comparison::boolean","","","","","","","","","","","","","","","","","arrow2::compute::comparison::primitive","","","","","","","","","","","","","","","","","arrow2::compute::comparison::utf8","","","","","","","","","","","","","","","","arrow2::compute::concatenate","arrow2::compute::contains","arrow2::compute::filter","","","","arrow2::compute::hash","","","","","","arrow2::compute::if_then_else","arrow2::compute::length","","arrow2::compute::like","","","","","","","","arrow2::compute::limit","arrow2::compute::merge_sort","","","","","","","","","","","","","","","","","","arrow2::compute::nullif","","","","","arrow2::compute::partition","arrow2::compute::regex_match","","arrow2::compute::sort","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::compute::substring","","arrow2::compute::take","","arrow2::compute::temporal","","","","","","","","","","","","","","","","","","arrow2::compute::utf8","","","","","arrow2::compute::window","arrow2::datatypesarrow2::datatypes::DataType","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::datatypes::PhysicalType","","arrow2::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::error::ArrowError","","","","","","","arrow2::ffi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io","","","","","","","","","arrow2::io::avro","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::avro::read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::avro::read_async","","arrow2::io::avro::write","","","","","","","","arrow2::io::avro::write_async","","arrow2::io::csv","","","arrow2::io::csv::read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::csv::read_async","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::csv::write","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::flight","","","","","","arrow2::io::ipc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::read::StreamState","arrow2::io::ipc::read::stream_async","","","","","","","","","","","","","arrow2::io::ipc::write","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ipc::write::stream_async","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::json","","arrow2::io::json::read","","arrow2::io::json::writearrow2::io::json_integration","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::json_integration::read","","","arrow2::io::json_integration::write","","arrow2::io::ndjson","","arrow2::io::ndjson::read","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::ndjson::write","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::parquet","","arrow2::io::parquet::readarrow2::io::parquet::read::DataPageHeader","","arrow2::io::parquet::read::LogicalType","","","","","","","","","","","","","arrow2::io::parquet::read::ParquetError","","","","","","arrow2::io::parquet::read::ParquetTimeUnit","","","arrow2::io::parquet::read::ParquetType","","","","","","","","arrow2::io::parquet::read::PhysicalType","arrow2::io::parquet::read::PrimitiveConvertedType","","arrow2::io::parquet::read::State","","arrow2::io::parquet::read::schema","","","","","","","","","","","","","","","arrow2::io::parquet::read::schema::ParquetType","","","","","","","","arrow2::io::parquet::read::statistics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::io::parquet::writearrow2::io::parquet::write::CompressedPage","","arrow2::io::parquet::write::EncodedPage","","arrow2::io::parquet::write::ParquetType","","","","","","","","arrow2::io::print","arrow2::scalararrow2::temporal_conversions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::trusted_len","arrow2::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arrow2::types::simdarrow2::util","",""],"d":["The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","A value of type <code>L</code>.","A value of type <code>R</code>.","","Contains the <code>Array</code> and <code>MutableArray</code> trait objects …","","","","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","","","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","","","","","contains <code>Bitmap</code> and <code>MutableBitmap</code>, containers of <code>bool</code>.","","","Contains <code>Buffer</code>, an immutable container for all Arrow …","","Contains <code>Chunk</code>, a container of <code>Array</code> where every array has …","","","","","contains a wide range of compute operations (e.g. …","","","Contains all metadata, such as <code>PhysicalType</code>, <code>DataType</code>, …","","","","Apply one of two functions depending on contents, unifying …","Like <code>either</code>, but provide some context to whichever of the …","","","","","Defines <code>ArrowError</code>, representing all errors returned by …","Returns the left value","Returns the right value","","Factor out a homogeneous type from an either of pairs.","Factor out a homogeneous type from an either of pairs.","contains FFI bindings to import and export <code>Array</code> via Arrow…","","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","Extract the value of an either over two equivalent types.","","Convert the inner value to an iterator.","Contains modules to interface with other formats such as …","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","Map <code>f</code> over the contained value and return the result in the","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","","","","","","","","","","","","","","","","","","","","","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","contains the <code>Scalar</code> trait object representing individual …","","Conversion methods for dates and times.","","","Declares <code>TrustedLen</code>.","","","","Sealed traits and implementations to handle all <em>physical </em>…","Returns the left value","Returns the right value","Misc utilities used in different places in the crate.","","","","","","A trait representing an immutable Arrow array. Arrow …","A type def of <code>Array</code>.","A <code>BinaryArray</code> is a nullable array of bytes - the Arrow …","Iterator over slices of <code>&amp;[u8]</code>.","The Arrow’s equivalent to an immutable <code>Vec&lt;Option&lt;bool&gt;&gt;</code>…","A type definition <code>PrimitiveArray</code> for <code>days_ms</code>","A type definition <code>MutablePrimitiveArray</code> for <code>days_ms</code>","An <code>Array</code> whose values are encoded by keys. This <code>Array</code> is …","Trait denoting <code>NativeType</code>s that can be used as keys of a …","The Arrow’s equivalent to an immutable …","The Arrow’s equivalent to an immutable …","A type definition <code>PrimitiveArray</code> for <code>f32</code>","A type definition <code>MutablePrimitiveArray</code> for <code>f32</code>","A type definition <code>PrimitiveArray</code> for <code>f64</code>","A type definition <code>MutablePrimitiveArray</code> for <code>f64</code>","Trait that <code>BinaryArray</code> and <code>Utf8Array</code> implement for the …","A type definition <code>PrimitiveArray</code> for <code>i128</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i128</code>","A type definition <code>PrimitiveArray</code> for <code>i16</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i16</code>","A type definition <code>PrimitiveArray</code> for <code>i32</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i32</code>","A type definition <code>PrimitiveArray</code> for <code>i64</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i64</code>","A type definition <code>PrimitiveArray</code> for <code>i8</code>","A type definition <code>MutablePrimitiveArray</code> for <code>i8</code>","Trait that list arrays implement for the purposes of DRY.","The corresponding <code>IntegerType</code> of this key","The corresponding <code>IntegerType</code> of this key","An <code>Array</code> semantically equivalent to …","An array representing a (key, value), both of arbitrary …","A type definition <code>PrimitiveArray</code> for <code>months_days_ns</code>","A type definition <code>MutablePrimitiveArray</code> for <code>months_days_ns</code>","A trait describing a mutable array; i.e. an array whose …","The Arrow’s equivalent to <code>Vec&lt;Option&lt;Vec&lt;u8&gt;&gt;&gt;</code>. …","The Arrow’s equivalent to <code>Vec&lt;Option&lt;bool&gt;&gt;</code>, but with …","A mutable, strong-typed version of <code>DictionaryArray</code>.","The Arrow’s equivalent to a mutable …","The mutable version of <code>FixedSizeListArray</code>.","The mutable version of <code>ListArray</code>.","The Arrow’s equivalent to <code>Vec&lt;Option&lt;T&gt;&gt;</code> where <code>T</code> is …","The mutable version of <code>Utf8Array</code>. See <code>MutableArray</code> for …","The concrete <code>Array</code> of <code>DataType::Null</code>.","Sealed trait describing the subset (<code>i32</code> and <code>i64</code>) of <code>Index</code> …","A <code>PrimitiveArray</code> is arrow’s equivalent to …","A <code>StructArray</code> is a nested <code>Array</code> with an optional validity …","A trait describing the ability of a struct to create …","A trait describing the ability of a struct to receive new …","A type definition <code>PrimitiveArray</code> for <code>u16</code>","A type definition <code>MutablePrimitiveArray</code> for <code>u16</code>","A type definition <code>PrimitiveArray</code> for <code>u32</code>","A type definition <code>MutablePrimitiveArray</code> for <code>u32</code>","A type definition <code>PrimitiveArray</code> for <code>u64</code>","A type definition <code>MutablePrimitiveArray</code> for <code>u64</code>","A type definition <code>PrimitiveArray</code> for <code>u8</code>","A type definition <code>MutablePrimitiveArray</code> for <code>u8</code>","<code>UnionArray</code> represents an array whose each slot can contain …","A <code>Utf8Array</code> is arrow’s equivalent of an immutable …","Iterator of values of an <code>Utf8Array</code>.","","","","Convert to trait object.","Convert to <code>Any</code>, to enable dynamic casting.","","","","","","","","","","","","","","","","","","","","","Convert itself to an (immutable) atomically reference …","","","","","","","","","Convert itself to an (immutable) [‘Array’].","","","","","","","","","Convert to mutable <code>Any</code>, to enable dynamic casting.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clones a dynamic <code>Array</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>DataType</code> of the <code>Array</code>. In combination with …","The <code>DataType</code> of the array.","","","","","","","","","","","","","","","","","The arrays’ logical type","","","","","","","","","","","Returns the default <code>DataType</code>, <code>DataType::Binary</code> or …","Returns the default <code>DataType</code>, <code>DataType::Utf8</code> or …","Returns a <code>DataType</code> consistent with <code>FixedSizeListArray</code>.","Returns a default <code>DataType</code>: inner field is named “item”…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Logically compares two <code>Array</code>s. Two arrays are logically …","","","","","Extends the <code>MutablePrimitiveArray</code> with a constant","Extends the <code>MutablePrimitiveArray</code> from a slice","Extends the <code>MutableBinaryArray</code> from an iterator of …","Extends the <code>MutableBooleanArray</code> from an iterator of …","Extends the <code>MutablePrimitiveArray</code> from an iterator of …","Extends the <code>MutableUtf8Array</code> from an iterator of trusted …","Extends the <code>MutableBinaryArray</code> from an iterator of …","Extends the <code>MutableBooleanArray</code> from an iterator of …","Extends the <code>MutablePrimitiveArray</code> from an iterator of …","Extends <code>MutableUtf8Array</code> from an iterator of trusted len.","Extends the <code>MutableBinaryArray</code> from an iterator of trusted …","Extends the <code>MutableBooleanArray</code> from an iterator of values …","Extends the <code>MutablePrimitiveArray</code> from an iterator of …","Extends the <code>MutableUtf8Array</code> from an iterator of values of …","Extends the <code>MutableBinaryArray</code> from an <code>iterator</code> of values …","Extends the <code>MutableBooleanArray</code> from an iterator of values …","Extends the <code>MutablePrimitiveArray</code> from an iterator of …","Extends the <code>MutableUtf8Array</code> from an iterator of values of …","Extends the <code>MutableUtf8Array</code> from an iterator of values. …","Returns the field (guaranteed to be a <code>Struct</code>)","Returns the fields of this <code>StructArray</code>.","The fields.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Creates a new <code>BinaryArray</code> from a slice of optional <code>&amp;[u8]</code>.","","Creates a new <code>MutableBooleanArray</code> out of a slice of …","Returns the argument unchanged.","Creates a new <code>BooleanArray</code> out of a slice of Optional <code>bool</code>.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Creates a new <code>Utf8Array</code> from a slice of <code>&amp;str</code>.","Returns the argument unchanged.","","The canonical method to create a <code>MutableBinaryArray</code> out of …","Alias for <code>new</code>","Canonical method to create a new <code>MutableBooleanArray</code>.","Alias for <code>new</code>","The canonical method to create a new <code>DictionaryArray</code>.","Canonical method to create a new …","Alias for <code>new</code>","Alias for <code>new</code>","Alias of <code>new</code>","Alias for <code>new</code>","Alias for <code>new</code>","Create a <code>MutablePrimitiveArray</code> out of low-end APIs.","Alias for <code>new</code>","Alias for <code>new</code>","Alias for <code>new</code>","The canonical method to create a <code>MutableUtf8Array</code> out of …","Alias for <code>new</code>","Alias for [<code>new_unchecked</code>]","Create a <code>MutableUtf8Array</code> out of low-end APIs.","Alias for [<code>new_unchecked</code>]","","","","","Creates a <code>FixedSizeBinaryArray</code> from an iterator of …","","","","","Creates a new <code>MutableBinaryArray</code> from a <code>Iterator</code> of <code>&amp;[u8]</code>.","Creates a new <code>BinaryArray</code> from a <code>Iterator</code> of <code>&amp;str</code>.","Creates a new <code>MutableUtf8Array</code> from a <code>Iterator</code> of <code>&amp;str</code>.","Creates a new <code>Utf8Array</code> from a <code>Iterator</code> of <code>&amp;str</code>.","Creates a new <code>BinaryArray</code> from slices of <code>&amp;[u8]</code>.","Creates a new <code>MutableBooleanArray</code> from a slice of <code>bool</code>.","Creates a new <code>BooleanArray</code> from a slice of <code>bool</code>.","Creates a <code>MutablePrimitiveArray</code> from a slice of values.","Creates a (non-null) <code>PrimitiveArray</code> from a slice of values.","Creates a new <code>Utf8Array</code> from a slice of <code>&amp;str</code>. This is a …","Creates a <code>MutableBinaryArray</code> from an iterator of trusted …","Creates a <code>BinaryArray</code> from an iterator of trusted length.","Creates a <code>BooleanArray</code> from a <code>TrustedLen</code>.","Creates a <code>BooleanArray</code> from a <code>TrustedLen</code>.","Creates a <code>MutablePrimitiveArray</code> from a <code>TrustedLen</code>.","Creates a <code>PrimitiveArray</code> from a <code>TrustedLen</code> of optional …","Creates a <code>MutableUtf8Array</code> from an iterator of trusted …","Creates a <code>Utf8Array</code> from an iterator of trusted length.","Creates a <code>MutableBinaryArray</code> from an iterator of trusted …","Creates a <code>BinaryArray</code> from an iterator of trusted length.","Creates a <code>BooleanArray</code> from an iterator of trusted length. …","Creates a <code>BooleanArray</code> from an iterator of trusted length. …","Creates a <code>MutablePrimitiveArray</code> from an iterator of …","Creates a <code>PrimitiveArray</code> from an iterator of optional …","Creates a <code>MutableUtf8Array</code> from an iterator of trusted …","Creates a <code>Utf8Array</code> from an iterator of trusted length.","Creates a new <code>BinaryArray</code> from a <code>TrustedLen</code> of <code>&amp;[u8]</code>.","Creates a <code>BinaryArray</code> from an iterator of trusted length.","Creates a new <code>MutableBooleanArray</code> from an <code>TrustedLen</code> of …","Creates a new <code>BooleanArray</code> from an <code>TrustedLen</code> of <code>bool</code>.","Creates a new <code>MutablePrimitiveArray</code> out an iterator over …","Creates a (non-null) <code>PrimitiveArray</code> from a <code>TrustedLen</code> of …","Creates a new <code>MutableUtf8Array</code> from a <code>TrustedLen</code> of <code>&amp;str</code>.","Creates a new <code>Utf8Array</code> from a <code>TrustedLen</code> of <code>&amp;str</code>.","Creates a new <code>BinaryArray</code> from a <code>TrustedLen</code> of <code>&amp;[u8]</code>.","Creates a new <code>MutableBooleanArray</code> from an <code>TrustedLen</code> of …","Creates a new <code>BooleanArray</code> from an <code>TrustedLen</code> of <code>bool</code>. Use …","Creates a new <code>MutablePrimitiveArray</code> from an iterator over …","Creates a new <code>PrimitiveArray</code> from an iterator over values","Creates a <code>MutableUtf8Array</code> from an iterator of trusted …","Creates a (non-null) <code>PrimitiveArray</code> from an iterator of …","Creates a (non-null) <code>PrimitiveArray</code> from a vector of …","Returns a the inner <code>Field</code>","Returns a the inner <code>DataType</code>","Returns a function that writes the element of <code>array</code> at …","Returns the fields the <code>DataType::Struct</code>.","Returns all fields from <code>DataType::Union</code>.","Returns a function that writes the value of the element of …","Contains the trait <code>Growable</code> and corresponding concreate …","Returns the index and slot of the field to select from …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts itself into an <code>Array</code>.","Converts itself into an <code>Array</code>.","converts itself into <code>Arc&lt;dyn Array&gt;</code>","Converts itself into an <code>Array</code>.","Converts itself into an <code>Array</code>.","Converts itself into an <code>Array</code>.","converts itself into <code>Box&lt;dyn Array&gt;</code>","converts itself into <code>Box&lt;dyn Array&gt;</code>","Extract the low-end APIs from the <code>MutablePrimitiveArray</code>.","Deconstructs the <code>StructArray</code> into its individual …","","","Try to convert this <code>BooleanArray</code> to a <code>MutableBooleanArray</code>","Try to convert this <code>PrimitiveArray</code> to a …","Try to convert this <code>Utf8Array</code> to a <code>MutableUtf8Array</code>","whether the array is empty","Whether the array is empty.","Whether it is <code>i32</code> (false) or <code>i64</code> (true).","Returns whether slot <code>i</code> is null.","Returns whether the <code>DataType::Union</code> is sparse or not.","Returns whether slot <code>i</code> is valid.","Whether <code>index</code> is valid / set.","Returns an iterator of <code>Option&lt;&amp;[u8]&gt;</code>","Returns an iterator over the optional values of this …","Returns an iterator over the optional values of this …","Returns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>","constructs a new iterator","constructs a new iterator","Returns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>","Returns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>","Returns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>","Returns an iterator over <code>Option&lt;T&gt;</code>","constructs a new iterator","Returns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>","constructs a new iterator","Returns an iterator of <code>Option&lt;&amp;str&gt;</code>","Returns iterator over the values of …","Returns iterator over the values of <code>FixedSizeBinaryArray</code>","Returns the keys of the <code>DictionaryArray</code>. These keys can be …","The length of the <code>Array</code>. Every array has a length …","The length of the array.","","","Returns the length of this array","","","Returns the length of this array","","Returns the length of this array","","","Returns the length of this array","","","","Returns the length of this array","","","Returns the length of this array","Returns the length of this array","","","","","Returns the length of this array","","Returns the length of this array","","","Returns the length of this array","","","","","returns a mutable reference to the inner values.","The values","Creates a new <code>BinaryValueIter</code>","Creates a new empty <code>MutableBinaryArray</code>.","Creates a new <code>BinaryArray</code>.","Creates an new empty <code>MutableBooleanArray</code>.","The canonical method to create a <code>BooleanArray</code>","Creates an empty <code>MutableDictionaryArray</code>.","Creates a new empty <code>MutableFixedSizeBinaryArray</code>.","Creates a new <code>FixedSizeBinaryArray</code>.","Creates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…","Creates a new <code>FixedSizeListArray</code>.","Creates a new empty <code>MutableListArray</code>.","Creates a new <code>ListArray</code>.","Creates a new <code>MapArray</code>.","Returns a new <code>NullArray</code>.","Creates a new empty <code>MutablePrimitiveArray</code>.","The canonical method to create a <code>PrimitiveArray</code>","Returns a new <code>StructArray</code>","Returns a new <code>UnionArray</code>.","Creates a new <code>Utf8ValuesIter</code>","Initializes a new empty <code>MutableUtf8Array</code>.","Creates a new <code>Utf8Array</code>.","Creates an empty <code>BinaryArray</code>, i.e. whose <code>.len</code> is zero.","Returns a new empty <code>BooleanArray</code>.","Returns a new empty <code>DictionaryArray</code>.","Returns a new empty <code>FixedSizeBinaryArray</code>.","Returns a new empty <code>FixedSizeListArray</code>.","Returns a new empty <code>ListArray</code>.","Returns a new empty <code>MapArray</code>.","Returns a new empty <code>NullArray</code>.","Returns a new empty <code>PrimitiveArray</code>.","Creates an empty <code>StructArray</code>.","Creates a new empty <code>UnionArray</code>.","Returns a new empty <code>Utf8Array</code>.","Creates a new <code>Array</code> with a <code>Array::len</code> of 0.","Creates a new <code>MutableListArray</code> from a <code>MutableArray</code> and …","Creates an null <code>BinaryArray</code>, i.e. whose …","Returns a new <code>BooleanArray</code> whose all slots are null / <code>None</code>.","Returns an <code>DictionaryArray</code> whose all elements are null","Returns a new null <code>FixedSizeBinaryArray</code>.","Returns a new null <code>FixedSizeListArray</code>.","Returns a new null <code>ListArray</code>.","Returns a new null <code>MapArray</code> of <code>length</code>.","Returns a new <code>NullArray</code>.","Returns a new <code>PrimitiveArray</code> whose all slots are null / …","Creates a null <code>StructArray</code> of length <code>length</code>.","Creates a new null <code>UnionArray</code>.","Returns a new <code>Utf8Array</code> whose all slots are null / <code>None</code>.","Creates a new <code>Array</code> of <code>DataType</code> <code>data_type</code> and <code>length</code>. The …","Creates a new <code>BinaryArray</code> without checking for offsets …","Creates a new <code>ListArray</code>.","Creates a new <code>Utf8Array</code> without checking for offsets …","Creates a new <code>MutableListArray</code> from a <code>MutableArray</code> and …","Creates a new <code>MutableListArray</code> from a <code>MutableArray</code>.","","","","The number of null slots on this <code>Array</code>.","The offsets of the array","returns its offsets.","","Returns the offsets that slice <code>.values()</code> to return valid …","The offseta","The offsets <code>Buffer</code>.","returns the offsets","The optional offsets.","returns its offsets.","","Returns the offsets of this <code>Utf8Array</code>.","Contains functions and function factories to order values …","","","","","","","Pushes a new element to the array.","Pushes a new entry to <code>MutableBooleanArray</code>.","pushes a new entry to <code>MutableFixedSizeBinaryArray</code>.","Adds a new value to the array.","Pushes a new element to the array.","Adds a new null element to the array.","","","pushes a null value","","","","","","","","","Reserves <code>additional</code> slots.","Reserves <code>additional</code> slots.","Reserves <code>additional</code> entries.","Reserves <code>additional</code> elements and <code>additional_values</code> on the …","","","","","","","","","","Sets position <code>index</code> to <code>value</code>. Note that if it is the first …","Sets position <code>index</code> to <code>value</code>. Note that if it is the first …","Sets position <code>index</code> to <code>value</code>. Note that if it is the first …","Sets the validity.","Sets values.","Shrink the array to fit its length.","","Shrinks the capacity of the <code>MutableBinaryArray</code> to fit its …","Shrinks the capacity of the <code>MutableBooleanArray</code> to fit its …","","Shrinks the capacity of the <code>MutableDictionaryArray</code> to fit …","","","Shrinks the capacity of the <code>MutableFixedSizeBinaryArray</code> to …","Shrinks the capacity of the <code>MutableFixedSizeListArray</code> to …","","Shrinks the capacity of the <code>MutableListArray</code> to fit its …","","Shrinks the capacity of the <code>MutablePrimitiveArray</code> to fit …","","","Shrinks the capacity of the <code>MutableUtf8Array</code> to fit its …","returns the (fixed) size of the <code>MutableFixedSizeBinaryArray</code>…","Returns the size","","","Slices the <code>Array</code>, returning a new <code>Box&lt;dyn Array&gt;</code>.","","Creates a new <code>BinaryArray</code> by slicing this <code>BinaryArray</code>.","Returns a slice of this <code>BooleanArray</code>.","","Creates a new <code>DictionaryArray</code> by slicing the existing …","","Returns a slice of this <code>FixedSizeBinaryArray</code>.","","Returns a slice of this <code>FixedSizeListArray</code>.","","","Returns a slice of this <code>ListArray</code>.","Returns a slice of this <code>MapArray</code>.","","","Returns a slice of the <code>NullArray</code>.","","Returns a slice of this <code>PrimitiveArray</code>.","Creates a new <code>StructArray</code> that is a slice of <code>self</code>.","","","Returns a slice of this <code>UnionArray</code>.","","Returns a slice of this <code>Utf8Array</code>.","Slices the <code>Array</code>, returning a new <code>Box&lt;dyn Array&gt;</code>.","","Creates a new <code>BinaryArray</code> by slicing this <code>BinaryArray</code>.","Returns a slice of this <code>BooleanArray</code>.","","","Creates a new <code>DictionaryArray</code> by slicing the existing …","","Returns a slice of this <code>FixedSizeBinaryArray</code>.","","Returns a slice of this <code>FixedSizeListArray</code>.","Returns a slice of this <code>ListArray</code>.","","","Returns a slice of this <code>MapArray</code>.","","Returns a slice of this <code>PrimitiveArray</code>.","","Creates a new <code>StructArray</code> that is a slice of <code>self</code>.","","Returns a slice of this <code>UnionArray</code>.","","Returns a slice of this <code>Utf8Array</code>.","","","","","Returns a new [<code>FixedSizeBinary</code>] with a different logical …","Changes the arrays’ <code>DataType</code>, returning a new …","Returns a new <code>PrimitiveArray</code> with a different logical type.","","","","","","","","","","","","","","","Fallible version of <code>Extend::extend</code>.","","This is infalible and is implemented for consistency with …","","","","This is infalible and is implemented for consistency with …","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>MutableFixedSizeBinaryArray</code> from an iterator …","Creates a <code>FixedSizeBinaryArray</code> from an fallible iterator …","Creates a <code>MutableBinaryArray</code> from an falible iterator of …","Creates a <code>BinaryArray</code> from an fallible iterator of trusted …","Creates a <code>BooleanArray</code> from a <code>TrustedLen</code>.","Creates a <code>BooleanArray</code> from a <code>TrustedLen</code>.","Creates a <code>MutablePrimitiveArray</code> from an fallible iterator …","Creates a <code>MutableUtf8Array</code> from an falible iterator of …","Creates a <code>Utf8Array</code> from an fallible iterator of trusted …","Creates a <code>MutableBinaryArray</code> from an falible iterator of …","Creates a <code>BinaryArray</code> from an falible iterator of trusted …","Creates a <code>BooleanArray</code> from an falible iterator of trusted …","Creates a <code>BooleanArray</code> from an falible iterator of trusted …","Creates a <code>MutablePrimitiveArray</code> from an fallible iterator …","Creates a <code>MutableUtf8Array</code> from an falible iterator of …","Creates a <code>Utf8Array</code> from an falible iterator of trusted …","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>BinaryArray</code>.","The canonical method to create a <code>BooleanArray</code> out of …","Creates a new <code>FixedSizeBinaryArray</code>.","Creates a new <code>FixedSizeListArray</code>.","Creates a new <code>ListArray</code>.","Returns a new <code>MapArray</code>.","Returns a new <code>NullArray</code>.","The canonical method to create a <code>PrimitiveArray</code>.","Returns a new <code>StructArray</code>.","Returns a new <code>UnionArray</code>.","Returns a new <code>Utf8Array</code>.","Creates a new <code>BinaryArray</code> without checking for offsets …","Creates a new <code>ListArray</code>.","Creates a new <code>Utf8Array</code> without checking for offsets …","Tries to push a new element.","","This is infalible and is implemented for consistency with …","tries to push a new entry to <code>MutableFixedSizeBinaryArray</code>.","","","This is infalible and is implemented for consistency with …","","Returns whether the value should be pushed to the values …","Needs to be called when a valid value was extended to this …","","","","","","","","","","","","","","","","","","","","","","","The types.","The validity of the <code>Array</code>: every array has an optional …","The optional validity of the array.","","","The optional validity.","","The optional validity.","","","","The optional validity. Equivalent to <code>self.keys().validity()</code>…","","","The optional validity.","","The optional validity.","","","The optional validity.","","","","","","The optional validity.","","The optional validity.","","","The optional validity.","","Returns the element at index <code>i</code>","Returns the value at index <code>i</code>","Returns the value of the <code>DictionaryArray</code> at position <code>i</code>.","Returns the element at index <code>i</code> as <code>&amp;[u8]</code>","Returns value at position <code>i</code>.","Returns the <code>Vec&lt;T&gt;</code> at position <code>i</code>.","Returns the element at index <code>i</code>","Returns the element at index <code>i</code>.","Returns the value at slot <code>i</code>. Equivalent to <code>self.values()[i]</code>…","Returns the slot <code>index</code> as a <code>Scalar</code>.","Returns the element at index <code>i</code>","Safety","Returns the element at index <code>i</code>","Returns the element at index <code>i</code> as bool","Returns the element at index <code>i</code> as <code>&amp;[u8]</code>","Returns the element at index <code>i</code> as &amp;str","Returns the <code>Vec&lt;T&gt;</code> at position <code>i</code>.","","","Returns the element at index <code>i</code> as &amp;str","Returns the element at index <code>i</code>.","Returns the element at index <code>i</code> as <code>T</code>. The value on null …","Returns the element at index <code>i</code> as &amp;str","The values of the array","returns its values.","","Returns all values in this array. Use <code>.offsets()</code> to slice …","Returns its values.","Returns the values of this <code>BooleanArray</code>.","returns a reference to the inner values.","Returns the values of the <code>DictionaryArray</code>.","Returns its values.","Returns the values allocated on this <code>FixedSizeBinaryArray</code>.","The inner values","Returns the inner array.","The values","The values.","Returns its values.","The values <code>Buffer</code>. Values on null slots are undetermined …","Returns the values of this <code>StructArray</code>.","returns its values.","Returns the values of this <code>Utf8Array</code>.","","Returns an iterator of <code>&amp;[u8]</code>","Returns an iterator over the values of this …","Returns an iterator over the values of this <code>BooleanArray</code>","Returns an iterator of <code>Box&lt;dyn Array&gt;</code>","Returns an iterator of <code>Box&lt;dyn Array&gt;</code>","Returns an iterator of <code>Box&lt;dyn Array&gt;</code>","Returns an iterator of <code>Box&lt;dyn Array&gt;</code>","Returns an iterator of <code>bool</code>","Returns an iterator of <code>Box&lt;dyn Array&gt;</code>","Returns an iterator of <code>&amp;str</code>","Returns a mutable slice of values.","Returns a mutable slice of values.","Initializes a new <code>MutableBinaryArray</code> with a pre-allocated …","Initializes a new <code>MutableUtf8Array</code> with a pre-allocated …","Creates a new <code>MutableBinaryArray</code> with capacity for <code>capacity</code>…","Creates an new <code>MutableBooleanArray</code> with a capacity of …","Creates a new <code>MutableFixedSizeBinaryArray</code> with capacity …","Creates a new <code>MutableListArray</code> with a capacity.","Creates a new <code>MutablePrimitiveArray</code> with a capacity.","Initializes a new <code>MutableUtf8Array</code> with a pre-allocated …","Creates a new <code>MutablePrimitiveArray</code> from a capacity and …","Sets the validity bitmap on this <code>Array</code>.","Clones this <code>BinaryArray</code> with a different validity.","","Sets the validity bitmap on this <code>BooleanArray</code>.","","","Sets the validity bitmap on this <code>Array</code>.","Sets the validity bitmap on this <code>FixedSizeBinaryArray</code>.","","","Sets the validity bitmap on this <code>FixedSizeListArray</code>.","Sets the validity bitmap on this <code>ListArray</code>.","","","","","Sets the validity bitmap on this <code>PrimitiveArray</code>.","Sets the validity bitmap on this <code>StructArray</code>.","","","","Sets the validity bitmap on this <code>Utf8Array</code>.","","","","Describes a struct that can be extended from slices of …","Concrete <code>Growable</code> for the <code>BinaryArray</code>.","Concrete <code>Growable</code> for the <code>BooleanArray</code>.","Concrete <code>Growable</code> for the <code>DictionaryArray</code>.","Concrete <code>Growable</code> for the <code>FixedSizeBinaryArray</code>.","Concrete <code>Growable</code> for the <code>FixedSizeListArray</code>.","Concrete <code>Growable</code> for the <code>ListArray</code>.","Concrete <code>Growable</code> for the <code>NullArray</code>.","Concrete <code>Growable</code> for the <code>PrimitiveArray</code>.","Concrete <code>Growable</code> for the <code>StructArray</code>.","Concrete <code>Growable</code> for the <code>Utf8Array</code>.","","","","","","","","","","","Converts this <code>Growable</code> to an <code>Arc&lt;dyn Array&gt;</code>, thereby …","Converts this <code>Growable</code> to an <code>Box&lt;dyn Array&gt;</code>, thereby …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extends this <code>Growable</code> with elements from the bounded <code>Array</code> …","","","","","","","","","","","Extends this <code>Growable</code> with null elements, disregarding the …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>Growable</code> from an arbitrary number of <code>Array</code>s.","Creates a new <code>GrowableBinary</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableBoolean</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableFixedSizeBinary</code> bound to <code>arrays</code> with …","Creates a new <code>GrowableNull</code>.","Creates a new <code>GrowablePrimitive</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableList</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableStruct</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableFixedSizeList</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableUtf8</code> bound to <code>arrays</code> with a …","Creates a new <code>GrowableDictionary</code> bound to <code>arrays</code> with a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compare the values at two arbitrary indices in two arrays.","returns a comparison function that compares values at two …","Total order of all native types whose Rust implementation …","implements comparison using IEEE 754 total ordering for f32","implements comparison using IEEE 754 total ordering for f64","An immutable container whose API is optimized to handle …","A container to store booleans. <code>MutableBitmap</code> is …","Returns the slice of bytes of this <code>MutableBitmap</code>. Note …","Returns the byte slice of this Bitmap.","Apply a bitwise operation <code>op</code> to two inputs and return the …","","","","","Returns the capacity of <code>MutableBitmap</code> in number of bits.","Creates a <code>Vec&lt;u8&gt;</code> from a <code>TrustedLen</code> of <code>BitChunk</code>.","Returns an iterator over bits in chunks of <code>T</code>, which is …","Empties the <code>MutableBitmap</code>.","","","","","","","Extends <code>MutableBitmap</code> by <code>additional</code> values of constant …","Extends the <code>MutableBitmap</code> from a <code>Bitmap</code>.","Extends the <code>MutableBitmap</code> from a slice of bytes with …","Extends <code>self</code> from a <code>TrustedLen</code> iterator.","Extends <code>self</code> from an iterator of trusted len.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Creates a Vec from an <code>Iterator</code> of <code>BitChunk</code>.","","","Initializes a zeroed <code>MutableBitmap</code>.","Creates a new <code>MutableBitmap</code> from an iterator of booleans.","Creates a new <code>Bitmap</code> from an iterator of booleans.","Creates a new <code>MutableBitmap</code> from an iterator of booleans.","Creates a new <code>Bitmap</code> from an iterator of booleans.","Creates a new <code>Bitmap</code> from a slice and length.","Creates a new <code>Bitmap</code> from <code>Vec</code> and a length. This function …","Initializes a <code>MutableBitmap</code> from a <code>Vec&lt;u8&gt;</code> and a length. …","Returns whether the position <code>index</code> is set.","Returns whether the bit at position <code>i</code> is set.","Returns whether the bit at position <code>i</code> is set.","Unsafely returns whether the bit at position <code>i</code> is set.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this <code>Bitmap</code> to <code>MutableBitmap</code>, returning itself if …","Returns whether <code>MutableBitmap</code> is empty.","Returns whether <code>Bitmap</code> is empty","constructs a new iterator over the values of <code>MutableBitmap</code>.","constructs a new iterator","Returns the length of the <code>MutableBitmap</code>.","Returns the length of the <code>Bitmap</code>.","Initializes an empty <code>MutableBitmap</code>.","Initializes an empty <code>Bitmap</code>.","Initializes an new <code>Bitmap</code> filled with unset values.","Returns the number of unset bits on this <code>MutableBitmap</code>.","Returns the number of unset bits on this <code>Bitmap</code>.","Counts the nulls (unset bits) starting from <code>offset</code> bits …","Pushes a new bit to the <code>MutableBitmap</code>, re-sizing it if …","Pushes a new bit to the <code>MutableBitmap</code>","Apply a bitwise operation <code>op</code> to four inputs and return the …","Reserves <code>additional</code> bits in the <code>MutableBitmap</code>, potentially …","Sets the position <code>index</code> to <code>value</code>","Sets the position <code>index</code> to <code>value</code>","Shrinks the capacity of the <code>MutableBitmap</code> to fit its …","Slices <code>self</code>, offsetting by <code>offset</code> and truncating up to …","Slices <code>self</code>, offseting by <code>offset</code> and truncating up to …","Apply a bitwise operation <code>op</code> to three inputs and return …","","","","Creates a new <code>MutableBitmap</code> from an iterator of booleans.","Creates a new <code>Bitmap</code> from a fallible iterator of booleans.","Creates a new <code>MutableBitmap</code> from an falible iterator of …","Creates a new <code>Bitmap</code> from a fallible iterator of booleans.","","","","","Apply a bitwise operation <code>op</code> to one input and return the …","General utilities for bitmaps representing items where LSB …","Initializes a pre-allocated <code>MutableBitmap</code> with capacity …","A chunk of bits. This is used to create masks of a given …","Trait representing an exact iterator over bytes in <code>BitChunk</code>…","This struct is used to efficiently iterate over bit masks …","An iterator over a slice of bytes in <code>BitChunk</code>s.","An iterator over bits according to the LSB, i.e. the bytes …","Iterator over a bitmap that returns slices of set regions …","An iterator adapter that converts an iterator over <code>T</code> and a …","","","","","","","","","","","Returns the number of bytes required to hold <code>bits</code> bits.","","","","","","","Returns the number of zero bits in the slice offsetted by …","Formats <code>bytes</code> taking into account an offset and length of …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","convert itself from bytes.","Returns whether bit at position <code>i</code> in <code>data</code> is set or not","Returns whether bit at position <code>i</code> in <code>data</code> is set or not.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns whether there are still elements in this iterator","Returns whether bit at position <code>i</code> in <code>byte</code> is set or not","Returns the number of chunks of this iterator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>ZipValidity</code>.","Creates a new <code>BitChunksExact</code>.","Creates a <code>BitChunks</code>.","Creates a new <code>BitmapIter</code>.","Creates a new <code>SlicesIterator</code>","","","","","","","","The remainder of the iterator.","Returns the remaining <code>BitChunk</code>. It is zero iff <code>len / 8 == 0</code>…","","Returns the remainder <code>BitChunk</code>.","","An iterator over individual items of the remainder","An iterator over individual items of the remainder","The number of items in the remainder","","","Returns the remainder bits in <code>BitChunks::remainder</code>.","Sets bit at position <code>i</code> in <code>byte</code>","Sets bit at position <code>i</code> in <code>data</code>","Sets bit at position <code>i</code> in <code>data</code> without doing bound checks","","","","","Returns the total number of slots. It corresponds to the …","convert itself into bytes.","","","","","","","","","","","","","","","","","","","Returns an iterator adapter that returns Option according …","<code>Buffer</code> is a contiguous memory region that can be shared …","Returns the byte slice stored in this buffer","","","","","","","","","","Returns the argument unchanged.","","Takes ownership of <code>Vec</code>.","Creates a <code>Buffer</code> from an <code>Iterator</code> with a trusted length. …","Creates a <code>Buffer</code> from an <code>Iterator</code> with a trusted (upper) …","Calls <code>U::from(self)</code>.","Converts this <code>Buffer</code> to <code>Vec</code>, returning itself if the …","Returns whether the buffer is empty.","Returns the number of bytes in the buffer","","Creates an empty <code>Buffer</code>.","Creates a new <code>Buffer</code> filled with zeros.","Returns the offset of this buffer.","Returns a new Buffer that is a slice of this buffer …","Returns a new Buffer that is a slice of this buffer …","","","Safety","Safety","","","A vector of trait objects of <code>Array</code> where every item has …","returns the <code>Array</code>s in <code>Chunk</code>","","","","","returns the <code>Array</code>s in <code>Chunk</code>","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Consumes <code>Chunk</code> into its underlying arrays. The arrays are …","returns whether the columns have any rows","returns the number of rows of every array","","Creates a new <code>Chunk</code>.","","","","Creates a new <code>Chunk</code>.","","Contains different aggregation functions","Defines basic arithmetic kernels for <code>PrimitiveArray</code>s.","Defines kernels suitable to perform operations to …","Contains bitwise operators: <code>or</code>, <code>and</code>, <code>xor</code> and <code>not</code>.","null-preserving operators such as <code>and</code>, <code>or</code> and <code>not</code>.","Boolean operators of Kleene logic.","Defines different casting operators such as <code>cast</code> or …","Contains comparison operators","Contains the concatenate kernel","Declares the <code>contains</code> operator","Contains operators to filter arrays such as <code>filter</code>.","Contains the <code>hash</code> and typed (e.g. <code>hash_primitive</code>) …","Contains the operator <code>if_then_else</code>.","Defines kernel for length of composite arrays","Contains “like” operators such as <code>like_utf8</code> and …","Contains the operator <code>limit</code>.","Functions to perform merge-sorts.","Contains the operator <code>nullif</code>.","Defines partition kernel for <code>crate::array::Array</code>","Contains regex matching operators <code>regex_match</code> and …","Contains operators to sort individual and slices of <code>Array</code>s.","Defines kernel to extract a substring of a [Large…","Defines take kernel for <code>Array</code>","Defines temporal kernels for time and date related …","Defines common maps to a <code>Utf8Array</code>","Defines windowing functions, like <code>shift</code>ing","The maximum value","The maximum value","The minimum value","The minimum value","Trait describing a type describing multiple lanes with an …","Object that can reduce itself to a number. This is used in …","Whether <code>sum</code> is valid for <code>data_type</code>","Returns the total (heap) allocated size of the array in …","Returns the maximum of <code>Array</code>. The scalar is null when all …","lane-wise maximum between two instances","Returns the maximum value in the binary array, according …","Returns the maximum value in the boolean array","reduce itself to the minimum","Returns the maximum value in the array, according to the …","Returns the maximum value in the string array, according …","Returns the minimum of <code>Array</code>. The scalar is null when all …","lane-wise minimum between two instances","Returns the minimum value in the binary array, according …","Returns the minimum value in the boolean array.","reduce itself to the maximum","Returns the minimum value in the array, according to the …","Returns the minimum value in the string array, according …","returns a new instance with all lanes equal to <code>MAX</code>","returns a new instance with all lanes equal to <code>MIN</code>","Reduces this element to a single value.","Returns the sum of all elements in <code>array</code> as a <code>Scalar</code> of …","Returns the sum of values in the array.","Defines basic addition operation for primitive arrays","Defines checked addition operation for primitive arrays","Defines checked division operation for primitive arrays","Defines checked multiplication operation for primitive …","Defines checked reminder operation for primitive arrays","Defines checked subtraction operation for primitive arrays","Defines basic division operation for primitive arrays","Defines basic multiplication operation for primitive arrays","Defines Overflowing addition operation for primitive arrays","Defines Overflowing multiplication operation for primitive …","Defines Overflowing subtraction operation for primitive …","Defines basic reminder operation for primitive arrays","Defines saturating addition operation for primitive arrays","Defines saturating multiplication operation for primitive …","Defines saturating subtraction operation for primitive …","Defines basic subtraction operation for primitive arrays","Defines wrapping addition operation for primitive arrays","Defines wrapping multiplication operation for primitive …","Defines wrapping subtraction operation for primitive arrays","Adds two <code>Array</code>s.","Adds itself to <code>rhs</code>","Adds an <code>Array</code> and a <code>Scalar</code>.","Contains arithemtic functions for <code>PrimitiveArray</code>s.","Returns whether two <code>DataType</code>s can be added by <code>add</code>.","Returns whether two <code>DataType</code>s can be divided by <code>div</code>.","Returns whether two <code>DataType</code>s can be multiplied by <code>mul</code>.","Whether <code>neg</code> is supported for a given <code>DataType</code>","Returns whether two <code>DataType</code>s “can be remainder” by <code>rem</code>…","Returns whether two <code>DataType</code>s can be subtracted by <code>sub</code>.","Checked add","checked division","checked multiplication","checked remainder","checked subtraction","Defines the arithmetic kernels for Decimal <code>PrimitiveArrays</code>…","Divide of two <code>Array</code>s.","division","Divide an <code>Array</code> with a <code>Scalar</code>.","Multiply two <code>Array</code>s.","multiplication","Multiply an <code>Array</code> with a <code>Scalar</code>.","Negates an <code>Array</code>.","Overflowing add","overflowing multiplication","overflowing subtraction","Remainder of two <code>Array</code>s.","remainder","Saturating add","saturating multiplication","saturarting subtraction","Subtracts two <code>Array</code>s.","subtraction","Adds an <code>Array</code> and a <code>Scalar</code>.","Defines the arithmetic kernels for adding a Duration to a …","Adds itself to <code>rhs</code> using wrapping addition","wrapping multiplication","wrapping subtraction","Trait describing a <code>NativeType</code> whose semantics of …","Adds two primitive arrays with the same type. Panics if …","Adds a scalar T to a primitive array of type T. Panics if …","Checked addition of two primitive arrays. If the result …","Checked addition of a scalar T to a primitive array of …","Checked division of two primitive arrays. If the result …","Checked division of a primitive array of type T by a …","Checked multiplication of two primitive arrays. If the …","Checked multiplication of a scalar T to a primitive array …","Checked negates values from array.","Checked operation of raising an array of primitives to the …","Checked remainder of two primitive arrays. If the result …","Checked remainder of a primitive array of type T by a …","Checked subtraction of two primitive arrays. If the result …","Checked subtraction of a scalar T to a primitive array of …","Divides two primitive arrays with the same type. Panics if …","Divide a primitive array of type T by a scalar T. Panics …","Multiplies two primitive arrays with the same type. Panics …","Multiply a scalar T to a primitive array of type T. Panics …","Negates values from array.","Overflowing addition of two primitive arrays. If the …","Overflowing addition of a scalar T to a primitive array of …","Overflowing multiplication of two primitive arrays. If the …","Overflowing multiplication of a scalar T to a primitive …","Overflowing subtraction of two primitive arrays. If the …","Overflowing subtraction of a scalar T to a primitive array …","Raises an array of primitives to the power of exponent. …","Remainder of two primitive arrays with the same type. …","Remainder a primitive array of type T by a scalar T. …","Saturating addition of two primitive arrays. If the result …","Saturated addition of a scalar T to a primitive array of …","Saturating multiplication of two primitive arrays. If the …","Saturated multiplication of a scalar T to a primitive …","Saturating subtraction of two primitive arrays. If the …","Saturated subtraction of a scalar T to a primitive array …","Subtracts two primitive arrays with the same type. Panics …","Subtract a scalar T to a primitive array of type T. Panics …","Wrapping addition of two <code>PrimitiveArray</code>s. It wraps around …","Wrapping addition of a scalar T to a <code>PrimitiveArray</code> of …","Wrapping multiplication of two <code>PrimitiveArray</code>s. It wraps …","Wrapping multiplication of a scalar T to a <code>PrimitiveArray</code> …","Wrapping negates values from array.","Wrapping subtraction of two <code>PrimitiveArray</code>s. It wraps …","Wrapping subtraction of a scalar T to a <code>PrimitiveArray</code> of …","Adaptive addition of two decimal primitive arrays with …","Adaptive division of two decimal primitive arrays with …","Adaptive multiplication of two decimal primitive arrays …","Adaptive subtract of two decimal primitive arrays with …","Adds two decimal <code>PrimitiveArray</code> with the same precision …","Checked addition of two decimal primitive arrays with the …","Checked division of two decimal primitive arrays with the …","Checked multiplication of two decimal primitive arrays …","Checked subtract of two decimal primitive arrays with the …","Divide two decimal primitive arrays with the same …","Multiply a decimal <code>PrimitiveArray</code> with a <code>PrimitiveScalar</code> …","Multiply two decimal primitive arrays with the same …","Multiply a decimal <code>PrimitiveArray</code> with a <code>PrimitiveScalar</code> …","Saturated addition of two decimal primitive arrays with …","Saturated division of two decimal primitive arrays with …","Saturated multiplication of two decimal primitive arrays …","Saturated subtraction of two decimal primitive arrays with …","Subtract two decimal primitive arrays with the same …","Adds a duration to a time array (Timestamp, Time and …","Adds a duration to a time array (Timestamp, Time and …","Adds an interval to a <code>DataType::Timestamp</code>.","Adds an interval to a <code>DataType::Timestamp</code>.","Subtract a duration to a time array (Timestamp, Time and …","Calculates the difference between two timestamps as …","Subtract a duration to a time array (Timestamp, Time and …","Calculates the difference between two timestamps returning …","Applies a binary operations to two primitive arrays. This …","Version of binary that creates a mutable bitmap that is …","Version of binary that returns an array and bitmap. Used …","Version of binary that checks for errors in the closure …","Version of unary that checks for errors in the closure …","Applies an unary and infallible function to a primitive …","Version of unary that creates a mutable bitmap that is …","Version of unary that returns an array and bitmap. Used …","Performs <code>AND</code> operation on two <code>PrimitiveArray</code>s.","Performs <code>AND</code> operation between a <code>PrimitiveArray</code> and scalar.","Returns a new <code>PrimitiveArray</code> with the bitwise <code>not</code>.","Performs <code>OR</code> operation on two <code>PrimitiveArray</code>s.","Performs <code>OR</code> operation between a <code>PrimitiveArray</code> and scalar.","Performs <code>XOR</code> operation between two <code>PrimitiveArray</code>s.","Performs <code>XOR</code> operation between a <code>PrimitiveArray</code> and scalar.","Check if all of the values in the array are <code>true</code>","Performs <code>AND</code> operation on two arrays. If either left or …","Performs <code>AND</code> operation on an array and a scalar value. If …","Check if any of the values in the array is <code>true</code>","Returns a non-null BooleanArray with whether each value of …","Returns a non-null BooleanArray with whether each value of …","Performs unary <code>NOT</code> operation on an arrays. If value is …","Performs <code>OR</code> operation on two arrays. If either left or …","Performs <code>OR</code> operation on an array and a scalar value. If …","Logical ‘and’ operation on two arrays with Kleene logic","Logical ‘and’ operation on an array and a scalar value …","Logical ‘or’ operation on two arrays with Kleene logic","Logical ‘or’ operation on an array and a scalar value …","options defining how Cast kernels behave","Conversion of binary","Cast <code>BinaryArray</code> to <code>DictionaryArray</code>, also known as packing.","Conversion of binary","Casts a <code>BinaryArray</code> to a <code>PrimitiveArray</code>, making any …","Casts the <code>BooleanArray</code> to a <code>BinaryArray</code>, casting trues to …","Casts the <code>BooleanArray</code> to a <code>PrimitiveArray</code>.","Casts the <code>BooleanArray</code> to a <code>Utf8Array</code>, casting trues to <code>&quot;1&quot;</code>…","","","Return true if a value of type <code>from_type</code> can be cast into a","Cast <code>array</code> to the provided data type and return a new <code>Array</code>…","","","Conversion of dates","Conversion of dates","Returns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …","Returns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …","Returns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …","","Casts a <code>DictionaryArray</code> to a new <code>DictionaryArray</code> backed by …","Casts a <code>DictionaryArray</code> to a new <code>DictionaryArray</code> by …","Casts a <code>DictionaryArray</code> to its values’ <code>DataType</code>, also …","Returns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …","","Returns the argument unchanged.","Returns a <code>PrimitiveArray&lt;i128&gt;</code> with the casted values. …","Calls <code>U::from(self)</code>.","Returns a <code>Utf8Array</code> where every element is the utf8 …","default to false whether to cast to an integer at the …","Casts a <code>BinaryArray</code> to a <code>PrimitiveArray</code> at best-effort …","Casts a <code>Utf8Array</code> to a <code>PrimitiveArray</code> at best-effort using …","Cast <code>PrimitiveArray</code> as a <code>PrimitiveArray</code> Same as …","Returns a <code>BinaryArray</code> where every element is the binary …","Returns a <code>BooleanArray</code> where every element is different …","Cast <code>PrimitiveArray</code> to <code>DictionaryArray</code>. Also known as …","Cast <code>PrimitiveArray</code> to a <code>PrimitiveArray</code> of another …","Cast <code>PrimitiveArray</code> to a <code>PrimitiveArray</code> of the same …","Returns a <code>Utf8Array</code> where every element is the utf8 …","Conversion of time","Conversion of times","Conversion of times","Conversion of time","Conversion of times","Conversion of times","Conversion of timestamp","Conversion of timestamp","Conversion of timestamp","Returns a <code>Utf8Array</code> where every element is the utf8 …","","","","","Conversion of utf8","Casts a <code>Utf8Array</code> to a Date32 primitive, making any …","Casts a <code>Utf8Array</code> to a Date64 primitive, making any …","Cast <code>Utf8Array</code> to <code>DictionaryArray</code>, also known as packing.","Conversion of utf8","<code>crate::temporal_conversions::utf8_to_timestamp_ns</code> applied …","Casts a <code>Utf8Array</code> to a <code>PrimitiveArray</code>, making any …","<code>crate::temporal_conversions::utf8_to_timestamp_ns</code> applied …","default to false whether an overflowing cast should be …","Similar to dictionary_to_dictionary_keys, but overflowing …","Similar to dictionary_to_dictionary_values, but …","The 8 lane representation of <code>Self</code>","<code>NativeType</code> that supports a representation of 8 lanes","Trait declaring an 8-lane multi-data.","Trait implemented by implementors of <code>Simd8Lanes</code> whose <code>Simd8</code>…","Trait implemented by implementors of <code>Simd8Lanes</code> whose <code>Simd8</code>…","Comparison functions for <code>BinaryArray</code>","Comparison functions for <code>BooleanArray</code>","Returns whether a <code>DataType</code> is comparable is supported by <code>eq</code>…","Returns whether a <code>DataType</code> is supported by <code>eq_scalar</code>.","Returns whether a <code>DataType</code> is comparable is supported by <code>gt</code>…","Returns whether a <code>DataType</code> is comparable is supported by …","Returns whether a <code>DataType</code> is supported by <code>gt_eq_scalar</code>.","Returns whether a <code>DataType</code> is supported by <code>gt_scalar</code>.","Returns whether a <code>DataType</code> is comparable is supported by <code>lt</code>…","Returns whether a <code>DataType</code> is comparable is supported by <code>lt</code>…","Returns whether a <code>DataType</code> is supported by <code>lt_eq_scalar</code>.","Returns whether a <code>DataType</code> is supported by <code>lt_scalar</code>.","Returns whether a <code>DataType</code> is comparable is supported by …","Returns whether a <code>DataType</code> is supported by <code>neq_scalar</code>.","<code>==</code> between two <code>Array</code>s. Use <code>can_eq</code> to check whether the …","Equal","<code>==</code> between two <code>Array</code>s and includes validities in …","<code>==</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_eq_scalar</code> to …","<code>==</code> between an <code>Array</code> and a <code>Scalar</code> and includes validities …","loads a complete chunk","loads an incomplete chunk, filling the remaining items …","<code>&gt;</code> between two <code>Array</code>s. Use <code>can_gt</code> to check whether the …","Greater than","<code>&gt;=</code> between two <code>Array</code>s. Use <code>can_gt_eq</code> to check whether the …","Greater than or equal to","<code>&gt;=</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_gt_eq_scalar</code> to …","<code>&gt;</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_gt_scalar</code> to …","<code>&lt;</code> between two <code>Array</code>s. Use <code>can_lt</code> to check whether the …","Less than","<code>&lt;=</code> between two <code>Array</code>s. Use <code>can_lt_eq</code> to check whether the …","Less than or equal to","<code>&lt;=</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_lt_eq_scalar</code> to …","<code>&lt;</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_lt_scalar</code> to …","<code>!=</code> between two <code>Array</code>s. Use <code>can_neq</code> to check whether the …","Not equal","<code>!=</code> between two <code>Array</code>s and includes validities in …","<code>!=</code> between an <code>Array</code> and a <code>Scalar</code>. Use <code>can_neq_scalar</code> to …","<code>!=</code> between an <code>Array</code> and a <code>Scalar</code> and includes validities …","Comparison functions for <code>PrimitiveArray</code>","Comparison functions for <code>Utf8Array</code>","Perform <code>lhs == rhs</code> operation on <code>BinaryArray</code>.","Perform <code>lhs == rhs</code> operation on <code>BinaryArray</code> and include …","Perform <code>lhs == rhs</code> operation on <code>BinaryArray</code> and a scalar.","Perform <code>lhs == rhs</code> operation on <code>BinaryArray</code> and a scalar …","Perform <code>lhs &gt; rhs</code> operation on <code>BinaryArray</code>.","Perform <code>lhs &gt;= rhs</code> operation on <code>BinaryArray</code>.","Perform <code>lhs &gt;= rhs</code> operation on <code>BinaryArray</code> and a scalar.","Perform <code>lhs &gt; rhs</code> operation on <code>BinaryArray</code> and a scalar.","Perform <code>lhs &lt; rhs</code> operation on <code>BinaryArray</code>.","Perform <code>lhs &lt;= rhs</code> operation on <code>BinaryArray</code>.","Perform <code>lhs &lt;= rhs</code> operation on <code>BinaryArray</code> and a scalar.","Perform <code>lhs &lt; rhs</code> operation on <code>BinaryArray</code> and a scalar.","Perform <code>lhs != rhs</code> operation on <code>BinaryArray</code>.","Perform <code>lhs != rhs</code> operation on <code>BinaryArray</code>.","Perform <code>lhs != rhs</code> operation on <code>BinaryArray</code> and a scalar.","Perform <code>lhs != rhs</code> operation on <code>BinaryArray</code> and a scalar …","Evaluate <code>op(left, right)</code> for <code>BooleanArray</code> and scalar using …","Perform <code>lhs == rhs</code> operation on two <code>BooleanArray</code>s.","Perform <code>lhs == rhs</code> operation on two <code>BooleanArray</code>s and …","Perform <code>lhs == rhs</code> operation on a <code>BooleanArray</code> and a …","Perform <code>lhs == rhs</code> operation on a <code>BooleanArray</code> and a …","Perform <code>left &gt; right</code> operation on two arrays. Non-null …","Perform <code>left &gt;= right</code> operation on two arrays. Non-null …","Perform <code>left &gt;= right</code> operation on an array and a scalar …","Perform <code>left &gt; right</code> operation on an array and a scalar …","Perform <code>left &lt; right</code> operation on two arrays.","Perform <code>left &lt;= right</code> operation on two arrays.","Perform <code>left &lt;= right</code> operation on an array and a scalar …","Perform <code>left &lt; right</code> operation on an array and a scalar …","<code>lhs != rhs</code> for <code>BooleanArray</code>","<code>lhs != rhs</code> for <code>BooleanArray</code> and include validities in …","Perform <code>left != right</code> operation on an array and a scalar …","Perform <code>left != right</code> operation on an array and a scalar …","Evaluate <code>op(left, right)</code> for <code>PrimitiveArray</code> and scalar …","Perform <code>lhs == rhs</code> operation on two arrays.","Perform <code>lhs == rhs</code> operation on two arrays and include …","Perform <code>left == right</code> operation on an array and a scalar …","Perform <code>left == right</code> operation on an array and a scalar …","Perform <code>left &gt; right</code> operation on two arrays. Non-null …","Perform <code>left &gt;= right</code> operation on two arrays. Non-null …","Perform <code>left &gt;= right</code> operation on an array and a scalar …","Perform <code>left &gt; right</code> operation on an array and a scalar …","Perform <code>left &lt; right</code> operation on two arrays.","Perform <code>left &lt;= right</code> operation on two arrays.","Perform <code>left &lt;= right</code> operation on an array and a scalar …","Perform <code>left &lt; right</code> operation on an array and a scalar …","Perform <code>left != right</code> operation on two arrays.","Perform <code>left != right</code> operation on two arrays and include …","Perform <code>left != right</code> operation on an array and a scalar …","Perform <code>left != right</code> operation on an array and a scalar …","Perform <code>lhs == rhs</code> operation on <code>Utf8Array</code>.","Perform <code>lhs == rhs</code> operation on <code>Utf8Array</code> and include …","Perform <code>lhs == rhs</code> operation on <code>Utf8Array</code> and a scalar.","Perform <code>lhs == rhs</code> operation on <code>Utf8Array</code> and a scalar. …","Perform <code>lhs &gt; rhs</code> operation on <code>Utf8Array</code>.","Perform <code>lhs &gt;= rhs</code> operation on <code>Utf8Array</code>.","Perform <code>lhs &gt;= rhs</code> operation on <code>Utf8Array</code> and a scalar.","Perform <code>lhs &gt; rhs</code> operation on <code>Utf8Array</code> and a scalar.","Perform <code>lhs &lt; rhs</code> operation on <code>Utf8Array</code>.","Perform <code>lhs &lt;= rhs</code> operation on <code>Utf8Array</code>.","Perform <code>lhs &lt;= rhs</code> operation on <code>Utf8Array</code> and a scalar.","Perform <code>lhs &lt; rhs</code> operation on <code>Utf8Array</code> and a scalar.","Perform <code>lhs != rhs</code> operation on <code>Utf8Array</code>.","Perform <code>lhs != rhs</code> operation on <code>Utf8Array</code> and include …","Perform <code>lhs != rhs</code> operation on <code>Utf8Array</code> and a scalar.","Perform <code>lhs != rhs</code> operation on <code>Utf8Array</code> and a scalar. …","Concatenate multiple Array of the same type into a single …","Returns whether each element in <code>values</code> is in each element …","Function that can filter arbitrary arrays","Returns a prepared function optimized to filter multiple …","Filters an Array, returning elements matching the filter …","Returns a new Chunk with arrays containing only values …","Checks if an array of type <code>datatype</code> can be used in <code>hash</code>.","Returns the element-wise hash of an <code>Array</code>. Validity is …","Element-wise hash of a <code>BinaryArray</code>. Validity is preserved.","","","","Returns the values from <code>lhs</code> if the predicate is <code>true</code> or …","Checks if an array of type <code>datatype</code> can perform length …","Returns an array of integers with the number of bytes on …","Returns <code>lhs LIKE rhs</code> operation on two <code>BinaryArray</code>.","Returns <code>lhs LIKE rhs</code> operation.","Returns <code>lhs LIKE rhs</code> operation on two <code>Utf8Array</code>.","Returns <code>lhs LIKE rhs</code> operation.","Returns <code>lhs NOT LIKE rhs</code> operation on two <code>BinaryArray</code>s.","Returns <code>lhs NOT LIKE rhs</code> operation on two <code>BinaryArray</code>s.","Returns <code>lhs NOT LIKE rhs</code> operation on two <code>Utf8Array</code>.","Returns <code>lhs NOT LIKE rhs</code> operation.","Returns the <code>Array</code> limited by <code>num_elements</code>.","A slice denoting <code>(array_index, start, len)</code> representing a …","An iterator adapter that merge-sorts two iterators of …","","","returns a comparison function between any two arrays of …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Combines two sorted Arrays of the same …","Given two iterators of slices representing two sets of …","","","Returns a vector of slices from different sorted arrays …","Takes N arrays together through <code>slices</code> under the …","Collect the MergeSortSlices to be a vec for reusing","","","","Returns whether <code>nullif</code> and <code>nullif_scalar</code> is implemented …","Returns an <code>Array</code> with the same type as <code>lhs</code> and whose …","Returns an <code>Array</code> with the same type as <code>lhs</code> and whose …","Returns an array whose validity is null iff <code>lhs == rhs</code> or …","Returns a <code>PrimitiveArray</code> whose validity is null iff …","Given a list of already sorted columns, find partition …","Regex matches","Regex matches","One column to be used in lexicographical sort","Options that define how sort kernels should behave","","","","","Checks if an array of type <code>datatype</code> can be sorted","","","","","","Whether to sort in descending order","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Sort a list of <code>Array</code> using <code>SortOptions</code> provided for each …","Sorts a list of <code>SortColumn</code> into a non-nullable …","Whether to sort nulls first","The options to apply to the sort","Sort the <code>Array</code> using <code>SortOptions</code>.","Sort elements from <code>values</code> into a non-nullable …","","","","","","","","","The array to sort","Checks if an array of type <code>datatype</code> can perform substring …","Returns an ArrayRef with a substring starting from <code>start</code> …","Checks if an array of type <code>datatype</code> can perform take …","Returns a new <code>Array</code> with only indices at <code>indices</code>. Null …","Checks if an array of type <code>datatype</code> can perform day …","Checks if an array of type <code>datatype</code> can perform hour …","Checks if an array of type <code>data_type</code> can perform ISO week …","Checks if an array of type <code>datatype</code> can perform minute …","Checks if an array of type <code>datatype</code> can perform month …","Checks if an array of type <code>datatype</code> can perform nanosecond …","Checks if an array of type <code>datatype</code> can perform second …","Checks if an array of type <code>data_type</code> can perform weekday …","Checks if an array of type <code>datatype</code> can perform year …","Extracts the days of a temporal array as …","Extracts the hours of a temporal array as …","Extracts ISO week of a temporal array as …","Extracts the minutes of a temporal array as …","Extracts the months of a temporal array as …","Extracts the nanoseconds of a temporal array as …","Extracts the seconds of a temporal array as …","Extracts weekday of a temporal array as <code>PrimitiveArray&lt;u32&gt;</code>…","Extracts the years of a temporal array as …","Checks if an array of type <code>datatype</code> can perform lower …","Checks if an array of type <code>datatype</code> can perform upper …","Returns a new <code>Array</code> where each of each of the elements is …","Returns a new <code>Array</code> where each of each of the elements is …","utf8_apply will apply <code>Fn(&amp;str) -&gt; String</code> to every value in …","Shifts array by defined number of items (to left or right) …","Opaque binary data of variable length.","Opaque binary data of variable length whose offsets are …","A boolean represented as a single bit.","<code>true</code> and <code>false</code>.","The set of supported logical types in this crate.","An <code>i32</code> representing the elapsed time since UNIX epoch …","An <code>i64</code> representing the elapsed time since UNIX epoch …","The number of elapsed days and milliseconds, stored as 2 …","Decimal value with precision and scale precision is the …","Dense union","A dictionary encoded array by <code>IntegerType</code>.","A dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …","Measure of elapsed time. This elapsed time is a physical …","Extension type.","Represents Arrow’s metadata of a “column”.","Opaque binary data of fixed size.","Opaque binary data of fixed size. Enum parameter specifies …","A list of some data type with fixed length.","A list of some logical data type with a fixed number of …","An 16-bit float","A <code>f32</code>","A <code>f64</code>","A signed 16-bit integer.","An <code>i16</code>","A signed 32-bit integer.","An <code>i32</code>","A signed 64-bit integer.","An <code>i64</code>","A signed 8-bit integer.","An <code>i8</code>","the set of valid indices types of a dictionary-encoded …","A “calendar” interval modeling elapsed time that takes …","Interval units defined in Arrow","Opaque binary data of variable length and 64-bit offsets.","Opaque binary data of variable length whose offsets are …","A list of some data type with variable length and 64-bit …","A list of some logical data type whose offsets are …","A variable-length string in Unicode with UFT-8 encoding …","A variable-length UTF-8 encoded string whose offsets are …","A list of some data type with variable length.","A list of some logical data type whose offsets are …","A nested type.","A nested type that is represented as","typedef for BTreeMap&lt;String, String&gt; denoting <code>Field</code>’s …","Time in microseconds.","Time in milliseconds.","The number of elapsed months (i32), days (i32) and …","Time in nanoseconds.","A Null with no allocation.","Null type","The set of physical types: unique in-memory …","An array where each slot has a known compile-time size.","An ordered sequence of <code>Field</code>s with associated <code>Metadata</code>.","typedef for <code>Arc&lt;Schema&gt;</code>.","Time in seconds.","Sparse union","A nested type that contains an arbitrary number of fields.","A nested <code>DataType</code> with a given number of <code>Field</code>s.","A 32-bit time representing the elapsed time since midnight …","A 64-bit time representing the elapsed time since midnight …","The time units defined in Arrow.","A <code>i64</code> representing a timestamp measured in <code>TimeUnit</code> with …","An unsigned 16-bit integer.","An <code>u16</code>","An unsigned 32-bit integer.","An <code>u32</code>","An unsigned 64-bit integer.","An <code>u64</code>","An unsigned 8-bit integer.","An <code>u8</code>","A nested type that represents slots of differing types.","A nested datatype that can represent slots of differing …","Mode of <code>DataType::Union</code>","A variable-length string in Unicode with UTF-8 encoding.","A variable-length UTF-8 encoded string whose offsets are …","The number of elapsed whole months.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>Field</code>’s <code>DataType</code>.","Its logical <code>DataType</code>","","","","","","","","","","Whether this physical type equals <code>PhysicalType::Primitive</code> …","","","","","","","","","The fields composing this schema.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","support get extension for metadata","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether the mode is dense","Its nullability","Returns whether the mode is sparse","Additional custom (opaque) metadata.","Optional metadata.","Its name","","","","","Creates a new <code>Field</code>.","Constructs a <code>UnionMode::Sparse</code> if the input bool is true, …","Returns <code>&amp;self</code> for all but <code>DataType::Extension</code>. For …","","","","","","","","","the <code>PhysicalType</code> of this <code>DataType</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>Field</code> with metadata.","Attaches a <code>Metadata</code> to <code>Schema</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enum with all errors in this crate.","Wrapper for an error triggered by a dependency","Error during import or export to/from a format","When an invalid argument is passed to a function.","Wrapper for IO errors","Returned when functionality is not yet available.","Whenever incoming data from the C data interface, IPC or …","Whenever pushing to a container fails because it does not …","Typedef for a <code>std::result::Result</code> of an <code>ArrowError</code>.","","","","","","","Returns the argument unchanged.","","","","","","","","Wraps an external error in an <code>ArrowError</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","ABI-compatible struct for <code>ArrowArray</code>","ABI-compatible struct for <code>ArrowArrayStream</code>.","Implements an iterator of <code>Array</code> consumed from the C stream …","ABI-compatible struct for <code>ArrowSchema</code>","","","","","","","","","","","","","","","","","","create an empty ArrowSchema","creates an empty <code>ArrowArray</code>, which can be used to import …","Creates an empty <code>ArrowArrayStream</code> used to import from a …","Exports an <code>Arc&lt;dyn Array&gt;</code> to the C data interface.","Exports a <code>Field</code> to the C data interface.","Exports an iterator to the C stream interface","Returns the field provided by the stream","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Imports an <code>Array</code> from the C data interface.","Imports a <code>Field</code> from the C data interface.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Advances this iterator by one array","","","","","","","","","","","","Returns a new <code>ArrowArrayStreamReader</code>","","","","","Read and write from and to Apache Avro","Convert data between the Arrow and CSV (comma-separated …","Serialization and deserialization to Arrow’s flight …","APIs to read from and write to Arrow’s IPC format.","Convert data between the Arrow memory format and JSON …","Utils for JSON integration testing","APIs to read from and write to NDJSON","APIs to read from and write to Parquet format.","APIs to represent <code>Chunk</code> as a formatted table.","An uncompressed Avro block.","A compressed Avro block.","Valid compressions","Deflate","Snappy","","","","","","","","","","","","","The compressed data","The uncompressed data","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a new CompressedBlock","Creates a new Block","The number of rows","The number of rows","APIs to read from Avro format to arrow.","Async read Avro","","","","","","","","","","","","","APIs to write to Avro format.","Async write Avro","<code>FallibleStreamingIterator</code> of compressed avro blocks","<code>FallibleStreamingIterator</code> of decompressed Avro blocks","Single threaded, blocking reader of Avro; <code>Iterator</code> of <code>Chunk</code>…","","","","","","","","","The buffer of <code>BlockStreamIterator</code>.","Decompresses an Avro block. Returns whether the buffers …","Deserializes a <code>Block</code> into <code>Chunk</code>, projected","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Deconstructs itself","Deconstructs itself into its internal reader","Deconstructs itself into its internal reader","","Creates a new <code>BlockStreamIterator</code>.","Creates a new <code>Decompressor</code>.","Creates a new <code>Reader</code>.","","Reads the avro metadata from <code>reader</code> into a <code>Schema</code>, …","","","","","","","","","","Returns a fallible <code>Stream</code> of Avro blocks bound to <code>reader</code>","Reads the avro metadata from <code>reader</code> into a <code>AvroSchema</code>, …","A type alias for a boxed <code>StreamingIterator</code>, used to write …","Whether <code>new_serializer</code> supports <code>data_type</code>.","Compresses a <code>Block</code> to a <code>CompressedBlock</code>.","Creates a <code>StreamingIterator</code> trait object that presents …","consumes a set of <code>BoxSerializer</code> into an <code>Block</code>.","Converts a <code>Schema</code> to a vector of <code>AvroField</code> with it.","Writes a <code>CompressedBlock</code> to <code>writer</code>","Writes Avro’s metadata to <code>writer</code>.","Writes a <code>CompressedBlock</code> to <code>writer</code>","Writes Avro’s metadata to <code>writer</code>.","APIs to read from CSV","Asynchronous reading of CSV","APIs to write to CSV","A single CSV record stored as raw bytes.","A already configured CSV reader.","Builds a CSV reader with various configuration knobs.","A convenience method for specifying a configuration to …","","","","","Set the capacity (in bytes) of the buffer used in the CSV …","Returns a reference to the first row read by this parser …","Returns a borrowed iterator over all records as raw bytes.","The comment character to use when parsing CSV.","","The field delimiter to use when parsing CSV.","Returns a borrowed iterator over deserialized records.","Deserializes rows <code>ByteRecord</code> into a <code>Chunk</code>. Note that this …","Deserializes <code>column</code> of <code>rows</code> into an <code>Array</code> of <code>DataType</code> …","Enable double quote escapes.","The escape character to use when parsing CSV.","Whether the number of fields in records is allowed to …","","","Returns the argument unchanged.","Returns the argument unchanged.","Build a CSV parser from this configuration that reads data …","Create a new CSV parser with a default configuration for …","Build a CSV parser from this configuration that reads data …","Create a new CSV parser with a default configuration for …","Returns a mutable reference to the underlying reader.","Returns a reference to the underlying reader.","Whether to treat the first row as a special header row.","Returns true if and only if this reader has been …","Returns a reference to the first row read by this parser.","Infers <code>DataType</code> from <code>bytes</code>","Infers the <code>Field</code>s of a CSV file by reading through the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns an owned iterator over all records as raw bytes.","Returns an owned iterator over deserialized records.","Unwraps this CSV reader, returning the underlying reader.","Returns an owned iterator over all records as strings.","Returns true if and only if this reader has been exhausted.","Create a new builder for configuring CSV parsing.","Return the current position of this CSV reader.","The quote character to use when parsing CSV.","Enable or disable quoting.","Read a single row into the given byte record. Returns …","Read a single row into the given record. Returns false …","Reads <code>len</code> rows from <code>reader</code> into <code>row</code>, skiping the first <code>skip</code>…","Returns a borrowed iterator over all records as strings.","Seeks the underlying reader to the position given.","This is like <code>seek</code>, but provides direct control over how …","Set the headers of this CSV parser manually as raw bytes.","Set the headers of this CSV parser manually.","The record terminator to use when parsing CSV.","Whether fields are trimmed of leading and trailing …","","","","","","","A already configured CSV reader.","Builds a CSV reader with various configuration knobs.","A single CSV record stored as raw bytes.","An error that can occur when processing CSV data.","Return the entire row as a single byte slice. The slice …","A convenience method for specifying a configuration to …","","","","","","","","","Set the capacity (in bytes) of the buffer used in the CSV …","Returns a reference to the first row read by this parser …","Returns a borrowed iterator over all records as raw bytes.","Clear this record so that it has zero fields.","Clone this record, but only copy <code>fields</code> up to the end of …","","The comment character to use when parsing CSV.","Build a CSV <code>serde</code> deserializer from this configuration …","Build a CSV reader from this configuration that reads data …","","","","The field delimiter to use when parsing CSV.","Deserialize this record.","Deserializes rows <code>ByteRecord</code> into <code>Chunk</code>. Note that this is …","Deserializes <code>column</code> of <code>rows</code> into an <code>Array</code> of <code>DataType</code> …","Enable double quote escapes.","If set, CSV records’ stream will end when first i/o …","","","","","The escape character to use when parsing CSV.","","Whether the number of fields in records is allowed to …","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Create a new CSV parser with a default configuration for …","Return the field at index <code>i</code>.","Returns a mutable reference to the underlying reader.","Returns a reference to the underlying reader.","Returns true if and only if this reader has been …","Whether to treat the first row as a special header row.","Returns a reference to the first row read by this parser.","","Infers <code>DataType</code> from <code>bytes</code>","Infers the <code>Field</code>s of a CSV file by reading through the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns an owned iterator over all records as raw bytes.","Unwraps this CSV reader, returning the underlying reader.","Unwrap this error into its underlying type.","Returns an owned iterator over all records as strings.","Returns true if and only if this reader has been exhausted.","Returns true if and only if this record is empty.","Returns true if this is an I/O error.","Returns an iterator over all fields in this record.","Return the specific type of this error.","Returns the number of fields in this record.","Create a new empty <code>ByteRecord</code>.","Create a new builder for configuring CSV parsing.","Return the position of this record, if available.","Return the position for this error, if one exists.","Return the current position of this CSV reader.","Add a new field to this record.","The quote character to use when parsing CSV.","Enable or disable quoting.","Return the start and end position of a field in this …","Read a single row into the given byte record. Returns …","Read a single row into the given record. Returns false …","Asynchronosly read <code>len</code> rows from <code>reader</code> into <code>row</code>, skiping …","Returns a borrowed iterator over all records as strings.","Rewinds the underlying reader to first data record.","Seeks the underlying reader to the position given.","This is like <code>seek</code>, but provides direct control over how …","Set the headers of this CSV parser manually as raw bytes.","Set the headers of this CSV parser manually.","Set the position of this record.","","The record terminator to use when parsing CSV.","","","Trim the fields of this record so that leading and …","Whether fields are trimmed of leading and trailing …","Truncate this record to <code>n</code> fields.","","","","","","","","","","","","","Create a new empty <code>ByteRecord</code> with the given capacity …","A single CSV record stored as raw bytes.","Options to serialize logical types to CSV The default is …","Builds a CSV writer with various configuration knobs.","Return the entire row as a single byte slice. The slice …","","","","","","","Set the capacity (in bytes) of the internal buffer used in …","Clear this record so that it has zero fields.","","","","","used for <code>DataType::Date32</code>","used for <code>DataType::Date64</code>","","","","The field delimiter to use when writing CSV.","used as separator/delimiter","Deserialize this record.","Enable double quote escapes.","","","","","","","The escape character to use when writing CSV.","","Whether the number of fields in records is allowed to …","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Build a CSV writer from this configuration that writes …","Build a CSV writer from this configuration that writes …","Return the field at index <code>i</code>.","","Whether to write a header row before writing any other row.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if and only if this record is empty.","Returns an iterator over all fields in this record.","Returns the number of fields in this record.","","Create a new empty <code>ByteRecord</code>.","Create a new builder for configuring CSV writing.","Returns a <code>StreamingIterator</code> that yields <code>&amp;[u8]</code> serialized …","Return the position of this record, if available.","Add a new field to this record.","The quote character to use when writing CSV.","quoting character","The quoting style to use when writing CSV.","Return the start and end position of a field in this …","Serializes <code>Chunk</code> to a vector of rows. The vector is …","Set the position of this record.","The record terminator to use when writing CSV.","used for <code>DataType::Time32</code>","used for <code>DataType::Time64</code>","used for <code>DataType::Timestamp</code>","","","Trim the fields of this record so that leading and …","Truncate this record to <code>n</code> fields.","","","","","","","","","","Create a new empty <code>ByteRecord</code> with the given capacity …","Writes <code>Chunk</code> to <code>writer</code> according to the serialization …","Writes a CSV header to <code>writer</code>","Deserializes <code>FlightData</code> to <code>Chunk</code>.","Deserialize an IPC message into <code>Schema</code>, <code>IpcSchema</code>. Use to …","Serializes <code>Chunk</code> to a vector of <code>FlightData</code> representing …","Serializes a <code>Schema</code> to <code>FlightData</code>.","Convert a <code>Schema</code> to bytes in the format expected in …","Serializes a <code>Schema</code> to <code>SchemaResult</code>.","Struct containing <code>dictionary_id</code> and nested <code>IpcField</code>, …","Struct containing fields and whether the file is written …","","","","","","","","","","dictionary id","","","optional children","The fields in the schema","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Endianness of the file","","","APIs to read Arrow’s IPC format.","","","","","","","","","APIs to write to Arrow’s IPC format.","how dictionaries are tracked in this crate","Metadata of an Arrow IPC file, written in the footer of …","Arrow File reader","Next item in the stream","Metadata of an Arrow IPC stream, written at the start of …","Arrow Stream reader.","Encodes the stream’s status after each read.","A live stream without data","","","","","","","","","","","","","","","Deserialize an flatbuffers-encoded Schema message into …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this FileReader, returning the underlying reader","","","The files’ <code>IpcSchema</code>","The IPC fields tracking dictionaries","Check if the stream is finished","Returns the <code>FileMetadata</code>","Return the schema of the stream","Creates a new <code>FileReader</code>. Use <code>projection</code> to only take …","Try to create a new stream reader","","","Read the dictionary from the buffer and provided metadata, …","Read the IPC file’s metadata","Creates a record batch from binary data using the …","Reads the metadata of the stream","Return the schema of the file","The schema that is read from the file footer","The schema that is read from the stream’s first message","APIs to read Arrow streams asynchronously","","","","","","","","","","","","","","","","","","Return the data inside this wrapper.","The IPC version of the stream","","A <code>Stream</code> over an Arrow IPC stream that asynchronously …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Return the schema of the stream","Creates a new <code>AsyncStreamReader</code>","","Reads the <code>StreamMetadata</code> of the Arrow stream asynchronously","","","","","Compression codec","Arrow file writer","LZ4 (framed)","Arrow stream writer","Options declaring the behaviour of writing to IPC","ZSTD","","","","","","","","","Whether the buffers should be compressed and which codec …","Assigns every dictionary field a unique ID","","","Write continuation bytes, and mark the stream as done","Write footer and closing tag, then mark the writer as done","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes itself, returning the inner writer.","Consumes itself into the inner writer","Creates a new <code>StreamWriter</code>","Converts a Schema and IpcFields to a flatbuffers-encoded …","Starts the stream by writing a Schema message to it. Use …","<code>async</code> writing of arrow streams","","","","","","","","Try create a new writer, with the schema written as part …","","","","Writes an <code>Array</code> to <code>arrow_data</code>","Writes <code>Chunk</code> to the stream","Writes <code>Chunk</code> to the file","Writes a dictionary array","An <code>async</code> writer to the Apache Arrow stream format.","Options declaring the behaviour of writing to IPC","","","","","","","Whether the buffers should be compressed and which codec …","","","","Finishes the stream","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes itself, returning the inner writer.","","Creates a new <code>StreamWriter</code>","Starts the stream","","","","","","","","Writes <code>Chunk</code> to the stream","APIs to read and deserialize from JSON","APIs to write to JSON","Deserializes a <code>json</code> <code>Value</code> into an <code>Array</code> of <code>DataType</code> This …","Infers <code>DataType</code> from <code>Value</code>.","An iterator which wraps a normal <code>Iterator</code>.","A fallible, streaming iterator which can be advanced from …","An iterator over no items.","The error type of iteration.","A fallible, streaming iterator.","An iterator which filters elements with a predicate.","An iterator which is well-behaved at the beginning and end …","The type being iterated over.","An iterator which applies a transform to elements.","An iterator which applies a transform to errors.","An iterator which applies a transform to elements.","<code>FallibleStreamingIterator</code> that serializes an <code>Array</code> to …","An iterator which skips a number of initial elements.","An iterator which skips initial elements matching a …","An iterator which only returns a number of initial …","An iterator which only returns initial elements matching a …","Advances the iterator to the next position.","","","","","","","","","","","","","Advances the state of the iterator to the next item from …","","","","","","Determines if all elements of the iterator satisfy a …","Determines if any elements of the iterator satisfy a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows an iterator, rather than consuming it.","","","Converts a normal <code>Iterator</code> over <code>Results</code> of references into …","Returns the number of remaining elements in the iterator.","Returns an iterator over no items.","Returns an iterator which filters elements by a predicate.","Returns the first element of the iterator which satisfies …","","Calls a closure on each element of an iterator.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns an iterator which is well-behaved at the beginning …","Returns the current element.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns an iterator which applies a transform to elements.","Returns an iterator that applies a transform to errors.","Returns an iterator which applies a transform to elements.","Creates a new <code>Serializer</code>.","Advances the iterator, returning the next element.","","","Advances the back of the iterator, returning the last …","","Returns the <code>nth</code> element of the iterator.","Returns the position of the first element matching a …","Returns bounds on the number of remaining elements in the …","","","","","","","","","","","","Returns an iterator which skips the first <code>n</code> elements.","Returns an iterator which skips the first sequence of …","Returns an iterator which only returns the first <code>n</code> …","Returns an iterator which only returns the first sequence …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes valid JSON from an iterator of (assumed …","A struct that represents an Arrow file with a schema and …","A struct that partially reads the Arrow JSON record batch","A struct that partially reads the Arrow JSON column/array","A struct that partially reads the Arrow JSON dictionary …","Fields are left as JSON <code>Value</code> as they vary by <code>DataType</code>","Dictionary metadata","A struct that partially reads the Arrow JSON schema.","the type of the integer in the dictionary","The batches","the bit width","","","","","","","","","","","","","","","","","the children","the children","","","the columns","the number of elements","the dictionary batch","the data","","","","","","","","","The dictionaries","the dictionary","The type","The fields","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","the dictionary id","the id","the index type","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","whether it is ordered","whether it is signed","The metadata","the fields’ metadata","The name","its name","whether it is nullable","the offsets","API to read from Arrow JSON integration format","The schema","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","the type id for union types","the validity bitmap","API to write to Arrow JSON integration format","Deserializes a <code>ArrowJsonBatch</code> to a <code>Chunk</code>","Deserializes a <code>Value</code>","Construct an <code>Array</code> from the JSON integration format","Serializes a <code>Chunk</code> to <code>ArrowJsonBatch</code>.","Serializes a <code>Schema</code> and associated <code>IpcField</code> to …","APIs to read and deserialize NDJSON.","APIs to serialize and write to NDJSON.","The error type of iteration.","A fallible, streaming iterator.","A <code>FallibleStreamingIterator</code> of NDJSON rows.","The type being iterated over.","Advances the iterator to the next position.","","Determines if all elements of the iterator satisfy a …","Determines if any elements of the iterator satisfy a …","","","Borrows an iterator, rather than consuming it.","Returns the number of remaining elements in the iterator.","Deserializes rows into an <code>Array</code> of <code>DataType</code>.","Returns an iterator which filters elements by a predicate.","Returns the first element of the iterator which satisfies …","Calls a closure on each element of an iterator.","Returns the argument unchanged.","Returns an iterator which is well-behaved at the beginning …","Returns the current element.","","Infers the <code>DataType</code> from an NDJSON file, optionally only …","Calls <code>U::from(self)</code>.","Deconstruct <code>FileReader</code> into the reader and the internal …","Returns an iterator which applies a transform to elements.","Returns an iterator that applies a transform to errors.","Returns an iterator which applies a transform to elements.","Creates a new <code>FileReader</code> from a reader and <code>rows</code>.","Advances the iterator, returning the next element.","Returns the <code>nth</code> element of the iterator.","Returns the position of the first element matching a …","Returns bounds on the number of remaining elements in the …","Returns an iterator which skips the first <code>n</code> elements.","Returns an iterator which skips the first sequence of …","Returns an iterator which only returns the first <code>n</code> …","Returns an iterator which only returns the first sequence …","","","","The error type of iteration.","A fallible, streaming iterator.","An iterator adapter that receives an implementer of <code>Write</code> …","The type being iterated over.","<code>FallibleStreamingIterator</code> that serializes an <code>Array</code> to …","Advances the iterator to the next position.","","Determines if all elements of the iterator satisfy a …","Determines if any elements of the iterator satisfy a …","","","","","Borrows an iterator, rather than consuming it.","","","Returns the number of remaining elements in the iterator.","Returns an iterator which filters elements by a predicate.","Returns the first element of the iterator which satisfies …","","Calls a closure on each element of an iterator.","Returns the argument unchanged.","Returns the argument unchanged.","Returns an iterator which is well-behaved at the beginning …","Returns the current element.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inner content of this iterator","","Returns an iterator which applies a transform to elements.","Returns an iterator that applies a transform to errors.","Returns an iterator which applies a transform to elements.","Creates a new <code>FileWriter</code>.","Creates a new <code>Serializer</code>.","Advances the iterator, returning the next element.","","Returns the <code>nth</code> element of the iterator.","Returns the position of the first element matching a …","Returns bounds on the number of remaining elements in the …","Returns an iterator which skips the first <code>n</code> elements.","Returns an iterator which skips the first sequence of …","Returns an iterator which only returns the first <code>n</code> …","Returns an iterator which only returns the first sequence …","","","","","","","","APIs to read from Parquet format.","APIs to write to Parquet format.","Type def for a sharable, boxed dyn <code>Iterator</code> of arrays","","A <code>FallibleStreamingIterator</code> that decompresses …","","An embedded BSON document","","Trait describing a <code>MutStreamingIterator</code> of column chunks.","Metadata for a column chunk.","A descriptor for leaf-level primitive columns. This …","A <code>CompressedDataPage</code> is compressed, encoded representation …","","","A <code>DataPage</code> is an uncompressed, encoded representation of a …","","Trait describing a <code>FallibleStreamingIterator</code> of <code>DataPage</code>","A Date","A decimal value.","Decompressor that allows re-using the page buffer of …","","","an enum is converted into a binary field","The error type of iteration.","","","A fallible, streaming iterator.","Error presented when trying to use a code branch that …","Metadata for a Parquet file.","An iterator of <code>Chunk</code>s coming from row groups of a parquet …","Iterator finished","","","General Parquet error.","","","","","","","","A signed integer value.","","An interval of time","The type being iterated over.","","","An embedded JSON document","","","","","","","","When the parquet file is known to be out of spec.","Type declaration for a page filter","A page iterator iterates over row group’s pages. In …","Errors generated by this crate","","Representation of a Parquet type. Used to describe …","","","","A <code>MutStreamingIterator</code> of pre-read column chunks","An <code>Iterator</code> of <code>Chunk</code> that (dynamically) adapts a vector of …","Metadata for a row group.","An [<code>Iterator&lt;Item=RowGroupDeserializer&gt;</code>] from row groups …","","Iterator still has elements","State of <code>MutStreamingIterator</code>.","","","A time.","A time","A date/time combination","A date/time combination","Timestamp logical type annotation","","","","","","An unsigned integer value.","","","","Returns a new <code>PageIterator</code> by seeking <code>reader</code> to the …","Returns a stream of compressed data pages","Reads a file’s metadata.","","Advances the iterator to the next position.","","","","","Determines if all elements of the iterator satisfy a …","Determines if any elements of the iterator satisfy a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a mutable reference to the internal buffer. Useful …","","Borrows an iterator, rather than consuming it.","Returns the offset and length in bytes of the column chunk …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns column chunk metadata for <code>i</code>th column.","Returns the encoding for this column","An iterator adapter that maps multiple iterators of …","Returns column order for <code>i</code>th column in this file. If …","Column (sort) order used for <code>min</code> and <code>max</code> values of each …","Returns slice of column chunk metadata.","Returns the total compressed data size of this column …","Total size of all compressed column data in this row group.","<code>Compression</code> for this column.","Returns the number of remaining elements in the iterator.","String message for application that wrote this file.","Returns the offset for the column data.","Decompresses the page, using <code>buffer</code> for decompression. If …","","The <code>ColumnDescriptor</code> for this column. This descriptor …","","","Returns the offset for the dictionary page, if any.","","","","","","","","","","The field associated to the set of column chunks this …","","Byte offset in <code>file_path()</code>.","File where the column chunk is stored.","Returns an iterator which filters elements by a predicate.","Returns the first element of the iterator which satisfies …","","","","","","","","","","","","","","","Calls a closure on each element of an iterator.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns an iterator which is well-behaved at the beginning …","Returns the current element.","","","","","Returns a <code>ColumnIterator</code> of column chunks corresponding to …","","","","Creates a new iterator of compressed pages.","Returns <code>true</code> if this column chunk contains a index page, …","","","","","Returns the offset for the index page.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns two buffers: the first buffer corresponds to the …","Returns its internal buffer, consuming itself.","","","","","","Method to convert to Thrift.","","Method to convert to Thrift.","","returns the metadata","key_value_metadata of this file.","Returns an iterator which applies a transform to elements.","Returns an iterator that applies a transform to errors.","Returns an iterator which applies a transform to elements.","Returns parquet’s <code>FileMetaData</code>.","","","","","","Creates a new <code>Decompressor</code>.","Returns a new <code>BasicDecompressor</code>.","","","Create a new <code>ColumnChunkMetaData</code>","Creates new file metadata.","Create a new <code>RowGroupMetaData</code>","","","Returns a new <code>RowGroupReader</code>","Creates a new <code>RowGroupDeserializer</code>.","Advances the iterator, returning the next element.","","","","","Returns the <code>nth</code> element of the iterator.","Number of columns in this row group.","Number of rows in this row group.","Returns the number of rows on this row group","number of rows in the file.","Total number of values in this column chunk.","","","","","","The <code>ColumnDescriptor</code> for this column. This descriptor …","Returns the position of the first element matching a …","Reads all columns that are part of the parquet field …","Reads all columns that are part of the parquet field …","Returns a vector of iterators of <code>Array</code> (<code>ArrayIter</code>) …","Returns a vector of iterators of <code>Array</code> corresponding to …","","","","Reads parquets’ metadata syncronously.","Reads parquets’ metadata asynchronously.","","","The row groups of this file","APIs to handle Parquet &lt;-&gt; Arrow schemas.","Returns the [’SchemaDescriptor`] that describes schema …","Returns the derived arrow <code>Schema</code> of the file","schema descriptor.","Sets the groups filter","Sets the groups filter","Returns bounds on the number of remaining elements in the …","","Returns an iterator which skips the first <code>n</code> elements.","Returns an iterator which skips the first sequence of …","APIs exposing <code>parquet2</code>’s statistics as arrow’s …","Decodes the raw statistics into a statistics","Decodes the raw statistics into a statistics","","","","Returns an iterator which only returns the first <code>n</code> …","Returns an iterator which only returns the first sequence …","Converts a vector of columns associated with the parquet …","","","","","","","","","","","","","Total byte size of all uncompressed column data in this …","","","","","","","","","","","","","","","","","","","","Method to convert from Thrift.","Method to convert from Thrift.","","","","","","","","","","","","","","","","","","","","Creates a new <code>FileReader</code> by reading the metadata from …","Type of this column. Must be primitive.","","","","","","","","","","","","","","","","","","","","Returns the total uncompressed data size of this column …","","version of this file.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Metadata for a Parquet file.","","","Representation of a Parquet type. Used to describe …","","A schema descriptor. This encapsulates the top-level …","Column (sort) order used for <code>min</code> and <code>max</code> values of each …","String message for application that wrote this file.","Infers a <code>Schema</code> from parquet’s <code>FileMetaData</code>. This first …","key_value_metadata of this file.","number of rows in the file.","Reads an arrow schema from Parquet’s file metadata. …","The row groups of this file","schema descriptor.","version of this file.","","","","","","","","","Represents a <code>Binary</code> or <code>LargeBinary</code>","Statistics of a boolean parquet column","Arrow-deserialized parquet Statistics of a fixed-len binary","Arrow-deserialized parquet Statistics of a primitive type","Trait representing a deserialized parquet statistics into …","Statistics of a string parquet column","Returns <code>dyn Any</code> can used to downcast to a physical type.","","","","","","","","","","","","","","","","","","","","","","","","","","returns the <code>DataType</code> of the statistics.","","","","","","the data type","data type","Deserializes <code>ParquetStatistics</code> into <code>Statistics</code> associated …","number of dictinct values","number of dictinct values","number of dictinct values","number of dictinct values","number of dictinct values","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Maximum","Maximum","Maximum","Maximum","Maximum","Minimum","Minimum","Minimum","Minimum","Minimum","","","","","","Return the null count statistic","","","","","","number of nulls","number of nulls","number of nulls","number of nulls","number of nulls","","","","","","","","","","","","","","","","","","","","","","","Bit packed encoding.  This can only be used if the data …","","Encoding for floating-point data. K byte-streams are …","A descriptor for leaf-level primitive columns. This …","A <code>CompressedDataPage</code> is compressed, encoded representation …","A <code>CompressedPage</code> is a compressed, encoded representation …","","A <code>FallibleStreamingIterator</code> that consumes <code>EncodedPage</code> and …","","","Delta encoding for integers. This can be used for int …","Incremental-encoded byte array. Prefix lengths are encoded …","Encoding for byte arrays to separate the length values and …","","","<code>DynIter</code> is an implementation of a single-threaded, …","Dynamically-typed <code>FallibleStreamingIterator</code>.","A <code>EncodedPage</code> is an uncompressed, encoded representation …","","The error type of iteration.","A fallible, streaming iterator.","Sink that writes array <code>chunks</code> as a Parquet file.","An interface to write a parquet to a <code>Write</code>","","","The type being iterated over.","","","","Representation of a Parquet type. Used to describe …","Default encoding. BOOLEAN - 1 bit per value. 0 is false; 1 …","Deprecated: Dictionary encoding. The values in the …","","Group packed run length encoding. Usable for …","Dictionary encoding: the ids are encoded using the RLE …","","An iterator adapter that converts an iterator over <code>Chunk</code> …","A schema descriptor. This encapsulates the top-level …","","","","","The parquet version to use","Write options of different interfaces on this crate","","Advances the iterator to the next position.","","","Determines if all elements of the iterator satisfy a …","Determines if any elements of the iterator satisfy a …","Converts an <code>Array</code> to a <code>CompressedPage</code> based on options, …","Returns an iterator of <code>EncodedPage</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Borrows an iterator, rather than consuming it.","Checks whether the <code>data_type</code> can be encoded as <code>encoding</code>. …","Checks if <code>sub_type</code> schema is part of current schema. This …","","","","","","","","","","","","","","","Returns <code>ColumnDescriptor</code> for a field position.","Returns slice of <code>ColumnDescriptor</code>.","","","","Whether to use compression","Returns the number of remaining elements in the iterator.","","Writes the footer of the parquet file. Returns the total …","","","","","","","","","","","","Returns an iterator which filters elements by a predicate.","Returns the first element of the iterator which satisfies …","","","","","","","","","","","Calls a closure on each element of an iterator.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns an iterator which is well-behaved at the beginning …","Returns the current element.","","","Returns <code>BasicTypeInfo</code> information about the type.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns an iterator which applies a transform to elements.","Returns an iterator that applies a transform to errors.","Returns an iterator which applies a transform to elements.","Returns maximum definition level for this column.","Returns maximum repetition level for this column.","Key-value metadata that will be written to the file on …","","","","","","","","","","","","","","Returns column name.","Returns schema name.","Returns this type’s field name.","","","","","","","Creates new descriptor for leaf-level column.","Creates new schema descriptor from Parquet schema.","","","","Advances the iterator, returning the next element.","","","Returns the <code>nth</code> element of the iterator.","Returns number of leaf-level columns.","","The options assigned to the file","The write options for the file.","The <code>SchemaDescriptor</code> assigned to this file","Returns the <code>SchemaDescriptor</code> of the <code>RowGroupIterator</code>.","The Parquet <code>SchemaDescriptor</code> for the file.","","Returns self type <code>PhysicalType</code> for this leaf column.","","","","Returns the position of the first element matching a …","Maps a <code>Chunk</code> and parquet-specific options to an …","The <code>Schema</code> assigned to this file","The Arrow <code>Schema</code> for the file.","Returns bounds on the number of remaining elements in the …","","","Returns an iterator which skips the first <code>n</code> elements.","Returns an iterator which skips the first sequence of …","Writes the header of the file","","Decodes the raw statistics into a statistics","Returns an iterator which only returns the first <code>n</code> …","Returns an iterator which only returns the first sequence …","","","","","","","","Creates a parquet <code>SchemaDescriptor</code> from a <code>Schema</code>.","Creates a <code>ParquetType</code> from a <code>Field</code>.","Method to convert to Thrift.","","","","","","","","","","","","","","","","","","","","","","Method to convert from Thrift.","","","","","","","","","","","","","","","","","Returns a new <code>FileWriter</code>.","Creates a new <code>RowGroupIterator</code> from an iterator over <code>Chunk</code>.","Create a new sink that writes arrays to the provided <code>writer</code>…","Returns self type <code>ParquetType</code> for this leaf column.","","","","","","","","","","","","","","","","","","Which Parquet version to use","Writes a row group to the file.","Whether to write statistics","","","","","","","","","","","","","Returns a visual representation of <code>Chunk</code>","The <code>Scalar</code> implementation of binary (<code>Option&lt;Vec&lt;u8&gt;&gt;</code>).","The <code>Scalar</code> implementation of a boolean.","The <code>DictionaryArray</code> equivalent of <code>Array</code> for <code>Scalar</code>.","The <code>Scalar</code> implementation of fixed size binary ([…","The scalar equivalent of <code>FixedSizeListArray</code>. Like …","The scalar equivalent of <code>ListArray</code>. Like <code>ListArray</code>, this …","The representation of a single entry of a …","The implementation of <code>Scalar</code> for primitive, semantically …","Trait object declaring an optional value with a <code>DataType</code>. …","A single entry of a <code>crate::array::StructArray</code>.","The implementation of <code>Scalar</code> for utf8, semantically …","convert itself to","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","the logical type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","whether it is valid","","","","","","","","","","","","","","","","returns a new <code>DictionaryScalar</code>","Returns a new <code>PrimitiveScalar</code>.","Returns a new <code>Utf8Scalar</code>","Returns a new <code>BinaryScalar</code>.","Returns a new <code>BooleanScalar</code>","returns a new <code>ListScalar</code>","A new <code>NullScalar</code>","Returns a new <code>StructScalar</code>","returns a new <code>FixedSizeListScalar</code>","Returns a new <code>FixedSizeBinaryScalar</code>.","creates a new <code>Scalar</code> from an <code>Array</code>.","Returns a new <code>PrimitiveScalar</code> with the same value but …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The values of the <code>DictionaryScalar</code>","Returns the optional value.","Returns the value irrespectively of the validity.","Its value","The value","Its value","The values of the <code>ListScalar</code>","Returns the values irrespectively of the validity.","The values of the <code>FixedSizeListScalar</code>","Number of days between 0001-01-01 and 1970-01-01","Number of microseconds in a second","Number of milliseconds in a second","Number of milliseconds in a day","Number of nanoseconds in a second","Number of seconds in a day","Adds an <code>interval</code> to a <code>timestamp</code> in <code>time_unit</code> units and …","Adds an <code>interval</code> to a <code>timestamp</code> in <code>time_unit</code> units without …","converts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDate</code>","converts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDate</code>","converts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDateTime</code>","Parses an offset of the form <code>&quot;+WX:YZ&quot;</code> or <code>&quot;UTC&quot;</code> into …","Parses <code>value</code> to a <code>chrono_tz::Tz</code> with the Arrow’s …","converts a <code>i32</code> representing a <code>time32(ms)</code> to <code>NaiveTime</code>","converts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>timestamp(ms)</code> to …","converts a <code>i64</code> representing a <code>timestamp(ns)</code> to …","converts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>","Converts a timestamp in <code>time_unit</code> and <code>timezone</code> into …","Converts a timestamp in <code>time_unit</code> and <code>timezone</code> into …","converts a <code>i64</code> representing a <code>timestamp(us)</code> to …","Calculates the scale factor between two TimeUnits. The …","Parses a <code>Utf8Array</code> to naive timestamp, i.e. …","Parses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …","Parses a <code>Utf8Array</code> to a timeozone-aware timestamp, i.e. …","Parses <code>value</code> to <code>Option&lt;i64&gt;</code> consistent with the Arrow’s …","An iterator of known, fixed size. A trait denoting Rusts’…","A chunk of bits. This is used to create masks of a given …","An [<code>Iterator&lt;Item=bool&gt;</code>] over a <code>BitChunk</code>. This iterator is …","An [<code>Iterator&lt;Item=usize&gt;</code>] over a <code>BitChunk</code>. This iterator …","Type denoting its representation as bytes. This is <code>[u8; N]</code> …","Two i32 representing days and ms","A 32-bit floating point number.","A 64-bit floating point number.","Sealed trait describing the subset of <code>NativeType</code> (<code>i32</code>, <code>i64</code>…","Range of <code>Index</code>, equivalent to <code>(a..b)</code>. <code>Step</code> is unstable in …","A signed 128-bit integer.","A signed 16-bit integer.","A signed 32-bit integer.","A signed 64-bit integer.","A signed 8-bit integer.","months_days_ns(i32, i32, i64)","Sealed trait implemented by all physical types that can be …","Sealed trait describing the subset (<code>i32</code> and <code>i64</code>) of <code>Index</code> …","The corresponding variant of <code>PrimitiveType</code>.","The corresponding variant of <code>PrimitiveType</code>.","The set of all implementations of the sealed trait …","An unsigned 16-bit integer.","An unsigned 32-bit integer.","An unsigned 64-bit integer.","An unsigned 8-bit integer.","","","","","","","","","","","","","","","","","","","The number of days","The number of days","The in-memory representation of the DayMillisecond variant …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","From bytes in big endian","","","convert itself from bytes.","Convert itself from <code>usize</code>.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Whether it is <code>i32</code> (false) or <code>i64</code> (true).","The number of milliseconds","The number of months","The in-memory representation of the MonthDayNano variant …","","","","","","","","","","","","","","","","","","Creates a new <code>BitChunkIter</code> with <code>len</code> bits.","Creates a new <code>BitChunkOnes</code> with <code>len</code> bits.","Returns a new <code>IndexRange</code>.","A new <code>days_ms</code>.","A new <code>months_days_ns</code>.","","","","The number of nanoseconds","An iterator from (inclusive) <code>start</code> to (exclusive) <code>end</code>.","An iterator from (inclusive) <code>start</code> to (exclusive) <code>end</code>.","Contains traits and implementations of multi-data used in …","","","","To bytes in big endian","","","To bytes in little endian","","","convert itself into bytes.","To bytes in native endian","","","","","","","","Convert itself to <code>usize</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type holding bits for masks.","Describes the ability to convert itself from a <code>BitChunk</code>.","Number of lanes","Type used for masking.","The <code>NativeType</code> of this struct. E.g. <code>f32</code> for a …","A struct that lends itself well to be compiled leveraging …","Trait implemented by some <code>NativeType</code> that have a SIMD …","The SIMD type associated with this trait. This type …","","","","","","","","","","","","","","","","","","","","","Returns a tuple of 3 items whose middle item is itself, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multi-Data correspondence of the native type","","","","","","","","","","","","","","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert itself from a slice.","Convert itself from a slice.","","","","","","","","","","","","","","creates a new Self from <code>v</code> by populating items from <code>v</code> up to …","","","","","","","","","","","","","","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multi-Data correspondence of the native type","","","","","","","","","","","","","","","","","","","","","Sets values to <code>default</code> based on <code>mask</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Multi-Data correspondence of the native type","Converts numeric type to a <code>String</code>","Converts numeric type to a <code>String</code>","Converts numeric type to a <code>String</code>"],"i":[0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,0,1,1,0,1,1,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,5,23,24,25,26,7,8,10,12,14,16,18,22,25,7,8,10,12,14,16,18,22,25,7,8,10,12,14,16,18,22,25,6,27,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,5,23,24,28,25,26,27,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,5,23,24,28,25,26,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,27,9,11,13,15,17,19,20,21,5,23,24,28,26,27,9,11,13,15,17,19,20,21,5,23,24,28,26,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,5,5,23,24,25,26,8,10,12,18,22,25,9,26,17,19,5,5,5,6,9,9,10,11,11,13,13,14,15,15,17,17,19,19,21,21,22,5,5,23,23,24,24,26,26,0,8,10,22,25,22,22,8,10,22,25,8,10,22,25,8,10,22,25,8,10,22,25,25,20,23,24,6,27,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,5,23,24,28,25,26,27,8,9,9,9,9,10,10,11,11,11,11,12,12,12,13,13,13,14,15,15,15,16,17,17,17,18,19,19,19,20,21,21,22,22,22,5,5,5,5,23,23,24,28,25,26,26,26,26,8,9,10,11,13,14,15,17,19,20,21,22,5,23,24,25,26,9,25,26,8,9,10,11,15,22,5,25,26,8,9,25,26,9,10,11,22,5,26,8,9,10,11,22,5,25,26,8,9,10,11,22,5,25,26,8,9,10,11,22,5,25,26,8,10,11,22,5,25,5,5,19,19,0,23,24,0,0,24,27,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,5,23,24,28,25,26,8,10,12,18,22,25,12,18,22,23,27,28,11,5,26,6,7,29,6,24,6,7,9,10,11,13,14,15,17,19,20,22,5,23,24,26,14,15,13,6,7,8,9,9,10,11,11,12,13,13,14,15,15,16,17,17,18,19,19,20,20,21,22,5,5,23,24,24,25,26,26,5,5,5,12,18,27,8,9,10,11,12,14,15,16,17,18,19,20,21,22,5,23,24,28,25,26,9,11,13,15,17,19,20,21,5,23,24,26,0,18,9,11,13,15,17,19,20,21,5,23,24,26,0,9,19,26,18,18,27,28,28,6,30,8,9,9,18,19,20,24,25,26,26,0,5,5,5,5,5,5,8,10,14,22,25,7,8,10,12,12,14,16,18,22,25,5,5,8,10,22,25,5,5,5,5,5,5,5,5,5,10,22,22,22,22,7,8,8,10,10,12,12,14,14,16,16,18,18,22,22,25,25,14,15,27,28,6,9,9,11,11,13,13,15,15,17,17,19,19,20,20,21,21,5,5,23,23,24,24,26,26,6,9,9,11,11,13,13,15,15,17,17,19,19,20,20,21,5,5,23,23,24,24,26,26,5,5,5,15,22,5,27,9,11,13,15,17,19,20,21,5,23,24,28,26,31,8,10,12,16,18,22,25,27,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,5,23,24,28,25,26,14,15,8,9,10,11,22,25,26,8,9,10,11,22,25,26,27,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,5,23,24,28,25,26,9,11,15,17,19,20,21,5,23,24,26,9,19,26,32,8,10,14,16,18,22,25,12,18,27,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,5,23,24,28,25,26,24,6,7,8,9,9,10,11,11,12,13,13,14,15,15,16,17,17,18,19,19,20,21,22,5,5,23,23,24,25,26,26,9,11,13,14,15,17,19,20,5,24,26,33,9,11,14,15,17,17,19,19,20,5,26,30,8,9,9,10,11,12,13,14,15,16,17,18,19,22,5,23,25,26,26,9,10,11,13,17,19,20,22,23,26,14,22,8,25,8,10,14,18,22,25,22,6,9,9,11,11,13,13,15,15,17,17,19,19,20,21,5,5,23,23,24,26,26,5,5,5,0,0,0,0,0,0,0,0,0,0,0,34,35,36,37,38,39,40,41,42,43,44,44,34,35,36,37,38,39,40,41,42,43,34,35,36,37,38,39,40,41,42,43,34,35,36,37,38,39,40,41,42,43,37,44,34,35,36,37,38,39,40,41,42,43,44,34,35,36,37,38,39,40,41,42,43,34,35,36,37,38,39,40,41,42,43,34,35,36,37,38,39,40,41,42,43,0,34,35,36,37,38,39,40,41,42,43,34,35,36,37,38,39,40,41,42,43,34,35,36,37,38,39,40,41,42,43,34,35,36,37,38,39,40,41,42,43,0,0,0,0,0,0,0,45,46,0,45,46,45,46,45,0,46,45,46,46,45,46,45,46,45,45,45,45,45,45,46,45,45,46,46,46,0,45,46,45,45,46,45,46,46,46,45,45,46,46,46,45,46,46,45,46,45,46,45,46,45,46,46,45,46,46,45,45,0,45,45,45,45,46,46,0,46,45,46,45,46,45,46,45,46,45,46,0,0,45,0,0,0,0,0,0,0,47,48,49,50,51,47,48,49,50,51,0,47,50,51,47,50,51,0,0,48,49,50,51,47,48,49,50,51,52,0,0,47,48,49,50,51,47,48,49,50,51,48,0,48,49,48,48,48,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,49,49,49,51,47,48,49,50,51,47,48,49,50,51,47,50,53,48,48,49,49,53,53,53,48,49,49,0,0,0,47,48,49,50,51,52,47,50,51,47,48,49,50,51,47,48,49,50,51,47,48,49,50,51,0,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,56,56,56,0,0,0,0,0,56,0,0,56,0,0,0,56,0,0,56,0,0,56,56,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,59,60,61,62,63,0,0,64,0,0,65,0,0,66,67,68,0,69,70,71,72,0,73,0,0,74,75,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,77,0,0,77,77,0,0,0,0,0,77,0,0,0,0,77,77,0,77,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,77,77,77,0,0,0,0,0,0,0,0,77,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,0,0,0,80,80,0,81,0,81,0,0,0,81,0,81,0,0,0,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,82,0,82,82,82,0,0,82,82,0,0,82,82,82,82,0,0,0,0,0,0,0,0,0,0,83,84,83,84,0,83,84,83,84,84,84,83,84,83,84,83,84,0,0,84,83,0,0,83,84,83,84,83,84,83,84,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,86,85,86,0,86,86,87,86,88,85,86,86,86,0,85,86,85,86,86,86,86,89,86,89,86,89,86,89,86,0,86,0,85,86,85,86,85,86,85,86,85,86,0,90,90,87,90,85,86,0,85,0,0,90,88,85,86,86,86,0,86,89,86,89,86,89,86,89,86,85,86,0,85,86,87,91,85,89,92,86,88,90,87,91,85,89,92,86,88,90,87,91,85,89,92,86,88,90,87,91,85,89,92,86,88,90,87,91,91,92,91,85,89,92,86,88,90,87,85,91,85,89,92,86,88,90,87,92,91,85,89,92,86,88,90,87,91,85,89,92,92,86,86,86,88,90,87,0,91,85,89,86,88,90,87,91,85,89,86,88,90,87,91,85,89,92,86,88,90,87,88,91,88,91,92,91,91,85,92,86,91,88,86,91,85,89,92,86,88,90,87,86,91,85,89,92,86,88,90,87,91,85,89,92,86,88,90,87,91,85,89,92,86,88,90,87,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,93,100,103,104,105,106,107,103,105,107,108,109,0,110,110,110,110,110,110,110,0,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,112,113,114,115,116,112,0,0,0,0,117,118,119,120,117,118,119,120,118,119,120,118,119,120,118,119,120,118,119,120,0,0,0,117,118,119,120,117,118,119,120,0,0,117,118,119,120,117,118,119,120,117,118,119,120,117,118,119,120,117,117,118,119,120,0,0,0,0,0,0,0,0,0,0,0,0,121,121,121,122,123,121,122,123,121,122,123,121,122,123,122,123,122,123,121,122,123,121,121,122,123,121,122,123,121,121,121,122,123,122,123,122,123,122,123,0,0,121,122,123,121,122,123,121,122,123,121,122,123,0,0,0,0,0,124,125,124,125,126,124,125,126,124,0,0,124,125,126,124,125,124,125,126,124,125,126,126,124,125,126,126,0,124,125,126,124,125,126,124,125,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,127,128,127,128,127,128,128,127,127,127,128,0,0,127,127,127,127,128,127,128,127,128,127,128,128,128,127,128,128,0,0,127,128,128,128,128,128,128,127,128,127,127,128,128,0,128,128,128,128,128,127,127,127,128,127,128,127,128,0,0,0,0,129,130,129,131,132,130,129,131,132,130,130,132,132,129,129,129,130,130,130,131,129,130,130,129,0,0,130,130,129,129,129,129,130,129,130,129,131,131,132,130,129,129,129,129,131,131,132,130,129,132,129,132,132,132,130,132,129,0,0,129,131,132,130,132,132,131,132,132,129,131,129,131,129,129,130,129,131,132,129,130,130,129,132,132,0,132,132,132,132,132,132,129,131,130,129,131,129,130,129,129,131,132,130,129,131,132,130,129,131,132,130,129,0,0,0,133,133,134,135,133,134,135,134,133,133,135,133,135,135,135,133,134,135,134,135,133,134,133,133,133,135,133,135,134,133,134,133,134,135,133,133,133,133,134,135,133,134,134,133,135,134,135,133,133,134,135,133,133,133,135,133,134,0,133,133,134,135,134,133,0,133,134,135,135,135,133,135,133,133,133,134,135,133,134,135,133,134,135,133,0,0,0,0,0,0,0,0,0,0,136,137,136,137,136,137,136,137,136,136,136,137,136,137,136,137,136,137,136,137,137,136,137,0,136,137,136,137,136,137,136,137,0,0,0,0,138,0,0,0,138,139,138,140,141,142,139,138,140,141,142,141,142,141,142,0,141,142,139,138,140,141,142,139,138,140,141,142,139,139,140,141,142,140,139,140,139,140,139,140,0,0,0,0,139,141,142,0,141,142,139,138,140,141,142,139,138,140,141,142,139,138,140,141,142,138,142,143,0,144,144,144,144,144,144,144,0,144,144,144,144,0,0,145,0,0,145,146,147,145,146,147,145,145,145,148,0,145,145,146,147,145,146,147,145,145,145,146,147,145,146,147,146,0,146,0,145,146,147,145,146,147,145,147,146,147,145,0,146,147,0,0,0,149,148,149,148,148,148,148,148,148,148,149,148,149,148,148,148,149,148,149,148,149,149,148,149,148,149,148,149,148,149,0,0,0,0,0,0,0,150,0,0,0,150,0,0,0,0,0,0,0,0,150,151,152,153,154,155,156,157,158,159,160,161,162,163,151,152,155,156,157,150,150,151,152,153,154,155,156,157,158,159,160,161,162,151,152,153,154,155,156,157,158,159,160,161,162,150,162,162,0,150,0,150,150,162,150,151,152,153,154,155,156,157,158,159,160,161,162,150,150,151,152,153,154,155,156,157,158,159,160,161,162,151,152,153,154,155,156,157,158,159,160,161,162,150,150,150,162,150,154,157,163,157,150,150,150,151,152,153,154,155,156,157,158,159,160,161,150,150,150,150,162,151,152,153,154,155,156,157,158,159,160,161,162,151,152,153,154,155,156,157,158,159,160,161,162,151,152,153,154,155,156,157,158,159,160,161,162,0,0,0,0,0,0,0,0,0,164,165,164,166,167,168,165,169,170,171,164,166,167,168,165,169,170,171,167,171,171,171,169,171,170,171,164,166,167,168,165,169,170,171,164,167,167,166,164,166,167,168,165,169,170,171,164,166,167,168,165,169,170,171,168,170,168,164,166,167,168,165,169,170,171,168,165,166,167,167,165,167,171,0,164,164,166,167,168,165,169,170,171,171,164,166,167,168,165,169,170,171,164,166,167,168,165,169,170,171,164,166,167,168,165,169,170,171,171,171,0,0,0,0,0,0,0,0,150,0,0,150,150,172,150,150,172,172,150,150,0,150,150,150,172,150,150,172,0,172,172,150,150,150,172,150,150,150,150,150,150,150,150,172,172,172,150,0,0,150,0,150,173,150,150,174,173,174,173,150,173,173,150,150,150,173,150,174,173,150,150,173,174,173,174,174,150,150,150,174,173,150,174,150,150,150,150,150,150,150,173,174,173,174,173,174,173,0,0,0,175,0,176,177,176,0,0,0,0,175,175,0,0,0,177,177,0,176,175,177,150,178,179,0,179,0,0,180,176,176,179,181,175,177,176,177,176,177,177,176,177,150,178,175,177,175,0,175,182,182,0,182,179,0,0,0,0,0,0,0,181,0,0,0,0,175,180,0,175,175,177,177,177,177,0,175,175,177,177,177,177,177,183,183,0,0,0,0,150,178,184,185,186,150,150,184,185,187,182,188,175,179,189,190,191,183,192,180,186,176,177,193,194,195,184,185,187,182,188,175,179,189,190,191,183,192,180,186,176,177,193,194,195,192,192,192,150,189,182,188,175,179,189,190,191,183,192,176,177,182,188,175,179,189,190,191,183,192,176,177,182,188,175,191,189,0,190,190,191,189,191,189,150,190,189,0,192,189,192,192,189,192,182,188,175,176,177,182,188,175,196,186,189,189,150,150,182,188,175,179,179,189,190,191,183,192,180,186,176,177,150,184,185,187,182,188,175,179,179,179,179,179,189,190,191,183,192,180,186,176,177,193,194,195,150,150,178,184,185,186,0,182,188,175,0,189,182,188,175,192,189,0,184,185,187,182,188,175,179,189,190,191,183,192,180,186,176,177,193,194,195,187,184,185,187,187,193,194,195,189,190,191,188,190,190,150,150,150,193,182,188,175,176,177,184,185,187,188,189,190,191,192,186,194,195,150,187,193,194,195,150,191,191,195,190,189,183,192,182,188,175,189,150,0,0,0,0,182,188,175,0,0,192,187,190,0,190,193,190,193,194,150,194,150,150,0,189,192,182,188,175,150,150,0,182,188,175,179,189,190,191,183,192,176,177,179,191,184,185,187,182,188,175,179,189,190,191,183,192,180,186,176,177,193,194,195,189,191,184,185,187,182,188,175,179,189,190,191,183,192,180,186,176,177,193,194,195,193,189,184,185,187,182,188,175,179,189,190,191,183,192,180,186,176,177,193,194,195,189,188,190,182,188,175,182,188,175,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,213,215,216,217,218,219,220,219,220,220,219,220,219,221,222,222,223,224,0,181,0,0,181,0,190,190,0,190,190,0,190,190,190,219,220,219,220,220,219,220,219,0,0,0,0,0,0,225,226,227,228,229,230,226,227,228,229,230,226,227,228,229,230,226,227,228,229,230,226,227,228,229,230,225,226,227,228,229,230,226,230,0,226,227,228,229,230,225,226,227,228,229,230,226,227,228,229,230,226,226,227,227,228,229,229,230,230,226,227,228,229,230,226,227,228,229,230,226,227,228,229,230,226,227,228,229,230,225,226,227,228,229,230,226,227,228,229,230,226,227,228,229,230,226,226,227,228,228,229,230,226,227,228,229,230,226,227,228,229,230,231,232,231,0,0,0,0,0,233,234,231,231,231,233,234,0,0,0,0,150,0,0,0,181,232,150,0,232,232,0,231,231,181,231,231,0,0,0,232,232,235,235,0,0,232,150,236,237,150,150,0,0,238,236,239,237,238,240,241,233,234,232,231,181,242,235,243,244,245,236,239,237,238,240,241,233,234,232,231,181,242,235,243,244,245,150,0,181,238,240,232,231,181,242,235,238,240,232,231,181,242,235,240,240,0,241,241,242,150,241,243,238,232,231,181,242,235,232,231,242,235,240,150,150,238,240,241,233,234,232,231,181,242,235,150,236,239,237,238,240,241,233,234,232,231,181,242,235,243,244,245,181,181,150,150,236,237,181,232,231,242,235,232,231,242,235,241,236,239,237,238,240,241,233,234,232,231,181,242,235,243,244,245,239,244,241,181,150,150,150,238,238,245,239,239,239,239,239,239,239,239,239,239,239,239,239,238,240,181,238,181,242,236,239,237,238,240,241,236,181,150,239,244,150,240,241,243,245,243,244,245,238,238,245,245,245,150,0,243,245,150,239,237,150,150,243,245,241,150,150,238,240,232,231,181,242,235,0,0,181,236,239,237,238,240,241,233,234,232,232,231,231,181,242,235,243,244,245,181,240,181,181,236,239,237,238,240,241,233,234,232,231,181,242,235,243,244,245,243,244,245,238,236,239,237,238,240,241,233,234,232,231,181,242,235,243,244,245,241,242,243,242,246,247,248,249,219,220,219,220,220,219,220,219,0,0,0,0,0,0,0,0,0,0,0,0,250,251,252,253,254,255,256,257,258,259,260,251,252,253,254,255,256,257,258,259,260,251,252,253,254,255,256,257,258,259,260,251,252,253,254,255,256,257,258,259,260,251,252,253,254,255,256,257,258,259,260,250,251,252,253,254,255,256,257,258,259,260,257,250,251,252,253,254,255,256,257,258,259,260,257,251,252,253,254,255,256,257,258,259,260,251,252,252,253,253,254,254,255,255,256,257,258,259,260,251,252,253,254,255,256,257,258,259,260,250,251,252,253,254,255,256,257,258,259,260,252,253,254,255,260,251,252,253,254,255,256,257,258,259,260,0,252,251,252,253,254,255,256,257,258,259,260,251,252,253,254,255,256,257,258,259,260,251,252,253,254,255,256,257,258,259,260,251,252,253,254,255,256,257,258,259,260,251,252,253,254,255,260,256,258,259,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,261,262,262,262,0,0,262,262,262,262,262,262,0,0,261,261,0,262,262,262,262,263,264,265,266,267,262,263,264,265,266,267,262,266,267,262,266,267,262,266,267,0,266,267,266,267,262,266,267,262,266,266,267,267,262,263,264,265,266,267,262,261,266,267,52,268,266,267,262,266,267,262,263,264,265,266,267,262,263,264,265,29,266,267,0,265,265,265,265,265,265,265,265,265,265,265,265,265,266,267,266,267,263,264,265,266,267,263,264,265,267,268,268,0,263,264,265,261,266,267,261,266,267,52,261,266,267,266,267,262,266,267,268,263,264,265,266,267,262,263,264,265,266,267,262,263,264,265,266,267,262,269,270,271,272,273,274,275,276,277,278,279,280,281,282,0,282,282,282,0,0,283,269,270,271,272,273,274,275,276,277,278,269,270,271,272,273,274,275,276,277,278,282,269,270,271,272,273,274,275,276,277,278,279,280,281,269,270,271,272,273,274,275,276,277,278,279,280,281,269,270,271,272,273,274,275,276,277,278,279,280,281,269,270,271,272,273,274,275,276,277,278,279,280,281,269,270,271,272,273,274,275,276,277,278,279,280,281,0,269,270,271,272,273,274,275,276,277,278,279,280,281,0,0,269,270,271,272,273,274,275,276,277,278,279,280,281,284,282,269,270,271,272,273,274,275,276,277,278,279,280,281,282,269,270,271,272,273,274,275,276,277,278,279,280,281,0,0,0,0,0,269,270,271,272,273,274,275,276,277,278,279,280,281,269,270,271,272,273,274,275,276,277,278,279,280,281,269,270,271,272,273,274,275,276,277,278,279,280,281,269,270,271,272,273,274,275,276,277,278,269,270,271,272,273,274,275,276,277,278,269,270,271,272,273,274,275,276,277,278,269,270,271,272,273,274,275,276,277,278,0,269,270,271,272,273,274,275,276,277,278,269,270,271,272,273,274,275,276,277,278,282,269,270,271,272,273,274,275,276,277,278,279,280,281,269,270,271,272,273,274,275,276,277,278,269,270,271,272,273,274,275,276,277,278,279,280,281,269,270,271,272,273,274,275,276,277,278,279,280,281,269,270,271,272,273,274,275,276,277,278,279,280,281,269,270,271,272,273,274,275,276,277,278,279,280,281,0,0,0,0,0,0,0],"f":[null,null,null,[[["",0]],["bool",0]],null,[[["",0]],["str",0]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["path",3]],[[["",0]],["osstr",3]],[[["",0]],["either",4]],[[["",0]],["cstr",3]],[[["",0]],["cstr",3]],[[["",0]],["either",4]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["path",3]],[[["",0]],["osstr",3]],[[["",0]],["str",0]],[[["",0]],["uncasedstr",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["option",4,[["error",8]]]],null,[[["",0]],["either",4]],[[["",0],["",0]]],[[["",0],["either",4]],["ordering",4]],[[]],null,[[["",0],["usize",0]]],[[],["usize",0]],null,[[["",0]]],[[["",0]]],[[["",0]],["str",0]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0],["either",4]],["bool",0]],[[["",0],["",0]],["bool",0]],null,[[["str",0]]],[[["str",0]]],[[["",0]]],[[]],[[]],null,[[["",0]],["result",4,[["error",3]]]],[[],["either",4]],[[["",0]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[["result",4]],["either",4]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[]],[[],["result",4]],[[]],[[]],[[],["either",4]],null,[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[],["option",4]],[[],["option",4]],[[],["either",4]],[[]],[[]],[[]],[[],["either",4]],[[],["either",4]],[[],["either",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["either",4]],["bool",0]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[["",0],["either",4]],["option",4,[["ordering",4]]]],[[["",0]],["result",4,[["usize",0],["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[["",0],["vec",3]],["result",4,[["usize",0],["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[],["option",4]],[[],["either",4]],[[]],[[]],[[]],null,[[["",0]]],null,[[["",0]]],[[["",0]],["string",3]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[]],[[]],null,[[["",0]],["result",4,[["usize",0],["error",3]]]],[[["",0]],["result",4,[["usize",0],["error",3]]]],[[["",0]],["result",4,[["usize",0],["error",3]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["",0]]],[[["",0],["primitivearray",3]]],[[["",0],["primitivearray",3]]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["arc",3,[["array",8]]]],[[["",0]],["arc",3,[["array",8]]]],[[["",0]],["arc",3,[["array",8]]]],[[["",0]],["arc",3,[["array",8]]]],[[["",0]],["arc",3,[["array",8]]]],[[["",0]],["arc",3,[["array",8]]]],[[["",0]],["arc",3,[["array",8]]]],[[["",0]],["arc",3,[["array",8]]]],[[["",0]],["arc",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["arrayprimitivearray",3]]],[[["",0],["primitivearray",3]]],[[["",0],["",0]]],[[["",0],["primitivearray",3]]],[[["",0],["primitivearray",3]]],[[["",0],["",0]]],[[["",0],["primitivearray",3]]],[[["",0],["primitivearray",3]]],[[["",0],["primitivearray",3]]],[[["",0],["",0]]],[[["",0],["primitivearray",3]]],[[["",0],["primitivearray",3]]],[[["",0],["",0]]],[[["array",8]],["box",3,[["array",8]]]],[[["",0]],["binaryvalueiter",3]],[[["",0]],["binaryarray",3]],[[["",0]],["booleanarray",3]],[[["",0]],["dictionaryarray",3]],[[["",0]],["fixedsizebinaryarray",3]],[[["",0]],["fixedsizelistarray",3]],[[["",0]],["listarray",3]],[[["",0]],["maparray",3]],[[["",0]],["nullarray",3]],[[["",0]],["primitivearray",3]],[[["",0]],["structarray",3]],[[["",0]],["unionarray",3]],[[["",0]],["utf8valuesiter",3]],[[["",0]],["utf8array",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["datatype",4]],[[],["datatype",4]],[[["datatype",4],["usize",0]],["datatype",4]],[[["datatype",4]],["datatype",4]],[[["",0],["primitivearray",3]]],[[["",0],["",0]]],[[["",0],["primitivearray",3]]],[[["",0],["array",8]],["bool",0]],[[["",0],["array",8]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["array",8]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["array",8]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["array",8]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["array",8]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["array",8]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["array",8]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["array",8]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["array",8]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["array",8]],["bool",0]],[[["",0],["array",8]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["array",8],["array",8]],["bool",0]],[[["",0],["intoiterator",8]]],[[["",0],["intoiterator",8]]],[[["",0],["intoiterator",8]]],[[["",0],["intoiterator",8]]],[[["",0],["usize",0],["option",4]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["arc",3]],[[["",0]]],[[["",0]],["vec",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["growablebinary",3]]],[[["asref",8]]],[[["mutablebinaryarray",3]]],[[]],[[]],[[]],[[["mutablebooleanarray",3]]],[[["growableboolean",3]]],[[]],[[]],[[["never",0]]],[[]],[[["growabledictionary",3]]],[[]],[[["mutabledictionaryarray",3]]],[[]],[[["mutablefixedsizebinaryarray",3]]],[[]],[[["growablefixedsizebinary",3]]],[[]],[[]],[[["mutablefixedsizelistarray",3]]],[[["growablefixedsizelist",3]]],[[]],[[]],[[["growablelist",3]]],[[["mutablelistarray",3]]],[[]],[[["growablenull",3]]],[[]],[[]],[[["datatype",4]]],[[]],[[["growableprimitive",3]]],[[["mutableprimitivearray",3]]],[[]],[[]],[[]],[[["growablestruct",3]]],[[]],[[]],[[]],[[["mutableutf8array",3]]],[[["asref",8]]],[[]],[[["growableutf8",3]]],[[["datatype",4],["vec",3],["vec",3,[["u8",0]]],["option",4,[["mutablebitmap",3]]]]],[[["datatype",4],["buffer",3],["buffer",3,[["u8",0]]],["option",4,[["bitmap",3]]]]],[[["datatype",4],["mutablebitmap",3],["option",4,[["mutablebitmap",3]]]]],[[["datatype",4],["bitmap",3],["option",4,[["bitmap",3]]]]],[[["primitivearray",3],["arc",3,[["array",8]]]]],[[["datatype",4],["vec",3,[["u8",0]]],["option",4,[["mutablebitmap",3]]]]],[[["datatype",4],["buffer",3,[["u8",0]]],["option",4,[["bitmap",3]]]]],[[["datatype",4],["arc",3,[["array",8]]],["option",4,[["bitmap",3]]]]],[[["datatype",4],["buffer",3],["arc",3,[["array",8]]],["option",4,[["bitmap",3]]]]],[[["datatype",4],["buffer",3,[["i32",0]]],["arc",3,[["array",8]]],["option",4,[["bitmap",3]]]]],[[["datatype",4],["usize",0]]],[[["datatype",4],["vec",3],["option",4,[["mutablebitmap",3]]]]],[[["datatype",4],["buffer",3],["option",4,[["bitmap",3]]]]],[[["datatype",4],["vec",3,[["arc",3,[["array",8]]]]],["option",4,[["bitmap",3]]]]],[[["datatype",4],["buffer",3,[["i8",0]]],["vec",3,[["arc",3,[["array",8]]]]],["option",4,[["buffer",3,[["i32",0]]]]]]],[[["datatype",4],["vec",3],["vec",3,[["u8",0]]],["option",4,[["mutablebitmap",3]]]]],[[["datatype",4],["buffer",3],["buffer",3,[["u8",0]]],["option",4,[["bitmap",3]]]]],[[["datatype",4],["buffer",3],["buffer",3,[["u8",0]]],["option",4,[["bitmap",3]]]]],[[["datatype",4],["vec",3],["vec",3,[["u8",0]]],["option",4,[["mutablebitmap",3]]]]],[[["datatype",4],["buffer",3],["buffer",3,[["u8",0]]],["option",4,[["bitmap",3]]]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8],["usize",0]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["asref",8]]],[[["asref",8]]],[[["asref",8]]],[[["asref",8]]],[[["asref",8]]],[[["asref",8]]],[[]],[[]],[[]],[[]],[[]],[[["trustedlen",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["iterator",8]]],[[]],[[]],[[["trustedlen",8]]],[[["trustedlen",8]]],[[["trustedlen",8]]],[[["trustedlen",8]]],[[["trustedlen",8]]],[[["trustedlen",8]]],[[["trustedlen",8]]],[[["trustedlen",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["intoiterator",8]]],[[["vec",3]]],[[["datatype",4]],["field",3]],[[["datatype",4]],["datatype",4]],[[["array",8],["str",0]],["box",3,[["fn",8]]]],[[["datatype",4]]],[[["datatype",4]]],[[["array",8],["str",0]],["box",3,[["fn",8]]]],null,[[["",0],["usize",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["arc",3,[["array",8]]]],[[],["arc",3,[["array",8]]]],[[],["arc",3,[["array",8]]]],[[],["arc",3,[["array",8]]]],[[],["arc",3,[["array",8]]]],[[],["arc",3,[["array",8]]]],[[],["box",3,[["array",8]]]],[[],["box",3,[["array",8]]]],[[]],[[]],[[]],[[]],[[],["either",4,[["mutablebooleanarray",3]]]],[[],["either",4,[["mutableprimitivearray",3]]]],[[],["either",4,[["mutableutf8array",3]]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[],["bool",0]],[[["",0],["usize",0]],["bool",0]],[[["datatype",4]],["bool",0]],[[["",0],["usize",0]],["bool",0]],[[["",0],["usize",0]],["bool",0]],[[["",0]],["zipvalidity",3,[["binaryvalueiter",3]]]],[[["",0]],["zipvalidity",3,[["bool",0],["bitmapiter",3]]]],[[["",0]],["zipvalidity",3,[["bool",0],["bitmapiter",3]]]],[[["",0]],["zipvalidity",3,[["box",3,[["scalar",8]]],["dictionaryvaluesiter",3]]]],[[["",0]],["zipvalidity",3,[["fixedsizebinaryvaluesiter",3,[["mutablefixedsizebinaryarray",3]]]]]],[[["",0]],["zipvalidity",3,[["fixedsizebinaryvaluesiter",3,[["fixedsizebinaryarray",3]]]]]],[[["",0]],["zipvalidity",3,[["box",3,[["array",8]]],["listvaluesiter",3,[["fixedsizelistarray",3]]]]]],[[["",0]],["zipvalidity",3,[["box",3,[["array",8]]],["listvaluesiter",3,[["listarray",3]]]]]],[[["",0]],["zipvalidity",3,[["box",3,[["array",8]]],["mapvaluesiter",3]]]],[[["",0]],["zipvalidity",3,[["iter",3]]]],[[["",0]],["zipvalidity",3,[["iter",3]]]],[[["",0]],["zipvalidity",3,[["vec",3,[["box",3,[["scalar",8]]]]],["structvalueiter",3]]]],[[["",0]],["unioniter",3]],[[["",0]],["zipvalidity",3,[["str",0],["utf8valuesiter",3]]]],[[["",0]],["fixedsizebinaryvaluesiter",3,[["mutablefixedsizebinaryarray",3]]]],[[["",0]],["fixedsizebinaryvaluesiter",3,[["fixedsizebinaryarray",3]]]],[[["",0]],["primitivearray",3]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0],["",0]]],[[["",0],["primitivearray",3]]],[[["",0],["primitivearray",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["binaryarray",3]]],[[]],[[["datatype",4],["buffer",3],["buffer",3,[["u8",0]]],["option",4,[["bitmap",3]]]]],[[]],[[["datatype",4],["bitmap",3],["option",4,[["bitmap",3]]]]],[[]],[[["usize",0]]],[[["datatype",4],["buffer",3,[["u8",0]]],["option",4,[["bitmap",3]]]]],[[["usize",0]]],[[["datatype",4],["arc",3,[["array",8]]],["option",4,[["bitmap",3]]]]],[[]],[[["datatype",4],["buffer",3],["arc",3,[["array",8]]],["option",4,[["bitmap",3]]]]],[[["datatype",4],["buffer",3,[["i32",0]]],["arc",3,[["array",8]]],["option",4,[["bitmap",3]]]]],[[["datatype",4],["usize",0]]],[[]],[[["datatype",4],["buffer",3],["option",4,[["bitmap",3]]]]],[[["datatype",4],["vec",3,[["arc",3,[["array",8]]]]],["option",4,[["bitmap",3]]]]],[[["datatype",4],["buffer",3,[["i8",0]]],["vec",3,[["arc",3,[["array",8]]]]],["option",4,[["buffer",3,[["i32",0]]]]]]],[[["utf8array",3]]],[[]],[[["datatype",4],["buffer",3],["buffer",3,[["u8",0]]],["option",4,[["bitmap",3]]]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]],["box",3,[["array",8]]]],[[["datatype",4],["usize",0]]],[[["datatype",4],["usize",0]]],[[["datatype",4],["usize",0]]],[[["datatype",4],["usize",0]]],[[["datatype",4],["usize",0]]],[[["datatype",4],["usize",0]]],[[["datatype",4],["usize",0]]],[[["datatype",4],["usize",0]]],[[["datatype",4],["usize",0]]],[[["datatype",4],["usize",0]]],[[["datatype",4],["usize",0]]],[[["datatype",4],["usize",0]]],[[["datatype",4],["usize",0]]],[[["datatype",4],["usize",0]],["box",3,[["array",8]]]],[[["datatype",4],["buffer",3],["buffer",3,[["u8",0]]],["option",4,[["bitmap",3]]]]],[[["datatype",4],["buffer",3],["arc",3,[["array",8]]],["option",4,[["bitmap",3]]]]],[[["datatype",4],["buffer",3],["buffer",3,[["u8",0]]],["option",4,[["bitmap",3]]]]],[[["usize",0]]],[[["str",0],["bool",0]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["usize",0]],[[["",0]]],[[["",0]],["vec",3]],[[["",0]]],[[["",0]],["buffer",3]],[[["",0]],["vec",3]],[[["",0]],["buffer",3]],[[["",0]],["buffer",3]],[[["",0]],["option",4]],[[["",0]],["vec",3]],[[["",0]]],[[["",0]],["buffer",3]],null,[[["",0],["primitivearray",3]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["primitivearray",3]]],[[["",0],["",0]]],[[["",0],["primitivearray",3]]],[[["",0],["option",4,[["asref",8]]]]],[[["",0],["option",4,[["bool",0]]]]],[[["",0],["option",4,[["asref",8]]]]],[[["",0],["option",4]]],[[["",0],["option",4,[["asref",8,[["str",0]]]]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["",0]]],[[["",0],["primitivearray",3]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["",0]]],[[["",0],["primitivearray",3]]],[[["",0],["primitivearray",3]]],[[["",0],["",0]]],[[["",0],["primitivearray",3]]],[[["",0],["primitivearray",3]]],[[["",0],["primitivearray",3]]],[[["",0],["",0]]],[[["",0],["primitivearray",3]]],[[["",0],["usize",0],["option",4,[["bool",0]]]]],[[["",0],["usize",0],["option",4]]],[[["",0],["usize",0],["option",4]]],[[["",0],["option",4,[["mutablebitmap",3]]]]],[[["",0],["vec",3]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]]],[[["",0]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["",0]]],[[["",0],["primitivearray",3]]],[[["",0],["primitivearray",3]]],[[["datatype",4]]],[[["datatype",4]]],[[["datatype",4]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["intoiterator",8]],["result",6]],[[["",0],["intoiterator",8]],["result",6]],[[["",0],["intoiterator",8]],["result",6]],[[["",0],["intoiterator",8]],["result",6]],[[["",0],["intoiterator",8]],["result",6]],[[["",0],["intoiterator",8]],["result",6]],[[["",0],["intoiterator",8]],["result",6]],[[["",0],["intoiterator",8]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["intoiterator",8],["usize",0]],["result",6]],[[["intoiterator",8],["usize",0]],["result",4,[["arrowerror",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["datatype",4],["buffer",3],["buffer",3,[["u8",0]]],["option",4,[["bitmap",3]]]],["result",6]],[[["datatype",4],["bitmap",3],["option",4,[["bitmap",3]]]],["result",4,[["arrowerror",4]]]],[[["datatype",4],["buffer",3,[["u8",0]]],["option",4,[["bitmap",3]]]],["result",4,[["arrowerror",4]]]],[[["datatype",4],["arc",3,[["array",8]]],["option",4,[["bitmap",3]]]],["result",4,[["arrowerror",4]]]],[[["datatype",4],["buffer",3],["arc",3,[["array",8]]],["option",4,[["bitmap",3]]]],["result",4,[["arrowerror",4]]]],[[["datatype",4],["buffer",3,[["i32",0]]],["arc",3,[["array",8]]],["option",4,[["bitmap",3]]]],["result",4,[["arrowerror",4]]]],[[["datatype",4],["usize",0]],["result",4,[["arrowerror",4]]]],[[["datatype",4],["buffer",3],["option",4,[["bitmap",3]]]],["result",4,[["arrowerror",4]]]],[[["datatype",4],["vec",3,[["arc",3,[["array",8]]]]],["option",4,[["bitmap",3]]]],["result",4,[["arrowerror",4]]]],[[["datatype",4],["buffer",3,[["i8",0]]],["vec",3,[["arc",3,[["array",8]]]]],["option",4,[["buffer",3,[["i32",0]]]]]],["result",4,[["arrowerror",4]]]],[[["datatype",4],["buffer",3],["buffer",3,[["u8",0]]],["option",4,[["bitmap",3]]]],["result",6]],[[["datatype",4],["buffer",3],["buffer",3,[["u8",0]]],["option",4,[["bitmap",3]]]],["result",6]],[[["datatype",4],["buffer",3],["arc",3,[["array",8]]],["option",4,[["bitmap",3]]]],["result",4,[["arrowerror",4]]]],[[["datatype",4],["buffer",3],["buffer",3,[["u8",0]]],["option",4,[["bitmap",3]]]],["result",6]],[[["",0]],["result",6]],[[["",0],["option",4]],["result",6]],[[["",0],["option",4,[["bool",0]]]],["result",6]],[[["",0],["option",4,[["asref",8]]]],["result",6]],[[["",0],["option",4]],["result",6]],[[["",0],["option",4]],["result",6]],[[["",0],["option",4]],["result",6]],[[["",0],["option",4]],["result",6]],[[["",0],["",0]],["result",6,[["bool",0]]]],[[["",0]],["result",6]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["buffer",3]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0]],["option",4,[["mutablebitmap",3]]]],[[["",0]],["option",4,[["mutablebitmap",3]]]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0]],["option",4,[["mutablebitmap",3]]]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0]],["option",4,[["mutablebitmap",3]]]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0]],["option",4,[["mutablebitmap",3]]]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0]],["option",4,[["mutablebitmap",3]]]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0]],["option",4,[["mutablebitmap",3]]]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0]],["option",4,[["mutablebitmap",3]]]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0]],["option",4,[["mutablebitmap",3]]]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0]],["option",4,[["bitmap",3]]]],[[["",0],["usize",0]]],[[["",0],["usize",0]],["bool",0]],[[["",0],["usize",0]],["box",3,[["scalar",8]]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0]]],[[["",0],["usize",0]],["box",3,[["scalar",8]]]],[[["",0],["usize",0]],["str",0]],[[["",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0]]],[[["",0],["usize",0]],["bool",0]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0]],["box",3,[["array",8]]]],[[["",0],["usize",0]]],[[["",0],["usize",0]],["str",0]],[[["",0]]],[[["",0]],["vec",3]],[[["",0]]],[[["",0]],["buffer",3]],[[["",0]],["mutablebitmap",3]],[[["",0]],["bitmap",3]],[[["",0]],["",0]],[[["",0]],["arc",3]],[[["",0]],["vec",3]],[[["",0]],["buffer",3]],[[["",0]],["",0]],[[["",0]],["arc",3]],[[["",0]],["",0]],[[["",0]],["arc",3]],[[["",0]],["vec",3]],[[["",0]],["buffer",3]],[[["",0]]],[[["",0]],["vec",3]],[[["",0]],["buffer",3]],[[["",0]]],[[["",0]],["binaryvalueiter",3]],[[["",0]],["bitmapiter",3]],[[["",0]],["bitmapiter",3]],[[["",0]],["dictionaryvaluesiter",3]],[[["",0]],["listvaluesiter",3,[["fixedsizelistarray",3]]]],[[["",0]],["listvaluesiter",3,[["listarray",3]]]],[[["",0]],["mapvaluesiter",3]],[[["",0]],["iter",3]],[[["",0]],["structvalueiter",3]],[[["",0]],["utf8valuesiter",3]],[[["",0]]],[[["",0]]],[[["usize",0],["usize",0]]],[[["usize",0],["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0],["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0],["datatype",4]]],[[["",0],["option",4,[["bitmap",3]]]],["box",3,[["array",8]]]],[[["",0],["option",4,[["bitmap",3]]]]],[[["",0],["option",4,[["bitmap",3]]]],["box",3,[["array",8]]]],[[["",0],["option",4,[["bitmap",3]]]]],[[["",0],["option",4,[["bitmap",3]]]],["box",3,[["array",8]]]],[[["",0],["option",4,[["bitmap",3]]]],["box",3,[["array",8]]]],[[["",0],["option",4,[["bitmap",3]]]]],[[["",0],["option",4,[["bitmap",3]]]]],[[["",0],["option",4,[["bitmap",3]]]],["box",3,[["array",8]]]],[[["",0],["option",4,[["bitmap",3]]]],["box",3,[["array",8]]]],[[["",0],["option",4,[["bitmap",3]]]]],[[["",0],["option",4,[["bitmap",3]]]]],[[["",0],["option",4,[["bitmap",3]]]],["box",3,[["array",8]]]],[[["",0],["option",4,[["bitmap",3]]]],["box",3,[["array",8]]]],[[["",0],["option",4,[["bitmap",3]]]],["box",3,[["array",8]]]],[[["",0],["option",4,[["bitmap",3]]]],["box",3,[["array",8]]]],[[["",0],["option",4,[["bitmap",3]]]]],[[["",0],["option",4,[["bitmap",3]]]]],[[["",0],["option",4,[["bitmap",3]]]],["box",3,[["array",8]]]],[[["",0],["option",4,[["bitmap",3]]]],["box",3,[["array",8]]]],[[["",0],["option",4,[["bitmap",3]]]],["box",3,[["array",8]]]],[[["",0],["option",4,[["bitmap",3]]]]],[[["",0],["primitivearray",3]]],[[["",0],["primitivearray",3]]],[[["",0],["primitivearray",3]]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["arc",3,[["array",8]]]],[[["",0]],["arc",3,[["array",8]]]],[[["",0]],["arc",3,[["array",8]]]],[[["",0]],["arc",3,[["array",8]]]],[[["",0]],["arc",3,[["array",8]]]],[[["",0]],["arc",3,[["array",8]]]],[[["",0]],["arc",3,[["array",8]]]],[[["",0]],["arc",3,[["array",8]]]],[[["",0]],["arc",3,[["array",8]]]],[[["",0]],["arc",3,[["array",8]]]],[[["",0]],["arc",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["box",3,[["array",8]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["",0],["usize",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0],["usize",0]]],[[["",0],["usize",0],["usize",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bool",0],["usize",0]],["box",3,[["growable",8]]]],[[["vec",3,[["binaryarray",3]]],["bool",0],["usize",0]]],[[["vec",3,[["booleanarray",3]]],["bool",0],["usize",0]]],[[["vec",3,[["fixedsizebinaryarray",3]]],["bool",0],["usize",0]]],[[["datatype",4]]],[[["vec",3,[["primitivearray",3]]],["bool",0],["usize",0]]],[[["vec",3,[["listarray",3]]],["bool",0],["usize",0]]],[[["vec",3,[["structarray",3]]],["bool",0],["usize",0]]],[[["vec",3,[["fixedsizelistarray",3]]],["bool",0],["usize",0]]],[[["vec",3,[["utf8array",3]]],["bool",0],["usize",0]]],[[["bool",0],["usize",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["array",8],["array",8]],["result",6,[["dyncomparator",6]]]],[[["",0],["",0]],["ordering",4]],[[["f32",0],["f32",0]],["ordering",4]],[[["f64",0],["f64",0]],["ordering",4]],null,null,[[["",0]]],[[["",0]]],[[["bitmap",3],["bitmap",3]],["bitmap",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["usize",0]],[[["trustedlen",8]],["vec",3,[["u8",0]]]],[[["",0]],["bitchunks",3,[["bitchunk",8]]]],[[["",0]]],[[["",0]],["bitmap",3]],[[["",0],["",0]]],[[]],[[]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["usize",0],["bool",0]]],[[["",0],["bitmap",3]]],[[["",0],["usize",0],["usize",0]]],[[["",0],["trustedlen",8]]],[[["",0],["iterator",8]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["mutablebitmap",3]]],[[]],[[]],[[["iterator",8]],["vec",3,[["u8",0]]]],[[]],[[]],[[["usize",0]]],[[]],[[["trustedlen",8]]],[[]],[[["iterator",8]]],[[["asref",8],["usize",0]]],[[["vec",3,[["u8",0]]],["usize",0]]],[[["vec",3,[["u8",0]]],["usize",0]]],[[["",0],["usize",0]],["bool",0]],[[["",0],["usize",0]],["option",4,[["bool",0]]]],[[["",0],["usize",0]],["bool",0]],[[["",0],["usize",0]],["bool",0]],[[]],[[]],[[],["either",4,[["mutablebitmap",3]]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bitmapiter",3]],[[["",0]],["bitmapiter",3]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[]],[[]],[[["usize",0]]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0],["usize",0],["usize",0]],["usize",0]],[[["",0],["bool",0]]],[[["",0],["bool",0]]],[[["bitmap",3],["bitmap",3],["bitmap",3],["bitmap",3]],["bitmap",3]],[[["",0],["usize",0]]],[[["",0],["usize",0],["bool",0]]],[[["",0],["usize",0],["bool",0]]],[[["",0]]],[[["usize",0],["usize",0]]],[[["usize",0],["usize",0]]],[[["bitmap",3],["bitmap",3],["bitmap",3]],["bitmap",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["trustedlen",8]],["result",4]],[[],["result",4]],[[["iterator",8]],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["bitmap",3]],["bitmap",3]],null,[[["usize",0]]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["usize",0]],[[["",0]]],[[["",0]],["bitmapiter",3]],[[["",0]],["slicesiterator",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["usize",0],["usize",0]],["usize",0]],[[["usize",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",0]],["bool",0]],[[["usize",0]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["u8",0],["usize",0]],["bool",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["option",4,[["bitmapiter",3]]]]],[[["usize",0]]],[[["usize",0],["usize",0]]],[[["usize",0],["usize",0]]],[[["bitmap",3]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4,[["bool",0]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["bitchunkiter",3]],[[["",0]],["bitchunkiter",3]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["u8",0],["usize",0],["bool",0]],["u8",0]],[[["usize",0],["bool",0]]],[[["usize",0],["bool",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["usize",0]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["iterator",8],["option",4,[["bitmapiter",3]]]],["zipvalidity",3,[["iterator",8]]]],null,[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["buffer",3]],[[["",0],["",0]]],[[]],[[["",0]]],[[["",0],["buffer",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["vec",3]]],[[]],[[["intoiterator",8]]],[[["asref",8]]],[[["trustedlen",8]]],[[["iterator",8]]],[[]],[[],["either",4,[["vec",3]]]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[["",0],["buffer",3]],["bool",0]],[[]],[[["usize",0]]],[[["",0]],["usize",0]],[[["usize",0],["usize",0]]],[[["usize",0],["usize",0]]],[[["",0]]],[[],["result",4]],[[["trustedlen",8]],["result",4]],[[["iterator",8]],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["chunk",3]],[[["",0],["",0]]],[[["",0]]],[[["",0]]],[[["",0],["chunk",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["vec",3]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[["",0],["chunk",3]],["bool",0]],[[["vec",3]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["vec",3]],["result",6]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["datatype",4]],["bool",0]],[[["array",8]],["usize",0]],[[["array",8]],["result",6,[["box",3,[["scalar",8]]]]]],[[]],[[["binaryarray",3]],["option",4]],[[["booleanarray",3]],["option",4,[["bool",0]]]],[[]],[[["primitivearray",3]],["option",4]],[[["utf8array",3]],["option",4,[["str",0]]]],[[["array",8]],["result",6,[["box",3,[["scalar",8]]]]]],[[]],[[["binaryarray",3]],["option",4]],[[["booleanarray",3]],["option",4,[["bool",0]]]],[[]],[[["primitivearray",3]],["option",4]],[[["utf8array",3]],["option",4,[["str",0]]]],[[]],[[]],[[]],[[["array",8]],["result",6,[["box",3,[["scalar",8]]]]]],[[["primitivearray",3]],["option",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["array",8],["array",8]],["box",3,[["array",8]]]],[[["",0],["",0]]],[[["array",8],["scalar",8]],["box",3,[["array",8]]]],null,[[["datatype",4],["datatype",4]],["bool",0]],[[["datatype",4],["datatype",4]],["bool",0]],[[["datatype",4],["datatype",4]],["bool",0]],[[["datatype",4]],["bool",0]],[[["datatype",4],["datatype",4]],["bool",0]],[[["datatype",4],["datatype",4]],["bool",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["array",8],["array",8]],["box",3,[["array",8]]]],[[["",0],["",0]]],[[["array",8],["scalar",8]],["box",3,[["array",8]]]],[[["array",8],["array",8]],["box",3,[["array",8]]]],[[["",0],["",0]]],[[["array",8],["scalar",8]],["box",3,[["array",8]]]],[[["array",8]],["box",3,[["array",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["array",8],["array",8]],["box",3,[["array",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["array",8],["array",8]],["box",3,[["array",8]]]],[[["",0],["",0]]],[[["array",8],["scalar",8]],["box",3,[["array",8]]]],null,[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["",0]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["",0]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["",0]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["",0]],["primitivearray",3]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["usize",0]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["",0]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["",0]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["",0]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["",0]],["primitivearray",3]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3]]],[[["primitivearray",3],["",0]]],[[["primitivearray",3],["primitivearray",3]]],[[["primitivearray",3],["",0]]],[[["primitivearray",3],["primitivearray",3]]],[[["primitivearray",3],["",0]]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["",0]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["",0]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["",0]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["",0]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["",0]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["",0]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["",0]],["primitivearray",3]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["",0]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3]],["result",6,[["primitivearray",3,[["i128",0]]]]]],[[["primitivearray",3],["primitivearray",3]],["result",6,[["primitivearray",3,[["i128",0]]]]]],[[["primitivearray",3],["primitivearray",3]],["result",6,[["primitivearray",3,[["i128",0]]]]]],[[["primitivearray",3],["primitivearray",3]],["result",6,[["primitivearray",3,[["i128",0]]]]]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3,[["i128",0]]]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3,[["i128",0]]]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3,[["i128",0]]]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3,[["i128",0]]]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3,[["i128",0]]]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3,[["i128",0]]]],[[["primitivearray",3],["primitivescalar",3]],["primitivearray",3,[["i128",0]]]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3,[["i128",0]]]],[[["primitivearray",3],["primitivescalar",3]],["primitivearray",3,[["i128",0]]]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3,[["i128",0]]]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3,[["i128",0]]]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3,[["i128",0]]]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3,[["i128",0]]]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3,[["i128",0]]]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["primitivescalar",3]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3]],["result",6,[["primitivearray",3,[["i64",0]]]]]],[[["primitivearray",3],["primitivescalar",3]],["result",6,[["primitivearray",3,[["i64",0]]]]]],[[["primitivearray",3],["primitivescalar",3]],["primitivearray",3]],[[["primitivearray",3],["primitivescalar",3]],["result",6,[["primitivearray",3,[["i64",0]]]]]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3]],["result",6,[["primitivearray",3,[["i64",0]]]]]],[[["primitivearray",3],["primitivearray",3],["datatype",4]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3],["datatype",4]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3],["datatype",4]]],[[["primitivearray",3],["primitivearray",3],["datatype",4]],["result",6,[["primitivearray",3]]]],[[["primitivearray",3],["datatype",4]],["result",6,[["primitivearray",3]]]],[[["primitivearray",3],["datatype",4]],["primitivearray",3]],[[["primitivearray",3],["datatype",4]],["primitivearray",3]],[[["primitivearray",3],["datatype",4]]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["",0]],["primitivearray",3]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["",0]],["primitivearray",3]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3],["",0]],["primitivearray",3]],[[["booleanarray",3]],["bool",0]],[[["booleanarray",3],["booleanarray",3]],["result",6,[["booleanarray",3]]]],[[["booleanarray",3],["booleanscalar",3]],["booleanarray",3]],[[["booleanarray",3]],["bool",0]],[[["array",8]],["booleanarray",3]],[[["array",8]],["booleanarray",3]],[[["booleanarray",3]],["booleanarray",3]],[[["booleanarray",3],["booleanarray",3]],["result",6,[["booleanarray",3]]]],[[["booleanarray",3],["booleanscalar",3]],["booleanarray",3]],[[["booleanarray",3],["booleanarray",3]],["result",6,[["booleanarray",3]]]],[[["booleanarray",3],["booleanscalar",3]],["booleanarray",3]],[[["booleanarray",3],["booleanarray",3]],["result",6,[["booleanarray",3]]]],[[["booleanarray",3],["booleanscalar",3]],["booleanarray",3]],null,[[["binaryarray",3],["datatype",4]],["result",6,[["binaryarray",3,[["i32",0]]]]]],[[["binaryarray",3]],["result",6,[["dictionaryarray",3,[["dictionarykey",8]]]]]],[[["binaryarray",3],["datatype",4]],["binaryarray",3,[["i64",0]]]],[[["binaryarray",3],["datatype",4]],["primitivearray",3]],[[["booleanarray",3]],["binaryarray",3,[["offset",8]]]],[[["booleanarray",3]],["primitivearray",3]],[[["booleanarray",3]],["utf8array",3,[["offset",8]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["datatype",4],["datatype",4]],["bool",0]],[[["array",8],["datatype",4],["castoptions",3]],["result",6,[["box",3,[["array",8]]]]]],[[["",0]],["castoptions",3]],[[["",0],["",0]]],[[["primitivearray",3]],["primitivearray",3,[["i64",0]]]],[[["primitivearray",3]],["primitivearray",3,[["i32",0]]]],[[["primitivearray",3],["usize",0],["usize",0]],["primitivearray",3,[["i128",0]]]],[[["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],["primitivearray",3]],[[],["castoptions",3]],[[["dictionaryarray",3]],["result",6,[["dictionaryarray",3]]]],[[["dictionaryarray",3],["datatype",4]],["result",6,[["dictionaryarray",3,[["dictionarykey",8]]]]]],[[["dictionaryarray",3]],["box",3,[["array",8]]]],[[["primitivearray",3],["usize",0],["usize",0]],["primitivearray",3,[["i128",0]]]],[[["",0],["formatter",3]],["result",6]],[[]],[[["primitivearray",3],["usize",0],["usize",0]],["primitivearray",3,[["i128",0]]]],[[]],[[["primitivearray",3],["timeunit",4]],["utf8array",3,[["offset",8]]]],null,[[["binaryarray",3],["datatype",4]],["primitivearray",3]],[[["utf8array",3],["datatype",4]],["primitivearray",3]],[[["primitivearray",3],["datatype",4]],["primitivearray",3]],[[["primitivearray",3]],["binaryarray",3,[["offset",8]]]],[[["primitivearray",3],["datatype",4]],["booleanarray",3]],[[["primitivearray",3]],["result",6,[["dictionaryarray",3,[["dictionarykey",8]]]]]],[[["primitivearray",3],["datatype",4]],["primitivearray",3]],[[["primitivearray",3],["datatype",4]],["primitivearray",3]],[[["primitivearray",3]],["utf8array",3,[["offset",8]]]],[[["primitivearray",3],["timeunit",4],["timeunit",4]],["primitivearray",3,[["i64",0]]]],[[["primitivearray",3]],["primitivearray",3,[["i32",0]]]],[[["primitivearray",3]],["primitivearray",3,[["i32",0]]]],[[["primitivearray",3],["timeunit",4],["timeunit",4]],["primitivearray",3,[["i32",0]]]],[[["primitivearray",3]],["primitivearray",3,[["i64",0]]]],[[["primitivearray",3]],["primitivearray",3,[["i64",0]]]],[[["primitivearray",3],["timeunit",4]],["primitivearray",3,[["i32",0]]]],[[["primitivearray",3],["timeunit",4]],["primitivearray",3,[["i64",0]]]],[[["primitivearray",3],["timeunit",4],["timeunit",4],["option",4]],["primitivearray",3,[["i64",0]]]],[[["primitivearray",3],["timeunit",4],["str",0]],["result",6,[["utf8array",3,[["offset",8]]]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["utf8array",3]],["result",6,[["utf8array",3,[["i32",0]]]]]],[[["utf8array",3]],["primitivearray",3,[["i32",0]]]],[[["utf8array",3]],["primitivearray",3,[["i64",0]]]],[[["utf8array",3]],["result",6,[["dictionaryarray",3,[["dictionarykey",8]]]]]],[[["utf8array",3]],["utf8array",3,[["i64",0]]]],[[["utf8array",3]],["primitivearray",3,[["i64",0]]]],[[["utf8array",3],["datatype",4]],["primitivearray",3]],[[["utf8array",3],["string",3]],["result",6,[["primitivearray",3,[["i64",0]]]]]],null,[[["dictionaryarray",3]],["result",6,[["dictionaryarray",3]]]],[[["dictionaryarray",3],["datatype",4]],["result",6,[["dictionaryarray",3,[["dictionarykey",8]]]]]],null,null,null,null,null,null,null,[[["datatype",4]],["bool",0]],[[["datatype",4]],["bool",0]],[[["datatype",4]],["bool",0]],[[["datatype",4]],["bool",0]],[[["datatype",4]],["bool",0]],[[["datatype",4]],["bool",0]],[[["datatype",4]],["bool",0]],[[["datatype",4]],["bool",0]],[[["datatype",4]],["bool",0]],[[["datatype",4]],["bool",0]],[[["datatype",4]],["bool",0]],[[["datatype",4]],["bool",0]],[[["array",8],["array",8]],["booleanarray",3]],[[],["u8",0]],[[["array",8],["array",8]],["booleanarray",3]],[[["array",8],["scalar",8]],["booleanarray",3]],[[["array",8],["scalar",8]],["booleanarray",3]],[[]],[[]],[[["array",8],["array",8]],["booleanarray",3]],[[],["u8",0]],[[["array",8],["array",8]],["booleanarray",3]],[[],["u8",0]],[[["array",8],["scalar",8]],["booleanarray",3]],[[["array",8],["scalar",8]],["booleanarray",3]],[[["array",8],["array",8]],["booleanarray",3]],[[],["u8",0]],[[["array",8],["array",8]],["booleanarray",3]],[[],["u8",0]],[[["array",8],["scalar",8]],["booleanarray",3]],[[["array",8],["scalar",8]],["booleanarray",3]],[[["array",8],["array",8]],["booleanarray",3]],[[],["u8",0]],[[["array",8],["array",8]],["booleanarray",3]],[[["array",8],["scalar",8]],["booleanarray",3]],[[["array",8],["scalar",8]],["booleanarray",3]],null,null,[[["binaryarray",3],["binaryarray",3]],["booleanarray",3]],[[["binaryarray",3],["binaryarray",3]],["booleanarray",3]],[[["binaryarray",3]],["booleanarray",3]],[[["binaryarray",3]],["booleanarray",3]],[[["binaryarray",3],["binaryarray",3]],["booleanarray",3]],[[["binaryarray",3],["binaryarray",3]],["booleanarray",3]],[[["binaryarray",3]],["booleanarray",3]],[[["binaryarray",3]],["booleanarray",3]],[[["binaryarray",3],["binaryarray",3]],["booleanarray",3]],[[["binaryarray",3],["binaryarray",3]],["booleanarray",3]],[[["binaryarray",3]],["booleanarray",3]],[[["binaryarray",3]],["booleanarray",3]],[[["binaryarray",3],["binaryarray",3]],["booleanarray",3]],[[["binaryarray",3],["binaryarray",3]],["booleanarray",3]],[[["binaryarray",3]],["booleanarray",3]],[[["binaryarray",3]],["booleanarray",3]],[[["booleanarray",3],["bool",0]],["booleanarray",3]],[[["booleanarray",3],["booleanarray",3]],["booleanarray",3]],[[["booleanarray",3],["booleanarray",3]],["booleanarray",3]],[[["booleanarray",3],["bool",0]],["booleanarray",3]],[[["booleanarray",3],["bool",0]],["booleanarray",3]],[[["booleanarray",3],["booleanarray",3]],["booleanarray",3]],[[["booleanarray",3],["booleanarray",3]],["booleanarray",3]],[[["booleanarray",3],["bool",0]],["booleanarray",3]],[[["booleanarray",3],["bool",0]],["booleanarray",3]],[[["booleanarray",3],["booleanarray",3]],["booleanarray",3]],[[["booleanarray",3],["booleanarray",3]],["booleanarray",3]],[[["booleanarray",3],["bool",0]],["booleanarray",3]],[[["booleanarray",3],["bool",0]],["booleanarray",3]],[[["booleanarray",3],["booleanarray",3]],["booleanarray",3]],[[["booleanarray",3],["booleanarray",3]],["booleanarray",3]],[[["booleanarray",3],["bool",0]],["booleanarray",3]],[[["booleanarray",3],["bool",0]],["booleanarray",3]],[[["primitivearray",3]],["booleanarray",3]],[[["primitivearray",3],["primitivearray",3]],["booleanarray",3]],[[["primitivearray",3],["primitivearray",3]],["booleanarray",3]],[[["primitivearray",3]],["booleanarray",3]],[[["primitivearray",3]],["booleanarray",3]],[[["primitivearray",3],["primitivearray",3]],["booleanarray",3]],[[["primitivearray",3],["primitivearray",3]],["booleanarray",3]],[[["primitivearray",3]],["booleanarray",3]],[[["primitivearray",3]],["booleanarray",3]],[[["primitivearray",3],["primitivearray",3]],["booleanarray",3]],[[["primitivearray",3],["primitivearray",3]],["booleanarray",3]],[[["primitivearray",3]],["booleanarray",3]],[[["primitivearray",3]],["booleanarray",3]],[[["primitivearray",3],["primitivearray",3]],["booleanarray",3]],[[["primitivearray",3],["primitivearray",3]],["booleanarray",3]],[[["primitivearray",3]],["booleanarray",3]],[[["primitivearray",3]],["booleanarray",3]],[[["utf8array",3],["utf8array",3]],["booleanarray",3]],[[["utf8array",3],["utf8array",3]],["booleanarray",3]],[[["utf8array",3],["str",0]],["booleanarray",3]],[[["utf8array",3],["str",0]],["booleanarray",3]],[[["utf8array",3],["utf8array",3]],["booleanarray",3]],[[["utf8array",3],["utf8array",3]],["booleanarray",3]],[[["utf8array",3],["str",0]],["booleanarray",3]],[[["utf8array",3],["str",0]],["booleanarray",3]],[[["utf8array",3],["utf8array",3]],["booleanarray",3]],[[["utf8array",3],["utf8array",3]],["booleanarray",3]],[[["utf8array",3],["str",0]],["booleanarray",3]],[[["utf8array",3],["str",0]],["booleanarray",3]],[[["utf8array",3],["utf8array",3]],["booleanarray",3]],[[["utf8array",3],["utf8array",3]],["booleanarray",3]],[[["utf8array",3],["str",0]],["booleanarray",3]],[[["utf8array",3],["str",0]],["booleanarray",3]],[[],["result",6,[["box",3,[["array",8]]]]]],[[["array",8],["array",8]],["result",6,[["booleanarray",3]]]],null,[[["booleanarray",3]],["result",6,[["filter",6]]]],[[["array",8],["booleanarray",3]],["result",6,[["box",3,[["array",8]]]]]],[[["chunk",3],["booleanarray",3]],["result",6,[["chunk",3,[["box",3,[["array",8]]]]]]]],[[["datatype",4]],["bool",0]],[[["array",8]],["result",6,[["primitivearray",3,[["u64",0]]]]]],[[["binaryarray",3]],["primitivearray",3,[["u64",0]]]],[[["booleanarray",3]],["primitivearray",3,[["u64",0]]]],[[["primitivearray",3]],["primitivearray",3,[["u64",0]]]],[[["utf8array",3]],["primitivearray",3,[["u64",0]]]],[[["booleanarray",3],["array",8],["array",8]],["result",6,[["box",3,[["array",8]]]]]],[[["datatype",4]],["bool",0]],[[["array",8]],["result",6,[["box",3,[["array",8]]]]]],[[["binaryarray",3],["binaryarray",3]],["result",6,[["booleanarray",3]]]],[[["binaryarray",3]],["result",6,[["booleanarray",3]]]],[[["utf8array",3],["utf8array",3]],["result",6,[["booleanarray",3]]]],[[["utf8array",3],["str",0]],["result",6,[["booleanarray",3]]]],[[["binaryarray",3],["binaryarray",3]],["result",6,[["booleanarray",3]]]],[[["binaryarray",3]],["result",6,[["booleanarray",3]]]],[[["utf8array",3],["utf8array",3]],["result",6,[["booleanarray",3]]]],[[["utf8array",3],["str",0]],["result",6,[["booleanarray",3]]]],[[["array",8],["usize",0]],["box",3,[["array",8]]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["result",6,[["box",3,[["fn",8]]]]]],[[]],[[]],[[]],[[["array",8],["array",8],["sortoptions",3],["option",4,[["usize",0]]]],["result",6,[["box",3,[["array",8]]]]]],[[["iterator",8],["iterator",8],["box",3]],["mergesortslices",3,[["iterator",8],["iterator",8]]]],[[]],[[["",0]],["option",4]],[[],["result",6,[["vec",3,[["mergeslice",6]]]]]],[[["intoiterator",8],["option",4,[["usize",0]]]],["box",3,[["array",8]]]],[[["option",4,[["usize",0]]]],["vec",3,[["mergeslice",6]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["datatype",4],["datatype",4]],["bool",0]],[[["array",8],["array",8]],["box",3,[["array",8]]]],[[["array",8],["scalar",8]],["box",3,[["array",8]]]],[[["primitivearray",3],["primitivearray",3]],["primitivearray",3]],[[["primitivearray",3]],["primitivearray",3]],[[],["result",6]],[[["utf8array",3],["utf8array",3]],["result",6,[["booleanarray",3]]]],[[["utf8array",3],["str",0]],["result",6,[["booleanarray",3]]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["datatype",4]],["bool",0]],[[["",0]],["sortcolumn",3]],[[["",0]],["sortoptions",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["option",4,[["usize",0]]]],["result",6,[["vec",3,[["box",3,[["array",8]]]]]]]],[[["option",4,[["usize",0]]]],["result",6,[["primitivearray",3,[["index",8]]]]]],null,null,[[["array",8],["sortoptions",3],["option",4,[["usize",0]]]],["result",6,[["box",3,[["array",8]]]]]],[[["array",8],["sortoptions",3],["option",4,[["usize",0]]]],["result",6,[["primitivearray",3,[["index",8]]]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["datatype",4]],["bool",0]],[[["array",8],["i64",0],["option",4]],["result",6,[["box",3,[["array",8]]]]]],[[["datatype",4]],["bool",0]],[[["array",8],["primitivearray",3]],["result",6,[["box",3,[["array",8]]]]]],[[["datatype",4]],["bool",0]],[[["datatype",4]],["bool",0]],[[["datatype",4]],["bool",0]],[[["datatype",4]],["bool",0]],[[["datatype",4]],["bool",0]],[[["datatype",4]],["bool",0]],[[["datatype",4]],["bool",0]],[[["datatype",4]],["bool",0]],[[["datatype",4]],["bool",0]],[[["array",8]],["result",6,[["primitivearray",3,[["u32",0]]]]]],[[["array",8]],["result",6,[["primitivearray",3,[["u32",0]]]]]],[[["array",8]],["result",6,[["primitivearray",3,[["u32",0]]]]]],[[["array",8]],["result",6,[["primitivearray",3,[["u32",0]]]]]],[[["array",8]],["result",6,[["primitivearray",3,[["u32",0]]]]]],[[["array",8]],["result",6,[["primitivearray",3,[["u32",0]]]]]],[[["array",8]],["result",6,[["primitivearray",3,[["u32",0]]]]]],[[["array",8]],["result",6,[["primitivearray",3,[["u32",0]]]]]],[[["array",8]],["result",6,[["primitivearray",3,[["i32",0]]]]]],[[["datatype",4]],["bool",0]],[[["datatype",4]],["bool",0]],[[["array",8]],["result",6,[["box",3,[["array",8]]]]]],[[["array",8]],["result",6,[["box",3,[["array",8]]]]]],[[["fn",8],["utf8array",3]],["utf8array",3,[["offset",8]]]],[[["array",8],["i64",0]],["result",6,[["box",3,[["array",8]]]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["field",3]],[[["",0]],["physicaltype",4]],[[["",0]],["integertype",4]],[[["",0]],["schema",3]],[[["",0]],["datatype",4]],[[["",0]],["unionmode",4]],[[["",0]],["timeunit",4]],[[["",0]],["intervalunit",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["datatype",4]],null,[[],["schema",3]],[[["",0],["field",3]],["bool",0]],[[["",0],["physicaltype",4]],["bool",0]],[[["",0],["integertype",4]],["bool",0]],[[["",0],["schema",3]],["bool",0]],[[["",0],["datatype",4]],["bool",0]],[[["",0],["unionmode",4]],["bool",0]],[[["",0],["timeunit",4]],["bool",0]],[[["",0],["intervalunit",4]],["bool",0]],[[["",0],["primitivetype",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["vec",3,[["field",3]]]]],[[]],[[["integertype",4]]],[[["primitivetype",4]]],[[]],[[]],[[]],[[["metadata",6]],["option",4]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],null,[[["",0]],["bool",0]],null,null,null,[[["",0],["field",3]],["bool",0]],[[["",0],["physicaltype",4]],["bool",0]],[[["",0],["schema",3]],["bool",0]],[[["",0],["datatype",4]],["bool",0]],[[["into",8,[["string",3]]],["datatype",4],["bool",0]]],[[["bool",0]]],[[["",0]],["datatype",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["physicaltype",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["metadata",6]]],[[["metadata",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["error",3]]],[[["utf8error",3]]],[[]],[[["parqueterror",4]]],[[["utf8error",3]]],[[["error",3]]],[[["error",3]]],[[["parseerror",3]]],[[["csverror",3]]],[[["error",3]]],[[]],[[]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["arrowschema",3]],[[["",0]],["arrowarray",3]],[[["",0]],["arrowarraystream",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[]],[[]],[[]],[[["arc",3,[["array",8]]]]],[[["field",3]]],[[["box",3,[["iterator",8]]],["field",3]]],[[["",0]],["field",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["box",3,[["arrowarray",3]]],["datatype",4]],["result",6,[["box",3,[["array",8]]]]]],[[["arrowschema",3]],["result",6,[["field",3]]]],[[]],[[]],[[]],[[]],[[["",0]],["option",4,[["result",4,[["box",3,[["array",8]]],["arrowerror",4]]]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["box",3,[["arrowarraystream",3]]]],["result",4,[["arrowerror",4]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["compression",4]],[[["",0]],["compressedblock",3]],[[["",0]],["block",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[],["compressedblock",3]],[[],["block",3]],[[["",0],["compression",4]],["bool",0]],[[["",0],["compressedblock",3]],["bool",0]],[[["",0],["block",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[]],[[]],[[]],[[["",0],["compressedblock",3]],["bool",0]],[[["",0],["block",3]],["bool",0]],[[["usize",0],["vec",3,[["u8",0]]]]],[[["usize",0],["vec",3,[["u8",0]]]]],null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["result",6]],[[["",0]],["result",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["compressedblock",3]],[[["compressedblock",3],["block",3],["option",4,[["compression",4]]]],["result",6,[["bool",0]]]],[[["block",3]],["result",6,[["chunk",3,[["arc",3,[["array",8]]]]]]]],[[]],[[]],[[]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["blockstreamiterator",3],["option",4,[["compression",4]]]]],[[["decompressor",3],["vec",3,[["avroschema",4]]],["vec",3,[["field",3]]],["option",4,[["vec",3,[["bool",0]]]]]]],[[["",0]],["option",4]],[[["",0]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]]],[[["",0]]],null,[[["datatype",4]],["bool",0]],[[["block",3],["compressedblock",3],["option",4,[["compression",4]]]],["result",6,[["bool",0]]]],[[["array",8],["avroschema",4]],["boxserializer",6]],[[["block",3]]],[[["schema",3]],["result",6,[["vec",3,[["avrofield",3]]]]]],[[["",0],["compressedblock",3]],["result",6]],[[["",0],["vec",3,[["avrofield",3]]],["option",4,[["compression",4]]]],["result",6]],[[["",0],["compressedblock",3]]],[[["",0],["vec",3,[["avrofield",3]]],["option",4,[["compression",4]]]]],null,null,null,null,null,null,[[["",0]],["readerbuilder",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["usize",0]],["readerbuilder",3]],[[["",0]],["result",4,[["byterecord",3],["error",3]]]],[[["",0]],["byterecordsiter",3]],[[["",0],["option",4,[["u8",0]]]],["readerbuilder",3]],[[],["readerbuilder",3]],[[["",0],["u8",0]],["readerbuilder",3]],[[["",0]],["deserializerecordsiter",3]],[[["option",4],["usize",0]],["result",6,[["chunk",3,[["arc",3,[["array",8]]]]]]]],[[["usize",0],["datatype",4],["usize",0]],["result",6,[["arc",3,[["array",8]]]]]],[[["",0],["bool",0]],["readerbuilder",3]],[[["",0],["option",4,[["u8",0]]]],["readerbuilder",3]],[[["",0],["bool",0]],["readerbuilder",3]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[["",0]],["result",4,[["reader",3,[["file",3]]],["error",3]]]],[[],["result",4,[["reader",3,[["file",3]]],["error",3]]]],[[["",0]],["reader",3]],[[],["reader",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["bool",0]],["readerbuilder",3]],[[["",0]],["bool",0]],[[["",0]],["result",4,[["stringrecord",3],["error",3]]]],[[],["datatype",4]],[[["reader",3],["option",4,[["usize",0]]],["bool",0],["",0]],["result",6]],[[]],[[]],[[],["byterecordsintoiter",3]],[[],["deserializerecordsintoiter",3]],[[]],[[],["stringrecordsintoiter",3]],[[["",0]],["bool",0]],[[],["readerbuilder",3]],[[["",0]],["position",3]],[[["",0],["u8",0]],["readerbuilder",3]],[[["",0],["bool",0]],["readerbuilder",3]],[[["",0],["byterecord",3]],["result",4,[["bool",0],["error",3]]]],[[["",0],["stringrecord",3]],["result",4,[["bool",0],["error",3]]]],[[["reader",3],["usize",0]],["result",6,[["usize",0]]]],[[["",0]],["stringrecordsiter",3]],[[["",0],["position",3]],["result",4,[["error",3]]]],[[["",0],["seekfrom",4],["position",3]],["result",4,[["error",3]]]],[[["",0],["byterecord",3]]],[[["",0],["stringrecord",3]]],[[["",0],["terminator",4]],["readerbuilder",3]],[[["",0],["trim",4]],["readerbuilder",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]]],[[["",0]],["asyncreaderbuilder",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["usize",0]],["asyncreaderbuilder",3]],[[["",0]]],[[["",0]],["byterecordsstream",3]],[[["",0]]],[[["",0]],["byterecord",3]],[[["",0],["",0]]],[[["",0],["option",4,[["u8",0]]]],["asyncreaderbuilder",3]],[[["",0]],["asyncdeserializer",3]],[[["",0]],["asyncreader",3]],[[],["error",3]],[[],["byterecord",3]],[[],["asyncreaderbuilder",3]],[[["",0],["u8",0]],["asyncreaderbuilder",3]],[[["",0],["option",4,[["byterecord",3]]]],["result",4,[["error",3]]]],[[["option",4],["usize",0]],["result",6,[["chunk",3,[["arc",3,[["array",8]]]]]]]],[[["usize",0],["datatype",4],["usize",0]],["result",6,[["arc",3,[["array",8]]]]]],[[["",0],["bool",0]],["asyncreaderbuilder",3]],[[["",0],["bool",0]],["asyncreaderbuilder",3]],[[["",0]],["bool",0]],[[["",0],["vec",3]],["bool",0]],[[["",0],["byterecord",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["option",4,[["u8",0]]]],["asyncreaderbuilder",3]],[[["",0]]],[[["",0],["bool",0]],["asyncreaderbuilder",3]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["stringrecord",3]],["byterecord",3]],[[],["byterecord",3]],[[["vec",3,[["global",3]]]],["byterecord",3]],[[]],[[["error",3]],["error",3]],[[]],[[]],[[]],[[],["byterecord",3]],[[],["asyncreader",3]],[[["",0],["usize",0]],["option",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["bool",0]],[[["",0],["bool",0]],["asyncreaderbuilder",3]],[[["",0]]],[[["",0],["usize",0]]],[[],["datatype",4]],[[["asyncreader",3],["option",4,[["usize",0]]],["bool",0],["",0]]],[[]],[[]],[[]],[[]],[[],["byterecordsintostream",3]],[[]],[[],["errorkind",4]],[[],["stringrecordsintostream",3]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["byterecorditer",3]],[[["",0]],["errorkind",4]],[[["",0]],["usize",0]],[[],["byterecord",3]],[[],["asyncreaderbuilder",3]],[[["",0]],["option",4,[["position",3]]]],[[["",0]],["option",4,[["position",3]]]],[[["",0]],["position",3]],[[["",0]]],[[["",0],["u8",0]],["asyncreaderbuilder",3]],[[["",0],["bool",0]],["asyncreaderbuilder",3]],[[["",0],["usize",0]],["option",4,[["range",3,[["usize",0]]]]]],[[["",0],["byterecord",3]]],[[["",0],["stringrecord",3]]],[[["asyncreader",3],["usize",0]]],[[["",0]],["stringrecordsstream",3]],[[["",0]]],[[["",0],["position",3]]],[[["",0],["seekfrom",4],["position",3]]],[[["",0],["byterecord",3]]],[[["",0],["stringrecord",3]]],[[["",0],["option",4,[["position",3]]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0],["terminator",4]],["asyncreaderbuilder",3]],[[["",0]]],[[["",0]],["string",3]],[[["",0]]],[[["",0],["trim",4]],["asyncreaderbuilder",3]],[[["",0],["usize",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["usize",0],["usize",0]],["byterecord",3]],null,null,null,[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["usize",0]],["writerbuilder",3]],[[["",0]]],[[["",0]],["byterecord",3]],[[["",0]],["serializeoptions",3]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[],["byterecord",3]],[[],["writerbuilder",3]],[[]],[[["",0],["u8",0]],["writerbuilder",3]],null,[[["",0],["option",4,[["byterecord",3]]]],["result",4,[["error",3]]]],[[["",0],["bool",0]],["writerbuilder",3]],[[["",0],["byterecord",3]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["vec",3]],["bool",0]],[[["",0],["serializeoptions",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["u8",0]],["writerbuilder",3]],[[["",0]]],[[["",0],["bool",0]],["writerbuilder",3]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["stringrecord",3]],["byterecord",3]],[[],["byterecord",3]],[[]],[[["vec",3,[["global",3]]]],["byterecord",3]],[[]],[[]],[[],["byterecord",3]],[[["",0]],["result",4,[["writer",3,[["file",3]]],["error",3]]]],[[["",0]],["writer",3]],[[["",0],["usize",0]],["option",4]],[[["",0],["",0]],["u64",0]],[[["",0],["bool",0]],["writerbuilder",3]],[[["",0],["",0]]],[[["",0],["usize",0]]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["byterecorditer",3]],[[["",0]],["usize",0]],[[["",0],["serializeoptions",3]],["bool",0]],[[],["byterecord",3]],[[],["writerbuilder",3]],[[["array",8],["serializeoptions",3]],["result",6,[["box",3,[["streamingiterator",8]]]]]],[[["",0]],["option",4,[["position",3]]]],[[["",0]]],[[["",0],["u8",0]],["writerbuilder",3]],null,[[["",0],["quotestyle",4]],["writerbuilder",3]],[[["",0],["usize",0]],["option",4,[["range",3,[["usize",0]]]]]],[[["chunk",3],["serializeoptions",3]],["result",6,[["vec",3,[["vec",3,[["u8",0]]]]]]]],[[["",0],["option",4,[["position",3]]]]],[[["",0],["terminator",4]],["writerbuilder",3]],null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["usize",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["usize",0],["usize",0]],["byterecord",3]],[[["",0],["chunk",3],["serializeoptions",3]],["result",6]],[[["",0],["serializeoptions",3]],["result",6]],[[["flightdata",3],["ipcschema",3],["dictionaries",6]],["result",6,[["chunk",3,[["arc",3,[["array",8]]]]]]]],[[],["result",6]],[[["chunk",3],["writeoptions",3]]],[[["schema",3],["option",4]],["flightdata",3]],[[["schema",3],["option",4]],["result",6,[["vec",3,[["u8",0]]]]]],[[["schema",3],["option",4]],["schemaresult",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["ipcfield",3]],[[["",0]],["ipcschema",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["ipcfield",3]],null,[[["",0],["ipcfield",3]],["bool",0]],[[["",0],["ipcschema",3]],["bool",0]],null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[["",0],["ipcfield",3]],["bool",0]],[[["",0],["ipcschema",3]],["bool",0]],null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["filemetadata",3]],[[["",0]],["streammetadata",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["",0]],["bool",0]],[[["",0]],["filemetadata",3]],[[["",0]],["streammetadata",3]],[[["filemetadata",3],["option",4,[["vec",3,[["usize",0]]]]]]],[[["streammetadata",3]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["dictionarybatchref",3],["ipcschema",3],["dictionaries",6],["",0],["u64",0]],["result",6]],[[["",0]],["result",6,[["filemetadata",3]]]],[[["recordbatchref",3],["ipcschema",3],["option",4],["dictionaries",6],["metadataversion",4],["",0],["u64",0]],["result",6,[["chunk",3,[["arc",3,[["array",8]]]]]]]],[[["",0]],["result",6,[["streammetadata",3]]]],[[["",0]],["schema",3]],null,null,null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["chunk",3,[["arc",3,[["array",8]]]]]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["",0]],["streammetadata",3]],[[["streammetadata",3]]],[[["pin",3],["context",3]],["poll",4,[["option",4]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["pin",3],["context",3]],["poll",4,[["option",4,[["result",4]]]]]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["compression",4]],[[["",0],["",0]]],null,[[],["vec",3,[["ipcfield",3]]]],[[["",0],["compression",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],[[["writeoptions",3]]],[[["schema",3]],["vec",3,[["u8",0]]]],[[["",0],["schema",3],["option",4,[["vec",3,[["ipcfield",3]]]]]],["result",6]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["schema",3],["option",4,[["vec",3,[["ipcfield",3]]]]],["writeoptions",3]],["result",6]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["array",8],["vec",3],["vec",3],["vec",3],["i64",0],["bool",0],["option",4,[["compression",4]]]]],[[["",0],["chunk",3],["option",4]],["result",6]],[[["",0],["chunk",3],["option",4]],["result",6]],[[["array",8],["vec",3],["vec",3],["vec",3],["i64",0],["bool",0],["option",4,[["compression",4]]],["bool",0]],["usize",0]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["writeoptions",3]],[[["",0],["",0]]],null,[[],["writeoptions",3]],[[["",0],["writeoptions",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[]],[[]],[[]],[[["",0],["writeoptions",3]],["bool",0]],[[["writeoptions",3]]],[[["",0],["schema",3],["option",4]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["chunk",3],["schema",3],["option",4]]],null,null,[[["value",4],["datatype",4]],["result",4,[["arc",3,[["array",8]]],["arrowerror",4]]]],[[["value",4]],["result",6,[["datatype",4]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4,[["arrowerror",4]]]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4,[["bool",0]]]],[[["",0]],["result",4,[["bool",0]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["serializer",3]],[[["",0],["",0]]],[[],["convert",3]],[[],["result",4,[["usize",0]]]],[[],["empty",3]],[[],["filter",3]],[[["",0]],["result",4,[["option",4]]]],[[["",0],["formatter",3]],["result",6]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fuse",3]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["map",3]],[[],["maperr",3]],[[],["mapref",3]],[[["vec",3,[["u8",0]]]]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["result",4,[["option",4]]]],[[["",0],["usize",0]],["result",4,[["option",4]]]],[[["",0]],["result",4,[["option",4,[["usize",0]]]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["usize",0]],["skip",3]],[[],["skipwhile",3]],[[["usize",0]],["take",3]],[[],["takewhile",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["result",4,[["arrowerror",4]]]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["",0]],["arrowjsoncolumn",3]],[[["",0],["",0]]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["schema",3],["arrowjsonbatch",3],["hashmap",3]],["result",6,[["chunk",3,[["arc",3,[["array",8]]]]]]]],[[["value",4]],["result",6]],[[["datatype",4],["ipcfield",3],["arrowjsoncolumn",3],["hashmap",3]],["result",6,[["arc",3,[["array",8]]]]]],[[["chunk",3]],["arrowjsonbatch",3]],[[["schema",3]],["arrowjsonschema",3]],null,null,null,null,null,null,[[["",0]],["result",4]],[[["",0]],["result",6]],[[["",0]],["result",4,[["bool",0]]]],[[["",0]],["result",4,[["bool",0]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["result",4,[["usize",0]]]],[[["datatype",4]],["result",4,[["arc",3,[["array",8]]],["arrowerror",4]]]],[[],["filter",3]],[[["",0]],["result",4,[["option",4]]]],[[],["result",4]],[[]],[[],["fuse",3]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["option",4,[["usize",0]]]],["result",6,[["datatype",4]]]],[[]],[[]],[[],["map",3]],[[],["maperr",3]],[[],["mapref",3]],[[["vec",3,[["string",3]]],["option",4,[["usize",0]]]]],[[["",0]],["result",4,[["option",4]]]],[[["",0],["usize",0]],["result",4,[["option",4]]]],[[["",0]],["result",4,[["option",4,[["usize",0]]]]]],[[["",0]]],[[["usize",0]],["skip",3]],[[],["skipwhile",3]],[[["usize",0]],["take",3]],[[],["takewhile",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4,[["arrowerror",4]]]],[[["",0]],["result",4,[["bool",0]]]],[[["",0]],["result",4,[["bool",0]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["serializer",3]],[[["",0],["",0]]],[[],["result",4,[["usize",0]]]],[[],["filter",3]],[[["",0]],["result",4,[["option",4]]]],[[["",0],["formatter",3]],["result",6]],[[],["result",4]],[[]],[[]],[[],["fuse",3]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[]],[[]],[[]],[[]],[[],["map",3]],[[],["maperr",3]],[[],["mapref",3]],[[]],[[["vec",3,[["u8",0]]]]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["option",4]],[[["",0],["usize",0]],["result",4,[["option",4]]]],[[["",0]],["result",4,[["option",4,[["usize",0]]]]]],[[["",0]]],[[["usize",0]],["skip",3]],[[],["skipwhile",3]],[[["usize",0]],["take",3]],[[],["takewhile",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["columnchunkmetadata",3],["option",4,[["arc",3,[["fn",8]]]]],["vec",3,[["u8",0],["global",3]]]],["result",4,[["pageiterator",3],["parqueterror",4]]]],[[["columnchunkmetadata",3],["",0],["vec",3,[["u8",0],["global",3]]],["arc",3,[["fn",8]]]]],[[["",0]],["result",4,[["filemetadata",3],["parqueterror",4]]]],[[["",0]]],[[["",0]],["result",4]],[[],["result",4,[["state",4]]]],[[["",0]],["result",4,[["parqueterror",4]]]],[[["",0]],["result",4,[["parqueterror",4]]]],[[],["result",4,[["state",4,[["readcolumniterator",3]]],["parqueterror",4]]]],[[["",0]],["result",4,[["bool",0]]]],[[["",0]],["result",4,[["boolvec",3]],[[["",0]],["vec",3]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["timeunit",4]],[[["",0]],["timestamptype",3]],[[["",0]],["logicaltype",4]],[[["",0]],["parqueterror",4]],[[["",0]],["columnchunkmetadata",3]],[[["",0]],["filemetadata",3]],[[["",0]],["rowgroupmetadata",3]],[[["",0]],["datapageheader",4]],[[["",0]],["datapage",3]],[[["",0]],["physicaltype",4]],[[["",0]],["primitiveconvertedtype",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["timeunit",4]],["ordering",4]],[[["",0],["timestamptype",3]],["ordering",4]],[[["",0],["logicaltype",4]],["ordering",4]],[[["",0],["usize",0]],["columnchunkmetadata",3]],[[["",0]],["vec",3]],[[["vec",3],["vec",3,[["parquettype",4]]],["field",3],["usize",0]],["result",6,[["arrayiter",6]]]],[[["",0],["usize",0]],["columnorder",4]],null,[[["",0]]],[[["",0]],["i64",0]],[[["",0]],["i64",0]],[[["",0]],["compression",4]],[[],["result",4,[["usize",0]]]],null,[[["",0]],["i64",0]],[[["compresseddatapage",3],["vec",3]],["result",4,[["datapage",3],["parqueterror",4]]]],[[["",0]],["encoding",4]],[[["",0]],["columndescriptor",3]],[[["",0]],["columndescriptor",3]],[[["",0]],["option",4,[["arc",3]]]],[[["",0]],["option",4,[["i64",0]]]],[[["",0]],["encoding",4]],[[["",0],["timeunit",4]],["bool",0]],[[["",0],["timestamptype",3]],["bool",0]],[[["",0],["logicaltype",4]],["bool",0]],[[["",0],["physicaltype",4]],["bool",0]],[[["",0],["primitiveconvertedtype",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0]],["parquettype",4]],[[["",0]],["parquettype",4]],[[["",0]],["i64",0]],[[["",0]],["option",4]],[[],["filter",3]],[[["",0]],["result",4,[["option",4]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["arrowerror",4]]],[[]],[[["error",4]],["parqueterror",4]],[[["error",4]],["parqueterror",4]],[[["error",3]],["parqueterror",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fuse",3]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["filemetadata",3],["usize",0],["usize",0],["option",4,[["arc",3,[["fn",8]]]]],["vec",3,[["u8",0],["global",3]]]],["columniterator",3]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["columnchunkmetadata",3],["",26,[["read",8],["seek",8]]],["option",4,[["pagefilter",6]]],["vec",3,[["u8",0]]]],["result",6,[["pageiterator",3,[["",26,[["read",8],["seek",8]]]]]]]],[[["",0]],["bool",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["datapageheader",4]],[[["",0]],["option",4,[["i64",0]]]],[[],["i64",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3,[["u8",0],["global",3]]]],[[]],[[],["vec",3,[["u8",0],["global",3]]]],[[]],[[]],[[]],[[]],[[]],[[],["columnchunk",3]],[[],["result",4,[["filemetadata",3],["parqueterror",4]]]],[[],["rowgroup",3]],null,[[["",0]],["option",4]],null,[[],["map",3]],[[],["maperr",3]],[[],["mapref",3]],[[["",0]],["filemetadata",3]],[[["",0],["timeunit",4]],["bool",0]],[[["",0],["timestamptype",3]],["bool",0]],[[["",0],["logicaltype",4]],["bool",0]],[[["",0],["physicaltype",4]],["bool",0]],[[["",0],["primitiveconvertedtype",4]],["bool",0]],[[["pageiterator",3],["vec",3,[["u8",0],["global",3]]]],["decompressor",3]],[[["vec",3,[["u8",0],["global",3]]]],["basicdecompressor",3]],[[["i64",0],["compression",4],["columndescriptor",3],["arc",3,[["fn",8]]],["vec",3,[["u8",0],["global",3]]]],["pageiterator",3]],[[["bool",0],["timeunit",4]],["timestamptype",3]],[[["columnchunk",3],["columndescriptor",3]],["columnchunkmetadata",3]],[[["i32",0],["i64",0],["option",4,[["string",3]]],["vec",3,[["rowgroupmetadata",3],["global",3]]],["option",4,[["vec",3,[["keyvalue",3],["global",3]]]]],["schemadescriptor",3],["option",4,[["vec",3,[["columnorder",4],["global",3]]]]]],["filemetadata",3]],[[["vec",3,[["columnchunkmetadata",3],["global",3]]],["i64",0],["i64",0]],["rowgroupmetadata",3]],[[["datapageheader",4],["vec",3,[["u8",0],["global",3]]],["option",4,[["arc",3,[["dictpage",8]]]]],["columndescriptor",3]],["datapage",3]],[[["parquettype",4],["vec",3,[["global",3]]]],["readcolumniterator",3]],[[["schema",3],["option",4,[["arc",3,[["fn",8]]]]],["vec",3,[["rowgroupmetadata",3]]],["option",4,[["usize",0]]],["option",4,[["usize",0]]]]],[[["vec",3,[["arrayiter",6]]],["usize",0],["option",4,[["usize",0]]]]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["usize",0]],["result",4,[["option",4]]]],[[["",0]],["usize",0]],[[["",0]],["i64",0]],[[["",0]],["usize",0]],null,[[["",0]],["i64",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0],["timeunit",4]],["option",4,[["ordering",4]]]],[[["",0],["timestamptype",3]],["option",4,[["ordering",4]]]],[[["",0],["logicaltype",4]],["option",4,[["ordering",4]]]],[[["",0]],["physicaltype",4]],[[["",0]],["result",4,[["option",4,[["usize",0]]]]]],[[["",0],["str",0]],["result",6,[["vec",3]]]],[[["",26,[["fn",8],["clone",8]]],["str",0]]],[[["",0],["rowgroupmetadata",3],["vec",3,[["field",3]]],["option",4,[["usize",0]]]],["result",6,[["vec",3,[["arrayiter",6]]]]]],[[["",26,[["fn",8],["clone",8]]],["rowgroupmetadata",3],["vec",3,[["field",3]]],["option",4,[["usize",0]]]]],[[["tinputprotocol",8]],["result",4,[["timeunit",4],["error",4]]]],[[["tinputprotocol",8]],["result",4,[["timestamptype",3],["error",4]]]],[[["tinputprotocol",8]],["result",4,[["logicaltype",4],["error",4]]]],[[["",0]],["result",6,[["filemetadata",3]]]],[[["",0]]],[[["",0]],["encoding",4]],[[["",0],["vec",3,[["u8",0],["global",3]]]]],null,null,[[["",0]],["schemadescriptor",3]],[[["",0]],["schema",3]],null,[[["",0],["arc",3,[["fn",8]]]]],[[["",0],["arc",3,[["fn",8]]]]],[[["",0]]],[[["",0]]],[[["usize",0]],["skip",3]],[[],["skipwhile",3]],null,[[["",0]],["option",4,[["result",4,[["arc",3,[["statistics",8]]],["parqueterror",4]]]]]],[[["",0]],["option",4,[["result",4,[["arc",3,[["statistics",8]]],["parqueterror",4]]]]]],[[["tinputstreamprotocol",8]]],[[["tinputstreamprotocol",8]]],[[["tinputstreamprotocol",8]]],[[["usize",0]],["take",3]],[[],["takewhile",3]],[[["vec",3],["field",3],["usize",0],["option",4,[["usize",0]]]],["result",6,[["arrayiter",6]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["i64",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["columndescriptor",3],["columnchunk",3]],["result",4,[["columnchunkmetadata",3],["parqueterror",4]]]],[[["schemadescriptor",3],["rowgroup",3]],["result",4,[["rowgroupmetadata",3],["parqueterror",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["option",4],["option",4,[["usize",0]]],["option",4,[["usize",0]]],["option",4,[["arc",3,[["fn",8]]]]]],["result",6]],[[["",0]],["type",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["i64",0]],null,null,[[["",0],["toutputprotocol",8]],["result",4,[["usize",0],["error",4]]]],[[["",0],["toutputprotocol",8]],["result",4,[["usize",0],["error",4]]]],[[["",0],["toutputprotocol",8]],["result",4,[["usize",0],["error",4]]]],[[["",0],["toutputstreamprotocol",8]]],[[["",0],["toutputstreamprotocol",8]]],[[["",0],["toutputstreamprotocol",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["filemetadata",3]],["result",6,[["schema",3]]]],null,null,[[["metadata",6]],["result",6,[["option",4,[["schema",3]]]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["primitivestatistics",3]],[[["",0]],["binarystatistics",3]],[[["",0]],["utf8statistics",3]],[[["",0]],["booleanstatistics",3]],[[["",0]],["fixedlenstatistics",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],null,null,[[["field",3]],["result",6,[["vec",3,[["option",4,[["box",3,[["statistics",8]]]]]]]]]],null,null,null,null,null,[[["",0],["",0]],["bool",0]],[[["",0],["primitivestatistics",3]],["bool",0]],[[["",0],["binarystatistics",3]],["bool",0]],[[["",0],["utf8statistics",3]],["bool",0]],[[["",0],["booleanstatistics",3]],["bool",0]],[[["",0],["fixedlenstatistics",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["parquetbytearraystatistics",3]]],[[]],[[]],[[]],[[["parquetbooleanstatistics",3]]],[[]],[[["parquetfixedlenstatistics",3]]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,[[["",0],["primitivestatistics",3]],["bool",0]],[[["",0],["binarystatistics",3]],["bool",0]],[[["",0],["utf8statistics",3]],["bool",0]],[[["",0],["booleanstatistics",3]],["bool",0]],[[["",0],["fixedlenstatistics",3]],["bool",0]],[[["",0]],["option",4,[["i64",0]]]],[[["",0]],["option",4,[["i64",0]]]],[[["",0]],["option",4,[["i64",0]]]],[[["",0]],["option",4,[["i64",0]]]],[[["",0]],["option",4,[["i64",0]]]],[[["",0]],["option",4,[["i64",0]]]],null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["parquetbytearraystatistics",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4,[["bool",0]]]],[[["",0]],["result",4,[["bool",0]]]],[[["array",8],["columndescriptor",3],["writeoptions",3],["encoding",4]],["result",6,[["encodedpage",4]]]],[[["array",8],["columndescriptor",3],["writeoptions",3],["encoding",4]],["result",6,[["dyniter",3,[["result",6,[["encodedpage",4]]]]]]]],[[["",0]],["parquettypedatatype",4],["encoding",4]],["bool",0]],[[["",0],["parquettype",4]],["bool",0]],[[["",0]],["columndescriptor",3]],[[["",0]],["schemadescriptor",3]],[[["",0]],["compression",4]],[[["",0]],["encoding",4]],[[["",0]],["parquettype",4]],[[["",0]],["writeoptions",3]],[[["",0]],["version",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["usize",0]],["columndescriptor",3]],[[["",0]]],[[["encodedpage",4],["vec",3,[["u8",0],["global",3]]],["compression",4]],["result",4,[["compressedpage",4],["parqueterror",4]]]],[[["",0]],["usize",0]],[[["",0]],["compression",4]],null,[[],["result",4,[["usize",0]]]],[[["",0]],["columndescriptor",3]],[[["option",4,[["vec",3,[["keyvalue",6]]]]]],["result",6]],[[["",0],["columndescriptor",3]],["bool",0]],[[["",0],["compression",4]],["bool",0]],[[["",0],["encoding",4]],["bool",0]],[[["",0],["parquettype",4]],["bool",0]],[[["",0],["writeoptions",3]],["bool",0]],[[["",0],["version",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0]]],[[],["filter",3]],[[["",0]],["result",4,[["option",4]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["string",3],["vec",3,[["parquettype",4],["global",3]]],["option",4,[["repetition",4]]],["option",4,[["groupconvertedtype",4]]],["option",4,[["i32",0]]]],["parquettype",4]],[[["string",3],["physicaltype",4]],["parquettype",4]],[[],["fuse",3]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["basictypeinfo",3]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["datapageheader",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[],["map",3]],[[],["maperr",3]],[[],["mapref",3]],[[["",0]],["i16",0]],[[["",0]],["i16",0]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0],["columndescriptor",3]],["bool",0]],[[["",0],["parquettype",4]],["bool",0]],[[["",0],["writeoptions",3]],["bool",0]],[[["compression",4],["vec",3,[["u8",0],["global",3]]]],["compressor",3]],[[],["dyniter",3]],[[],["dynstreamingiterator",3]],[[["parquettype",4],["i16",0],["i16",0],["vec",3,[["string",3],["global",3]]],["parquettype",4]],["columndescriptor",3]],[[["string",3],["vec",3,[["parquettype",4],["global",3]]]],["schemadescriptor",3]],[[["datapageheader",4],["vec",3,[["u8",0],["global",3]]],["compression",4],["usize",0],["option",4,[["arc",3,[["dictpage",8]]]]],["columndescriptor",3]],["compresseddatapage",3]],[[["compression",4],["vec",3,[["u8",0],["global",3]]]],["compressor",3]],[[["string",3],["vec",3,[["parquettype",4],["global",3]]]],["parquettype",4]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["usize",0]],["result",4,[["option",4]]]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["writeoptions",3]],[[["",0]],["writeoptions",3]],[[["",0]],["schemadescriptor",3]],[[["",0]],["schemadescriptor",3]],[[["",0]],["schemadescriptor",3]],[[["",0]]],[[["",0]],["physicaltype",4]],[[["pin",3],["context",3]],["poll",4,[["result",4]]]],[[["pin",3],["context",3]],["poll",4,[["result",4]]]],[[["pin",3],["context",3]],["poll",4,[["result",4]]]],[[["",0]],["result",4,[["option",4,[["usize",0]]]]]],[[["chunk",3,[["",26,[["asref",8,[["array",8]]],["send",8],["sync",8]]]]],["vec",3,[["encoding",4]]],["vec",3,[["columndescriptor",3]]],["writeoptions",3]],["rowgroupiter",6,[["arrowerror",4]]]],[[["",0]],["schema",3]],[[["",0]],["schema",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["usize",0]],["skip",3]],[[],["skipwhile",3]],[[["",0]],["result",6]],[[["pin",3],["chunk",3,[["arc",3,[["array",8]]]]]],["result",4]],[[["",0]],["option",4,[["result",4,[["arc",3,[["statistics",8]]],["parqueterror",4]]]]]],[[["usize",0]],["take",3]],[[],["takewhile",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["schema",3]],["result",6,[["schemadescriptor",3]]]],[[["field",3]],["result",6,[["parquettype",4]]]],[[["",0]],["result",4,[["vec",3,[["schemaelement",3],["global",3]]],["parqueterror",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["compressioncodec",3]],["result",4,[["compression",4]]]],[[],["result",4]],[[["encoding",3]],["result",4,[["encoding",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["string",3],["repetition",4],["option",4,[["groupconvertedtype",4]]],["option",4,[["logicaltype",4]]],["vec",3,[["parquettype",4],["global",3]]],["option",4,[["i32",0]]]],["result",4,[["parquettype",4],["parqueterror",4]]]],[[["str",0]],["result",4,[["schemadescriptor",3],["parqueterror",4]]]],[[["string",3],["physicaltype",4],["repetition",4],["option",4,[["primitiveconvertedtype",4]]],["option",4,[["logicaltype",4]]],["option",4,[["i32",0]]]],["result",4,[["parquettype",4],["parqueterror",4]]]],[[],["result",4,[["parquettype",4],["parqueterror",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["schema",3],["writeoptions",3]],["result",6]],[[["schema",3],["writeoptions",3],["vec",3,[["encoding",4]]]],["result",6]],[[["schema",3],["vec",3,[["encoding",4]]],["writeoptions",3]],["result",4,[["arrowerror",4]]]],[[["",0]],["parquettype",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["usize",0]],null,[[["",0],["rowgroupiter",6,[["arrowerror",4]]],["usize",0]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["string",3]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["dictionaryscalar",3]],[[["",0]],["primitivescalar",3]],[[["",0]],["utf8scalar",3]],[[["",0]],["binaryscalar",3]],[[["",0]],["booleanscalar",3]],[[["",0]],["listscalar",3]],[[["",0]],["nullscalar",3]],[[["",0]],["structscalar",3]],[[["",0]],["fixedsizelistscalar",3]],[[["",0]],["fixedsizebinaryscalar",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[["",0]],["datatype",4]],[[]],[[["",0],["scalar",8]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["primitivescalar",3]],["bool",0]],[[["",0],["utf8scalar",3]],["bool",0]],[[["",0],["binaryscalar",3]],["bool",0]],[[["",0],["booleanscalar",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["nullscalar",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["fixedsizebinaryscalar",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["option",4]]],[[]],[[["option",4]]],[[["option",4]]],[[]],[[["option",4,[["bool",0]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["primitivescalar",3]],["bool",0]],[[["",0],["utf8scalar",3]],["bool",0]],[[["",0],["binaryscalar",3]],["bool",0]],[[["",0],["booleanscalar",3]],["bool",0]],[[["",0],["fixedsizebinaryscalar",3]],["bool",0]],[[["datatype",4],["option",4,[["arc",3,[["scalar",8]]]]]]],[[["datatype",4],["option",4]]],[[["option",4,[["into",8,[["string",3]]]]]]],[[["option",4,[["into",8,[["vec",3,[["u8",0]]]]]]]]],[[["option",4,[["bool",0]]]]],[[["datatype",4],["option",4,[["arc",3,[["array",8]]]]]]],[[]],[[["datatype",4],["option",4,[["vec",3,[["arc",3,[["scalar",8]]]]]]]]],[[["datatype",4],["option",4,[["arc",3,[["array",8]]]]]]],[[["datatype",4],["option",4,[["into",8,[["vec",3,[["u8",0]]]]]]]]],[[["array",8],["usize",0]],["box",3,[["scalar",8]]]],[[["datatype",4]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["option",4,[["arc",3]]]],[[["",0]],["option",4]],[[["",0]],["option",4,[["str",0]]]],[[["",0]],["option",4]],[[["",0]],["option",4,[["bool",0]]]],[[["",0]],["option",4]],[[["",0]],["arc",3]],[[["",0]]],[[["",0]],["option",4,[["arc",3]]]],null,null,null,null,null,null,[[["i64",0],["timeunit",4],["months_days_ns",3],["",0]],["i64",0]],[[["i64",0],["timeunit",4],["months_days_ns",3]],["i64",0]],[[["i32",0]],["naivedate",3]],[[["i32",0]],["naivedatetime",3]],[[["i64",0]],["naivedate",3]],[[["i64",0]],["naivedatetime",3]],[[["str",0]],["result",6,[["fixedoffset",3]]]],[[["str",0]],["result",6,[["tz",4]]]],[[["i32",0]],["naivetime",3]],[[["i32",0]],["naivetime",3]],[[["i64",0]],["naivetime",3]],[[["i64",0]],["naivetime",3]],[[["i64",0]],["naivedatetime",3]],[[["i64",0]],["naivedatetime",3]],[[["i64",0]],["naivedatetime",3]],[[["i64",0],["timeunit",4],["",0]],["datetime",3,[["timezone",8]]]],[[["i64",0],["timeunit",4]],["naivedatetime",3]],[[["i64",0]],["naivedatetime",3]],[[["timeunit",4],["timeunit",4]],["f64",0]],[[["utf8array",3],["str",0]],["primitivearray",3,[["i64",0]]]],[[["str",0],["str",0]],["option",4,[["i64",0]]]],[[["utf8array",3],["str",0],["string",3]],["result",6,[["primitivearray",3,[["i64",0]]]]]],[[["str",0],["str",0],["",0]],["option",4,[["i64",0]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["days_ms",3]],[[["",0]],["months_days_ns",3]],[[["",0]],["primitivetype",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["i32",0]],[[["",0]],["i32",0]],null,[[],["days_ms",3]],[[],["months_days_ns",3]],[[["",0],["days_ms",3]],["bool",0]],[[["",0],["months_days_ns",3]],["bool",0]],[[["",0],["primitivetype",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",0]],["option",4]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",0]],[[["",0]],["i32",0]],[[["",0]],["i32",0]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["days_ms",3]],["bool",0]],[[["",0],["months_days_ns",3]],["bool",0]],[[]],[[]],[[["usize",0]]],[[]],[[]],[[["i32",0],["i32",0]]],[[["i32",0],["i32",0],["i64",0]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["i64",0]],[[["usize",0],["usize",0]],["option",4,[["indexrange",3]]]],[[["usize",0],["usize",0]],["option",4,[["indexrange",3]]]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["usize",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["u8x64",3]],[[["",0]],["u16x32",3]],[[["",0]],["u32x16",3]],[[["",0]],["u64x8",3]],[[["",0]],["i8x64",3]],[[["",0]],["i16x32",3]],[[["",0]],["i32x16",3]],[[["",0]],["i64x8",3]],[[["",0]],["f32x16",3]],[[["",0]],["f64x8",3]],[[["",0]],["days_msx8",3]],[[["",0]],["months_days_nsx8",3]],[[["",0]],["i128x8",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",0]]],[[["u16",0]]],[[["u32",0]]],[[["u64",0]]],[[["i8",0]]],[[["i16",0]]],[[["i32",0]]],[[["i64",0]]],[[["f32",0]]],[[["f64",0]]],[[["days_ms",3]]],[[["months_days_ns",3]]],[[["i128",0]]],null,null,null,null,null,[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u8",0]],[[],["u16",0]],[[],["u32",0]],[[],["u64",0]],[[],["i8",0]],[[],["i16",0]],[[],["i32",0]],[[],["i64",0]],[[],["f32",0]],[[],["f64",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u8",0]],[[],["u16",0]],[[],["u32",0]],[[],["u64",0]],[[],["i8",0]],[[],["i16",0]],[[],["i32",0]],[[],["i64",0]],[[],["f32",0]],[[],["f64",0]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",0]]],[[["u32",0]]],[[["u16",0]]],[[["u8",0]]],[[["u64",0]]],[[["u32",0]]],[[["u16",0]]],[[["u8",0]]],[[["u16",0]]],[[["u8",0]]],[[["u8",0]]],[[["u8",0]]],[[["u8",0]]],[[],["u8",0]],[[],["u16",0]],[[],["u32",0]],[[],["u64",0]],[[],["i8",0]],[[],["i16",0]],[[],["i32",0]],[[],["i64",0]],[[],["f32",0]],[[],["f64",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["tolexical",8]],["vec",3,[["u8",0]]]],[[["tolexical",8],["vec",3]]],[[["tolexical",8]],["string",3]]],"p":[[4,"Either"],[13,"Left"],[13,"Right"],[8,"DictionaryKey"],[3,"PrimitiveArray"],[8,"Array"],[8,"MutableArray"],[3,"MutableBinaryArray"],[3,"BinaryArray"],[3,"MutableBooleanArray"],[3,"BooleanArray"],[3,"MutableDictionaryArray"],[3,"DictionaryArray"],[3,"MutableFixedSizeBinaryArray"],[3,"FixedSizeBinaryArray"],[3,"MutableFixedSizeListArray"],[3,"FixedSizeListArray"],[3,"MutableListArray"],[3,"ListArray"],[3,"MapArray"],[3,"NullArray"],[3,"MutablePrimitiveArray"],[3,"StructArray"],[3,"UnionArray"],[3,"MutableUtf8Array"],[3,"Utf8Array"],[3,"BinaryValueIter"],[3,"Utf8ValuesIter"],[8,"Offset"],[8,"GenericBinaryArray"],[8,"TryExtend"],[8,"TryPush"],[8,"IterableListArray"],[3,"GrowableBinary"],[3,"GrowableBoolean"],[3,"GrowableFixedSizeBinary"],[3,"GrowableNull"],[3,"GrowablePrimitive"],[3,"GrowableList"],[3,"GrowableStruct"],[3,"GrowableFixedSizeList"],[3,"GrowableUtf8"],[3,"GrowableDictionary"],[8,"Growable"],[3,"MutableBitmap"],[3,"Bitmap"],[3,"ZipValidity"],[3,"BitChunksExact"],[3,"BitChunks"],[3,"BitmapIter"],[3,"SlicesIterator"],[8,"BitChunk"],[8,"BitChunkIterExact"],[3,"Buffer"],[3,"Chunk"],[8,"SimdOrd"],[8,"Sum"],[8,"ArrayAdd"],[8,"ArrayCheckedAdd"],[8,"ArrayCheckedDiv"],[8,"ArrayCheckedMul"],[8,"ArrayCheckedRem"],[8,"ArrayCheckedSub"],[8,"ArrayDiv"],[8,"ArrayMul"],[8,"ArrayOverflowingAdd"],[8,"ArrayOverflowingMul"],[8,"ArrayOverflowingSub"],[8,"ArrayRem"],[8,"ArraySaturatingAdd"],[8,"ArraySaturatingMul"],[8,"ArraySaturatingSub"],[8,"ArraySub"],[8,"ArrayWrappingAdd"],[8,"ArrayWrappingMul"],[8,"ArrayWrappingSub"],[3,"CastOptions"],[8,"Simd8"],[8,"Simd8PartialEq"],[8,"Simd8Lanes"],[8,"Simd8PartialOrd"],[3,"MergeSortSlices"],[3,"SortColumn"],[3,"SortOptions"],[4,"PhysicalType"],[4,"DataType"],[4,"IntervalUnit"],[4,"UnionMode"],[4,"IntegerType"],[4,"TimeUnit"],[3,"Field"],[3,"Schema"],[13,"Timestamp"],[13,"Time32"],[13,"Time64"],[13,"Duration"],[13,"Interval"],[13,"FixedSizeBinary"],[13,"List"],[13,"FixedSizeList"],[13,"LargeList"],[13,"Struct"],[13,"Union"],[13,"Map"],[13,"Dictionary"],[13,"Decimal"],[13,"Extension"],[13,"Primitive"],[13,"Dictionary"],[4,"ArrowError"],[13,"NotYetImplemented"],[13,"External"],[13,"Io"],[13,"InvalidArgumentError"],[13,"ExternalFormat"],[13,"OutOfSpec"],[3,"ArrowArrayStreamReader"],[3,"ArrowSchema"],[3,"ArrowArray"],[3,"ArrowArrayStream"],[4,"Compression"],[3,"CompressedBlock"],[3,"Block"],[3,"BlockStreamIterator"],[3,"Decompressor"],[3,"Reader"],[3,"ReaderBuilder"],[3,"Reader"],[3,"ByteRecord"],[3,"AsyncReaderBuilder"],[3,"CSVError"],[3,"AsyncReader"],[3,"ByteRecord"],[3,"WriterBuilder"],[3,"SerializeOptions"],[3,"IpcField"],[3,"IpcSchema"],[4,"StreamState"],[3,"FileReader"],[3,"StreamReader"],[3,"FileMetadata"],[3,"StreamMetadata"],[13,"Some"],[3,"AsyncStreamReader"],[4,"Compression"],[3,"StreamWriter"],[3,"FileWriter"],[3,"WriteOptions"],[3,"StreamWriter"],[8,"FallibleStreamingIterator"],[3,"Convert"],[3,"Empty"],[3,"Filter"],[3,"Fuse"],[3,"Map"],[3,"MapRef"],[3,"MapErr"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Serializer"],[8,"DoubleEndedFallibleStreamingIterator"],[3,"ArrowJson"],[3,"IntegerType"],[3,"ArrowJsonSchema"],[3,"ArrowJsonField"],[3,"ArrowJsonFieldDictionary"],[3,"ArrowJsonBatch"],[3,"ArrowJsonDictionaryBatch"],[3,"ArrowJsonColumn"],[3,"FileReader"],[3,"Serializer"],[3,"FileWriter"],[4,"LogicalType"],[4,"PhysicalType"],[4,"PrimitiveConvertedType"],[8,"MutStreamingIterator"],[4,"ParquetError"],[4,"State"],[4,"ParquetType"],[4,"ParquetTimeUnit"],[4,"DataPageHeader"],[3,"Decompressor"],[3,"BasicDecompressor"],[3,"ReadColumnIterator"],[3,"PageIterator"],[3,"TimestampType"],[3,"ColumnChunkMetaData"],[3,"FileMetaData"],[3,"RowGroupMetaData"],[3,"DataPage"],[3,"FileReader"],[3,"RowGroupReader"],[3,"RowGroupDeserializer"],[8,"ColumnChunkIter"],[13,"V1"],[13,"V2"],[13,"STRING"],[13,"MAP"],[13,"LIST"],[13,"ENUM"],[13,"DECIMAL"],[13,"DATE"],[13,"TIME"],[13,"TIMESTAMP"],[13,"INTEGER"],[13,"UNKNOWN"],[13,"JSON"],[13,"BSON"],[13,"UUID"],[13,"General"],[13,"FeatureNotActive"],[13,"OutOfSpec"],[13,"External"],[13,"MILLIS"],[13,"MICROS"],[13,"NANOS"],[13,"PrimitiveType"],[13,"GroupType"],[13,"FixedLenByteArray"],[13,"Decimal"],[13,"Some"],[13,"Finished"],[8,"Statistics"],[3,"PrimitiveStatistics"],[3,"BinaryStatistics"],[3,"Utf8Statistics"],[3,"BooleanStatistics"],[3,"FixedLenStatistics"],[4,"Encoding"],[4,"Compression"],[4,"EncodedPage"],[4,"CompressedPage"],[4,"Version"],[3,"Compressor"],[3,"DynStreamingIterator"],[3,"ColumnDescriptor"],[3,"DynIter"],[3,"SchemaDescriptor"],[3,"CompressedDataPage"],[3,"WriteOptions"],[3,"FileWriter"],[3,"RowGroupIterator"],[3,"FileSink"],[13,"Data"],[13,"Dict"],[13,"Data"],[13,"Dict"],[8,"Scalar"],[3,"DictionaryScalar"],[3,"PrimitiveScalar"],[3,"Utf8Scalar"],[3,"BinaryScalar"],[3,"BooleanScalar"],[3,"ListScalar"],[3,"NullScalar"],[3,"StructScalar"],[3,"FixedSizeListScalar"],[3,"FixedSizeBinaryScalar"],[8,"NativeType"],[4,"PrimitiveType"],[3,"BitChunkIter"],[3,"BitChunkOnes"],[3,"IndexRange"],[3,"days_ms"],[3,"months_days_ns"],[8,"Index"],[3,"u8x64"],[3,"u16x32"],[3,"u32x16"],[3,"u64x8"],[3,"i8x64"],[3,"i16x32"],[3,"i32x16"],[3,"i64x8"],[3,"f32x16"],[3,"f64x8"],[3,"days_msx8"],[3,"months_days_nsx8"],[3,"i128x8"],[8,"NativeSimd"],[8,"Simd"],[8,"FromMaskChunk"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};