initSidebarItems({"mod":[["aggregate","Contains different aggregation functions"],["arithmetics","Defines basic arithmetic kernels for `PrimitiveArray`s."],["arity","Defines kernels suitable to perform operations to primitive arrays."],["bitwise","Contains bitwise operators: [`or`], [`and`], [`xor`] and [`not`]."],["boolean","null-preserving operators such as [`and`], [`or`] and [`not`]."],["boolean_kleene","Boolean operators of Kleene logic."],["cast","Defines different casting operators such as [`cast`] or [`primitive_to_binary`]."],["comparison","Contains comparison operators"],["concatenate","Contains the concatenate kernel"],["contains","Declares the [`contains`] operator"],["filter","Contains operators to filter arrays such as [`filter`]."],["hash","Contains the [`hash`] and typed (e.g. [`hash_primitive`]) operators. // multiversion does not copy documentation, causing a false positive"],["if_then_else","Contains the operator [`if_then_else`]."],["length","Defines kernel for length of composite arrays"],["like","Contains “like” operators such as [`like_utf8`] and [`like_utf8_scalar`]."],["limit","Contains the operator [`limit`]."],["merge_sort","Functions to perform merge-sorts."],["nullif","Contains the operator [`nullif`]."],["partition","Defines partition kernel for [`crate::array::Array`]"],["regex_match","Contains regex matching operators [`regex_match`] and [`regex_match_scalar`]."],["sort","Contains operators to sort individual and slices of [`Array`]s."],["substring","Defines kernel to extract a substring of a [Large]StringArray"],["take","Defines take kernel for [`Array`]"],["temporal","Defines temporal kernels for time and date related functions."],["utf8","Defines common maps to a [`Utf8Array`]"],["window","Defines windowing functions, like `shift`ing"]]});